///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              30/Aug/2019  09:36:05
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\ZStack-CC2530-2.5.1a\Components\osal\common\OSAL.c
//    Command line       =  
//        -f C:\Users\Ð¡»ðÁú\AppData\Local\Temp\EW107C.tmp
//        (D:\ZStack-CC2530-2.5.1a\Components\osal\common\OSAL.c -D
//        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
//        xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_SAPI_FUNC
//        -D xMT_SAPI_CB_FUNC -lC
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleControllerEB\List
//        -lA
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleControllerEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleControllerEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x02000000 -DZDAPP_CONFIG_PAN_ID=0xFFF0
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\Source\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes --no_code_motion)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleControllerEB\List\OSAL.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME OSAL

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V7
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?C_GPTR_LOAD
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_DIV_MOD
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_SHR
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??Delayms::?relay`
        FUNCTION `??Delayms::?relay`,0203H
        PUBLIC `??_ltoa::?relay`
        FUNCTION `??_ltoa::?relay`,0203H
        PUBLIC `??osal_buffer_uint24::?relay`
        FUNCTION `??osal_buffer_uint24::?relay`,0203H
        PUBLIC `??osal_buffer_uint32::?relay`
        FUNCTION `??osal_buffer_uint32::?relay`,0203H
        PUBLIC `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,0203H
        PUBLIC `??osal_build_uint32::?relay`
        FUNCTION `??osal_build_uint32::?relay`,0203H
        PUBLIC `??osal_clear_event::?relay`
        FUNCTION `??osal_clear_event::?relay`,0203H
        PUBLIC `??osal_init_system::?relay`
        FUNCTION `??osal_init_system::?relay`,0203H
        PUBLIC `??osal_int_disable::?relay`
        FUNCTION `??osal_int_disable::?relay`,0203H
        PUBLIC `??osal_int_enable::?relay`
        FUNCTION `??osal_int_enable::?relay`,0203H
        PUBLIC `??osal_isbufset::?relay`
        FUNCTION `??osal_isbufset::?relay`,0203H
        PUBLIC `??osal_isr_register::?relay`
        FUNCTION `??osal_isr_register::?relay`,0203H
        PUBLIC `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,0203H
        PUBLIC `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,0203H
        PUBLIC `??osal_memdup::?relay`
        FUNCTION `??osal_memdup::?relay`,0203H
        PUBLIC `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,0203H
        PUBLIC `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,0203H
        PUBLIC `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,0203H
        PUBLIC `??osal_msg_dequeue::?relay`
        FUNCTION `??osal_msg_dequeue::?relay`,0203H
        PUBLIC `??osal_msg_enqueue::?relay`
        FUNCTION `??osal_msg_enqueue::?relay`,0203H
        PUBLIC `??osal_msg_enqueue_max::?relay`
        FUNCTION `??osal_msg_enqueue_max::?relay`,0203H
        PUBLIC `??osal_msg_extract::?relay`
        FUNCTION `??osal_msg_extract::?relay`,0203H
        PUBLIC `??osal_msg_find::?relay`
        FUNCTION `??osal_msg_find::?relay`,0203H
        PUBLIC `??osal_msg_push::?relay`
        FUNCTION `??osal_msg_push::?relay`,0203H
        PUBLIC `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,0203H
        PUBLIC `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,0203H
        PUBLIC `??osal_rand::?relay`
        FUNCTION `??osal_rand::?relay`,0203H
        PUBLIC `??osal_revmemcpy::?relay`
        FUNCTION `??osal_revmemcpy::?relay`,0203H
        PUBLIC `??osal_run_system::?relay`
        FUNCTION `??osal_run_system::?relay`,0203H
        PUBLIC `??osal_self::?relay`
        FUNCTION `??osal_self::?relay`,0203H
        PUBLIC `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,0203H
        PUBLIC `??osal_start_system::?relay`
        FUNCTION `??osal_start_system::?relay`,0203H
        PUBLIC `??osal_strlen::?relay`
        FUNCTION `??osal_strlen::?relay`,0203H
        PUBLIC Delayms
        FUNCTION Delayms,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK WDCTL
        PUBWEAK _A_IEN0
        PUBWEAK __Constant_2710
        PUBWEAK __Constant_5f5e100
        PUBLIC _ltoa
        FUNCTION _ltoa,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 55, STACK
        PUBLIC osal_buffer_uint24
        FUNCTION osal_buffer_uint24,080203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_buffer_uint32
        FUNCTION osal_buffer_uint32,080203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_build_uint16
        FUNCTION osal_build_uint16,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_build_uint32
        FUNCTION osal_build_uint32,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_clear_event
        FUNCTION osal_clear_event,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_init_system
        FUNCTION osal_init_system,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_int_disable
        FUNCTION osal_int_disable,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC osal_int_enable
        FUNCTION osal_int_enable,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC osal_isbufset
        FUNCTION osal_isbufset,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_isr_register
        FUNCTION osal_isr_register,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC osal_memcmp
        FUNCTION osal_memcmp,080203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC osal_memcpy
        FUNCTION osal_memcpy,0203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_memdup
        FUNCTION osal_memdup,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC osal_memset
        FUNCTION osal_memset,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC osal_msg_allocate
        FUNCTION osal_msg_allocate,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC osal_msg_deallocate
        FUNCTION osal_msg_deallocate,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_msg_dequeue
        FUNCTION osal_msg_dequeue,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC osal_msg_enqueue
        FUNCTION osal_msg_enqueue,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_msg_enqueue_max
        FUNCTION osal_msg_enqueue_max,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_msg_extract
        FUNCTION osal_msg_extract,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_msg_find
        FUNCTION osal_msg_find,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_msg_push
        FUNCTION osal_msg_push,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_msg_receive
        FUNCTION osal_msg_receive,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_msg_send
        FUNCTION osal_msg_send,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_qHead
        PUBLIC osal_rand
        FUNCTION osal_rand,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_revmemcpy
        FUNCTION osal_revmemcpy,0203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_run_system
        FUNCTION osal_run_system,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC osal_self
        FUNCTION osal_self,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_set_event
        FUNCTION osal_set_event,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_start_system
        FUNCTION osal_start_system,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC osal_strlen
        FUNCTION osal_strlen,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
Hal_ProcessPoll     SYMBOL "Hal_ProcessPoll"
`??Hal_ProcessPoll::?relay` SYMBOL "?relay", Hal_ProcessPoll
Onboard_rand        SYMBOL "Onboard_rand"
`??Onboard_rand::?relay` SYMBOL "?relay", Onboard_rand
_itoa               SYMBOL "_itoa"
`??_itoa::?relay`   SYMBOL "?relay", _itoa
memset              SYMBOL "memset"
`??memset::?relay`  SYMBOL "?relay", memset
osalInitTasks       SYMBOL "osalInitTasks"
`??osalInitTasks::?relay` SYMBOL "?relay", osalInitTasks
osalTimeUpdate      SYMBOL "osalTimeUpdate"
`??osalTimeUpdate::?relay` SYMBOL "?relay", osalTimeUpdate
osalTimerInit       SYMBOL "osalTimerInit"
`??osalTimerInit::?relay` SYMBOL "?relay", osalTimerInit
osal_getClock       SYMBOL "osal_getClock"
`??osal_getClock::?relay` SYMBOL "?relay", osal_getClock
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_mem_init       SYMBOL "osal_mem_init"
`??osal_mem_init::?relay` SYMBOL "?relay", osal_mem_init
osal_mem_kick       SYMBOL "osal_mem_kick"
`??osal_mem_kick::?relay` SYMBOL "?relay", osal_mem_kick
osal_pwrmgr_init    SYMBOL "osal_pwrmgr_init"
`??osal_pwrmgr_init::?relay` SYMBOL "?relay", osal_pwrmgr_init
rand                SYMBOL "rand"
`??rand::?relay`    SYMBOL "?relay", rand
srand               SYMBOL "srand"
`??srand::?relay`   SYMBOL "?relay", srand
strcat              SYMBOL "strcat"
`??strcat::?relay`  SYMBOL "?relay", strcat
strcpy              SYMBOL "strcpy"
`??strcpy::?relay`  SYMBOL "?relay", strcpy
strlen              SYMBOL "strlen"
`??strlen::?relay`  SYMBOL "?relay", strlen
Delayms             SYMBOL "Delayms"
`??Delayms::?relay` SYMBOL "?relay", Delayms
_ltoa               SYMBOL "_ltoa"
`??_ltoa::?relay`   SYMBOL "?relay", _ltoa
osal_buffer_uint24  SYMBOL "osal_buffer_uint24"
`??osal_buffer_uint24::?relay` SYMBOL "?relay", osal_buffer_uint24
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
`??osal_buffer_uint32::?relay` SYMBOL "?relay", osal_buffer_uint32
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_build_uint32   SYMBOL "osal_build_uint32"
`??osal_build_uint32::?relay` SYMBOL "?relay", osal_build_uint32
osal_clear_event    SYMBOL "osal_clear_event"
`??osal_clear_event::?relay` SYMBOL "?relay", osal_clear_event
osal_init_system    SYMBOL "osal_init_system"
`??osal_init_system::?relay` SYMBOL "?relay", osal_init_system
osal_int_disable    SYMBOL "osal_int_disable"
`??osal_int_disable::?relay` SYMBOL "?relay", osal_int_disable
osal_int_enable     SYMBOL "osal_int_enable"
`??osal_int_enable::?relay` SYMBOL "?relay", osal_int_enable
osal_isbufset       SYMBOL "osal_isbufset"
`??osal_isbufset::?relay` SYMBOL "?relay", osal_isbufset
osal_isr_register   SYMBOL "osal_isr_register"
`??osal_isr_register::?relay` SYMBOL "?relay", osal_isr_register
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memdup         SYMBOL "osal_memdup"
`??osal_memdup::?relay` SYMBOL "?relay", osal_memdup
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_dequeue    SYMBOL "osal_msg_dequeue"
`??osal_msg_dequeue::?relay` SYMBOL "?relay", osal_msg_dequeue
osal_msg_enqueue    SYMBOL "osal_msg_enqueue"
`??osal_msg_enqueue::?relay` SYMBOL "?relay", osal_msg_enqueue
osal_msg_enqueue_max SYMBOL "osal_msg_enqueue_max"
`??osal_msg_enqueue_max::?relay` SYMBOL "?relay", osal_msg_enqueue_max
osal_msg_extract    SYMBOL "osal_msg_extract"
`??osal_msg_extract::?relay` SYMBOL "?relay", osal_msg_extract
osal_msg_find       SYMBOL "osal_msg_find"
`??osal_msg_find::?relay` SYMBOL "?relay", osal_msg_find
osal_msg_push       SYMBOL "osal_msg_push"
`??osal_msg_push::?relay` SYMBOL "?relay", osal_msg_push
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_rand           SYMBOL "osal_rand"
`??osal_rand::?relay` SYMBOL "?relay", osal_rand
osal_revmemcpy      SYMBOL "osal_revmemcpy"
`??osal_revmemcpy::?relay` SYMBOL "?relay", osal_revmemcpy
osal_run_system     SYMBOL "osal_run_system"
`??osal_run_system::?relay` SYMBOL "?relay", osal_run_system
osal_self           SYMBOL "osal_self"
`??osal_self::?relay` SYMBOL "?relay", osal_self
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_system   SYMBOL "osal_start_system"
`??osal_start_system::?relay` SYMBOL "?relay", osal_start_system
osal_strlen         SYMBOL "osal_strlen"
`??osal_strlen::?relay` SYMBOL "?relay", osal_strlen

        EXTERN `??Hal_ProcessPoll::?relay`
        FUNCTION `??Hal_ProcessPoll::?relay`,00H
        EXTERN `??Onboard_rand::?relay`
        FUNCTION `??Onboard_rand::?relay`,00H
        EXTERN `??_itoa::?relay`
        FUNCTION `??_itoa::?relay`,00H
        EXTERN `??memset::?relay`
        FUNCTION `??memset::?relay`,00H
        EXTERN `??osalInitTasks::?relay`
        FUNCTION `??osalInitTasks::?relay`,00H
        EXTERN `??osalTimeUpdate::?relay`
        FUNCTION `??osalTimeUpdate::?relay`,00H
        EXTERN `??osalTimerInit::?relay`
        FUNCTION `??osalTimerInit::?relay`,00H
        EXTERN `??osal_getClock::?relay`
        FUNCTION `??osal_getClock::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_mem_init::?relay`
        FUNCTION `??osal_mem_init::?relay`,00H
        EXTERN `??osal_mem_kick::?relay`
        FUNCTION `??osal_mem_kick::?relay`,00H
        EXTERN `??osal_pwrmgr_init::?relay`
        FUNCTION `??osal_pwrmgr_init::?relay`,00H
        EXTERN `??rand::?relay`
        FUNCTION `??rand::?relay`,00H
        EXTERN `??srand::?relay`
        FUNCTION `??srand::?relay`,00H
        EXTERN `??strcat::?relay`
        FUNCTION `??strcat::?relay`,00H
        EXTERN `??strcpy::?relay`
        FUNCTION `??strcpy::?relay`,00H
        EXTERN `??strlen::?relay`
        FUNCTION `??strlen::?relay`,00H
        EXTERN Hal_ProcessPoll
        FUNCTION Hal_ProcessPoll,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_rand
        FUNCTION Onboard_rand,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _itoa
        FUNCTION _itoa,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osalInitTasks
        FUNCTION osalInitTasks,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osalTimeUpdate
        FUNCTION osalTimeUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osalTimerInit
        FUNCTION osalTimerInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_getClock
        FUNCTION osal_getClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_init
        FUNCTION osal_mem_init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_kick
        FUNCTION osal_mem_kick,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_pwrmgr_init
        FUNCTION osal_pwrmgr_init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN rand
        FUNCTION rand,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN srand
        FUNCTION srand,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcat
        FUNCTION strcat,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcpy
        FUNCTION strcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN tasksArr
        EXTERN tasksCnt
        EXTERN tasksEvents

// D:\ZStack-CC2530-2.5.1a\Components\osal\common\OSAL.c
//    1 /**************************************************************************************************
//    2   Filename:       OSAL.c
//    3   Revised:        $Date: 2011-05-27 09:03:48 -0700 (Fri, 27 May 2011) $
//    4   Revision:       $Revision: 26134 $
//    5 
//    6   Description:    This API allows the software components in the Z-stack to be written
//    7                   independently of the specifics of the operating system, kernel or tasking
//    8                   environment (including control loops or connect-to-interrupt systems).
//    9 
//   10 
//   11   Copyright 2004-2011 Texas Instruments Incorporated. All rights reserved.
//   12 
//   13   IMPORTANT: Your use of this Software is limited to those specific rights
//   14   granted under the terms of a software license agreement between the user
//   15   who downloaded the software, his/her employer (which must be your employer)
//   16   and Texas Instruments Incorporated (the "License"). You may not use this
//   17   Software unless you agree to abide by the terms of the License. The License
//   18   limits your use, and you acknowledge, that the Software may not be modified,
//   19   copied or distributed unless embedded on a Texas Instruments microcontroller
//   20   or used solely and exclusively in conjunction with a Texas Instruments radio
//   21   frequency transceiver, which is integrated into your product. Other than for
//   22   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   23   works of, modify, distribute, perform, display or sell this Software and/or
//   24   its documentation for any purpose.
//   25 
//   26   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   27   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   28   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   29   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   30   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   31   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   32   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   33   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   34   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   35   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   36   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   37 
//   38   Should you have any questions regarding your right to use this Software,
//   39   contact Texas Instruments Incorporated at www.TI.com.
//   40 **************************************************************************************************/
//   41 
//   42 /*********************************************************************
//   43  * INCLUDES
//   44  */
//   45 
//   46 #include <string.h>
//   47 
//   48 #include "comdef.h"
//   49 #include "OSAL.h"
//   50 #include "OSAL_Tasks.h"
//   51 #include "OSAL_Memory.h"
//   52 #include "OSAL_PwrMgr.h"
//   53 #include "OSAL_Clock.h"
//   54 
//   55 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DATA8
        DS 1
//   56 
//   57 /* HAL */
//   58 #include "hal_drivers.h"
//   59 
//   60 #ifdef IAR_ARMCM3_LM
//   61   #include "FreeRTOSConfig.h"
//   62   #include "osal_task.h"
//   63 #endif
//   64 
//   65 
//   66 //ÓÃ»§ÉùÃ÷
//   67 #include <stdlib.h>
//   68 #include "OSAL_Clock.h"
//   69 #define random(x) (rand() % x)
//   70 
//   71 //º¯ÊýÉùÃ÷
//   72 void Delayms(unsigned int xms);
//   73 
//   74 
//   75 /*********************************************************************
//   76  * MACROS
//   77  */
//   78 
//   79 /*********************************************************************
//   80  * CONSTANTS
//   81  */
//   82 
//   83 /*********************************************************************
//   84  * TYPEDEFS
//   85  */
//   86 
//   87 /*********************************************************************
//   88  * GLOBAL VARIABLES
//   89  */
//   90 
//   91 // Message Pool Definitions

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   92 osal_msg_q_t osal_qHead;
osal_qHead:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   93 
//   94 /*********************************************************************
//   95  * EXTERNAL VARIABLES
//   96  */
//   97 
//   98 /*********************************************************************
//   99  * EXTERNAL FUNCTIONS
//  100  */
//  101 
//  102 /*********************************************************************
//  103  * LOCAL VARIABLES
//  104  */
//  105 
//  106 // Index of active task

        RSEG XDATA_I:XDATA:NOROOT(0)
//  107 static uint8 activeTaskID = TASK_NO_TASK;
activeTaskID:
        DATA8
        DS 1
        REQUIRE `?<Initializer for activeTaskID>`
        REQUIRE __INIT_XDATA_I
//  108 
//  109 /*********************************************************************
//  110  * LOCAL FUNCTION PROTOTYPES
//  111  */
//  112 
//  113 /*********************************************************************
//  114  * HELPER FUNCTIONS
//  115  */
//  116 /* very ugly stub so Keil can compile */
//  117 #ifdef __KEIL__
//  118 char *  itoa ( int value, char * buffer, int radix )
//  119 {
//  120   return(buffer);
//  121 }
//  122 #endif
//  123 
//  124 /*********************************************************************
//  125  * @fn      osal_strlen
//  126  *
//  127  * @brief
//  128  *
//  129  *   Calculates the length of a string.  The string must be null
//  130  *   terminated.
//  131  *
//  132  * @param   char *pString - pointer to text string
//  133  *
//  134  * @return  int - number of characters
//  135  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  136 int osal_strlen( char *pString )
osal_strlen:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function osal_strlen
        CODE
//  137 {
        FUNCALL osal_strlen, strlen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  138   return (int)( strlen( pString ) );
        ; Setup parameters for call to function strlen
        LCALL     `??strlen::?relay`; Banked call to: strlen
        LJMP      ?Subroutine0 & 0xFFFF
//  139 }
          CFI EndBlock cfiBlock0
//  140 
//  141 /*********************************************************************
//  142  * @fn      osal_memcpy
//  143  *
//  144  * @brief
//  145  *
//  146  *   Generic memory copy.
//  147  *
//  148  *   Note: This function differs from the standard memcpy(), since
//  149  *         it returns the pointer to the next destination uint8. The
//  150  *         standard memcpy() returns the original destination address.
//  151  *
//  152  * @param   dst - destination address
//  153  * @param   src - source address
//  154  * @param   len - number of bytes to copy
//  155  *
//  156  * @return  pointer to end of destination buffer
//  157  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  158 void *osal_memcpy( void *dst, const void GENERIC *src, unsigned int len )
osal_memcpy:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function osal_memcpy
        CODE
//  159 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  160   uint8 *pDst;
//  161   const uint8 GENERIC *pSrc;
//  162 
//  163   pSrc = src;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine12 & 0xFFFF
//  164   pDst = dst;
??CrossCallReturnLabel_72:
        MOV       DPL,R6
        MOV       DPH,R7
        SJMP      ??osal_memcpy_0
//  165 
//  166   while ( len-- )
//  167     *pDst++ = *pSrc++;
??osal_memcpy_1:
        LCALL     ?C_GPTR_LOAD
        MOVX      @DPTR,A
        MOV       A,R1
        ADD       A,#0x1
        INC       R1
        CLR       A
        ADDC      A,R2
        MOV       R2,A
        INC       DPTR
??osal_memcpy_0:
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_19:
        JNZ       ??osal_memcpy_1
//  168 
//  169   return ( pDst );
          CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  170 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R2,DPL
        MOV       R3,DPH
        LJMP      ??Subroutine27_0 & 0xFFFF
          CFI EndBlock cfiBlock2
//  171 
//  172 /*********************************************************************
//  173  * @fn      osal_revmemcpy
//  174  *
//  175  * @brief   Generic reverse memory copy.  Starts at the end of the
//  176  *   source buffer, by taking the source address pointer and moving
//  177  *   pointer ahead "len" bytes, then decrementing the pointer.
//  178  *
//  179  *   Note: This function differs from the standard memcpy(), since
//  180  *         it returns the pointer to the next destination uint8. The
//  181  *         standard memcpy() returns the original destination address.
//  182  *
//  183  * @param   dst - destination address
//  184  * @param   src - source address
//  185  * @param   len - number of bytes to copy
//  186  *
//  187  * @return  pointer to end of destination buffer
//  188  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  189 void *osal_revmemcpy( void *dst, const void GENERIC *src, unsigned int len )
osal_revmemcpy:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function osal_revmemcpy
        CODE
//  190 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  191   uint8 *pDst;
//  192   const uint8 GENERIC *pSrc;
//  193 
//  194   pSrc = src;
//  195   pSrc += (len-1);
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_73:
        MOV       A,R1
        ADD       A,R4
        MOV       R1,A
        MOV       A,R2
        ADDC      A,R5
        MOV       R2,A
        MOV       A,R1
        ADD       A,#-0x1
        DEC       R1
        MOV       A,R2
        ADDC      A,#-0x1
        MOV       R2,A
//  196   pDst = dst;
        MOV       DPL,R6
        MOV       DPH,R7
        SJMP      ??osal_revmemcpy_0
//  197 
//  198   while ( len-- )
//  199     *pDst++ = *pSrc--;
??osal_revmemcpy_1:
        LCALL     ?C_GPTR_LOAD
        MOVX      @DPTR,A
        MOV       A,R1
        ADD       A,#-0x1
        DEC       R1
        MOV       A,R2
        ADDC      A,#-0x1
        MOV       R2,A
        INC       DPTR
??osal_revmemcpy_0:
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_20:
        JNZ       ??osal_revmemcpy_1
//  200 
//  201   return ( pDst );
        SJMP      ?Subroutine4
//  202 }
          CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function osal_memcpy
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function osal_revmemcpy
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
        MOV       A,R6
        ADD       A,#-0x1
        DEC       R4
        MOV       A,R7
        ADDC      A,#-0x1
        MOV       R5,A
        MOV       A,R6
        ORL       A,R7
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6
//  203 
//  204 /*********************************************************************
//  205  * @fn      osal_memdup
//  206  *
//  207  * @brief   Allocates a buffer [with osal_mem_alloc()] and copies
//  208  *          the src buffer into the newly allocated space.
//  209  *
//  210  * @param   src - source address
//  211  * @param   len - number of bytes to copy
//  212  *
//  213  * @return  pointer to the new allocated buffer, or NULL if
//  214  *          allocation problem.
//  215  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  216 void *osal_memdup( const void GENERIC *src, unsigned int len )
osal_memdup:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function osal_memdup
        CODE
//  217 {
        FUNCALL osal_memdup, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_memdup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  218   uint8 *pDst;
//  219 
//  220   pDst = osal_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
//  221   if ( pDst )
        MOV       A,R2
        ORL       A,R3
        JZ        ??osal_memdup_0
//  222   {
//  223     VOID osal_memcpy( pDst, src, len );
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  224   }
//  225 
//  226   return ( (void *)pDst );
??osal_memdup_0:
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
//  227 }
          CFI EndBlock cfiBlock7
//  228 
//  229 /*********************************************************************
//  230  * @fn      osal_memcmp
//  231  *
//  232  * @brief
//  233  *
//  234  *   Generic memory compare.
//  235  *
//  236  * @param   src1 - source 1 addrexx
//  237  * @param   src2 - source 2 address
//  238  * @param   len - number of bytes to compare
//  239  *
//  240  * @return  TRUE - same, FALSE - different
//  241  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  242 uint8 osal_memcmp( const void GENERIC *src1, const void GENERIC *src2, unsigned int len )
osal_memcmp:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function osal_memcmp
        CODE
//  243 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV       A,#-0x13
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
//  244   const uint8 GENERIC *pSrc1;
//  245   const uint8 GENERIC *pSrc2;
//  246 
//  247   pSrc1 = src1;
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       ?V2,R3
//  248   pSrc2 = src2;
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V6,A
//  249 
//  250   while ( len-- )
??osal_memcmp_0:
        MOV       A,R4
        MOV       R0,A
        MOV       A,R5
        MOV       R1,A
        MOV       A,R0
        ADD       A,#-0x1
        DEC       R4
        MOV       A,R1
        ADDC      A,#-0x1
        MOV       R5,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??osal_memcmp_1
//  251   {
//  252     if( *pSrc1++ != *pSrc2++ )
        MOV       R1,?V0
        MOV       R2,?V1
        MOV       R3,?V2
        MOV       A,R1
        ADD       A,#0x1
        MOV       ?V0,A
        CLR       A
        ADDC      A,R2
        MOV       ?V1,A
        MOV       ?V8,?V4
        MOV       ?V9,?V5
        MOV       ?V10,?V6
        MOV       A,?V4
        ADD       A,#0x1
        MOV       ?V4,A
        CLR       A
        ADDC      A,?V5
        MOV       ?V5,A
        LCALL     ?C_GPTR_LOAD
        MOV       R0,A
        MOV       R1,?V8
        MOV       R2,?V9
        MOV       R3,?V10
        LCALL     ?C_GPTR_LOAD
        XRL       A,R0
        JZ        ??osal_memcmp_0
//  253       return FALSE;
        MOV       R1,#0x0
        SJMP      ??osal_memcmp_2
//  254   }
//  255   return TRUE;
??osal_memcmp_1:
        MOV       R1,#0x1
??osal_memcmp_2:
        MOV       R7,#0xb
        LJMP      ?BANKED_LEAVE_XDATA
//  256 }
          CFI EndBlock cfiBlock8
//  257 
//  258 
//  259 /*********************************************************************
//  260  * @fn      osal_memset
//  261  *
//  262  * @brief
//  263  *
//  264  *   Set memory buffer to value.
//  265  *
//  266  * @param   dest - pointer to buffer
//  267  * @param   value - what to set each uint8 of the message
//  268  * @param   size - how big
//  269  *
//  270  * @return  pointer to destination buffer
//  271  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  272 void *osal_memset( void *dest, uint8 value, int len )
osal_memset:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function osal_memset
        CODE
//  273 {
        FUNCALL osal_memset, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  274   return memset( dest, value, len );
        ; Setup parameters for call to function memset
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        MOV       R4,A
        MOV       R5,#0x0
        LCALL     `??memset::?relay`; Banked call to: memset
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LJMP      ?Subroutine2 & 0xFFFF
//  275 }
          CFI EndBlock cfiBlock9
//  276 
//  277 /*********************************************************************
//  278  * @fn      osal_build_uint16
//  279  *
//  280  * @brief
//  281  *
//  282  *   Build a uint16 out of 2 bytes (0 then 1).
//  283  *
//  284  * @param   swapped - 0 then 1
//  285  *
//  286  * @return  uint16
//  287  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  288 uint16 osal_build_uint16( uint8 *swapped )
osal_build_uint16:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function osal_build_uint16
        CODE
//  289 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  290   return ( BUILD_UINT16( swapped[0], swapped[1] ) );
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        CLR       A
        XCH       A,R0
        MOV       R1,A
        MOV       A,R4
        ADD       A,R0
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        LJMP      ?Subroutine0 & 0xFFFF
//  291 }
          CFI EndBlock cfiBlock10
//  292 
//  293 /*********************************************************************
//  294  * @fn      osal_build_uint32
//  295  *
//  296  * @brief
//  297  *
//  298  *   Build a uint32 out of sequential bytes.
//  299  *
//  300  * @param   swapped - sequential bytes
//  301  * @param   len - number of bytes in the uint8 array
//  302  *
//  303  * @return  uint32
//  304  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  305 uint32 osal_build_uint32( uint8 *swapped, uint8 len )
osal_build_uint32:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function osal_build_uint32
        CODE
//  306 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  307   if ( len == 2 )
        MOV       A,#0x2
        XRL       A,R6
        JNZ       ??osal_build_uint32_0
//  308     return ( BUILD_UINT32( swapped[0], swapped[1], 0L, 0L ) );
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_28:
        SJMP      ??osal_build_uint32_1
//  309   else if ( len == 3 )
??osal_build_uint32_0:
        MOV       A,#0x3
        XRL       A,R6
        JNZ       ??osal_build_uint32_2
//  310     return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], 0L ) );
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL     ?L_SHL
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_ADD
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_11:
        SJMP      ??osal_build_uint32_1
//  311   else if ( len == 4 )
??osal_build_uint32_2:
        MOV       A,#0x4
        XRL       A,R6
        MOV       DPL,R2
        MOV       DPH,R3
        JNZ       ??osal_build_uint32_3
//  312     return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], swapped[3] ) );
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL     ?L_SHL
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_ADD
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV       R0,#?V4
        LCALL     ?L_SHL
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_ADD
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V4,A
        CLR       A
        MOV       ?V6,A
        MOV       A,#0x18
??osal_build_uint32_1:
        MOV       R0,#?V4
        LCALL     ?L_SHL
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_ADD
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R4,?V2
        MOV       R5,?V3
        SJMP      ??osal_build_uint32_4
//  313   else
//  314     return ( (uint32)swapped[0] );
??osal_build_uint32_3:
        MOVX      A,@DPTR
        MOV       R2,A
        CLR       A
        MOV       R3,A
        MOV       R4,A
        MOV       R5,A
??osal_build_uint32_4:
          CFI EndBlock cfiBlock11
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  315 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function osal_build_uint32
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function osal_build_uint32
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V4,A
        CLR       A
        MOV       ?V5,A
        MOV       A,#0x10
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function osal_build_uint32
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function osal_build_uint32
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV       R0,#?V4
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function osal_build_uint32
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function osal_build_uint32
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_2
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-4
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function osal_build_uint32
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_3
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-4
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        CLR       A
        MOV       ?V1,A
        MOV       ?V2,A
        MOV       ?V3,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V4,A
        CLR       A
        MOV       ?V5,A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       A,#0x8
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
//  316 
//  317 #if !defined ( ZBIT ) && !defined ( ZBIT2 ) && !defined (UBIT)
//  318 /*********************************************************************
//  319  * @fn      _ltoa
//  320  *
//  321  * @brief
//  322  *
//  323  *   convert a long unsigned int to a string.
//  324  *
//  325  * @param  l - long to convert
//  326  * @param  buf - buffer to convert to
//  327  * @param  radix - 10 dec, 16 hex
//  328  *
//  329  * @return  pointer to buffer
//  330  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  331 unsigned char * _ltoa(unsigned long l, unsigned char *buf, unsigned char radix)
_ltoa:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function _ltoa
        CODE
//  332 {
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 31
        MOV       A,#-0x1f
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 55)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       ?V10,R4
        MOV       ?V11,R5
//  333 #if defined( __GNUC__ )
//  334   return ( (char*)ltoa( l, buf, radix ) );
//  335 #else
//  336   unsigned char tmp1[10] = "", tmp2[10] = "", tmp3[10] = "";
        MOV       DPTR,#`?<Constant "">`
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0xa
        LCALL     ?MOVE_LONG8_XDATA_XDATA
        MOV       DPTR,#`?<Constant "">_1`
        MOV       A,#0xa
        LCALL     ?MOVE_LONG8_XDATA_XDATA
        MOV       DPTR,#`?<Constant "">_2`
        MOV       A,#0xa
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  337   unsigned short num1, num2, num3;
//  338   unsigned char i;
//  339 
//  340   buf[0] = '\0';
        MOV       A,#0x37
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_13:
        CLR       A
        MOVX      @DPTR,A
//  341 
//  342   if ( radix == 10 )
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0xa
        JZ        $+5
        LJMP      ??_ltoa_0 & 0xFFFF
//  343   {
//  344     num1 = l % 10000;
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,?V10
        MOV       ?V3,?V11
        MOV       DPTR,#__Constant_2710
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?UL_DIV_MOD
        MOV       ?V0,?V4
        MOV       ?V1,?V5
//  345     num2 = (l / 10000) % 10000;
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V6,?V10
        MOV       ?V7,?V11
        MOV       DPTR,#__Constant_2710
        MOV       R0,#?V12
        LCALL     ?L_MOV_X
        MOV       R0,#?V4
        MOV       R1,#?V12
        LCALL     ?UL_DIV_MOD
        MOV       DPTR,#__Constant_2710
        MOV       R0,#?V12
        LCALL     ?L_MOV_X
        MOV       R0,#?V4
        MOV       R1,#?V12
        LCALL     ?UL_DIV_MOD
        MOV       R6,?V12
        MOV       R7,?V13
//  346     num3 = (unsigned short)(l / 100000000);
        MOV       DPTR,#__Constant_5f5e100
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       R0,#?V8
        MOV       R1,#?V4
        LCALL     ?UL_DIV_MOD
        MOV       ?V2,?V8
        MOV       ?V3,?V9
//  347 
//  348     if (num3) _itoa(num3, tmp3, 10);
        MOV       A,?V2
        ORL       A,?V3
        JZ        ??_ltoa_1
        ; Setup parameters for call to function _itoa
        MOV       R1,#0xa
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,?V2
        MOV       R3,?V3
        LCALL     `??_itoa::?relay`; Banked call to: _itoa
//  349     if (num2) _itoa(num2, tmp2, 10);
??_ltoa_1:
        MOV       A,R6
        ORL       A,R7
        JZ        ??_ltoa_2
        ; Setup parameters for call to function _itoa
        MOV       R1,#0xa
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??_itoa::?relay`; Banked call to: _itoa
//  350     if (num1) _itoa(num1, tmp1, 10);
??_ltoa_2:
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??_ltoa_3
        ; Setup parameters for call to function _itoa
        MOV       R1,#0xa
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??_itoa::?relay`; Banked call to: _itoa
//  351 
//  352     if (num3)
??_ltoa_3:
        MOV       A,?V2
        ORL       A,?V3
        JZ        ??_ltoa_4
//  353     {
//  354       strcpy((char*)buf, (char const*)tmp3);
        ; Setup parameters for call to function strcpy
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x37
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine11 & 0xFFFF
//  355       for (i = 0; i < 4 - strlen((char const*)tmp2); i++)
??CrossCallReturnLabel_9:
        SJMP      ??CrossCallReturnLabel_4
//  356         strcat((char*)buf, "0");
??_ltoa_5:
        ; Setup parameters for call to function strcat
        MOV       R4,#`?<Constant "0">` & 0xff
        MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
        MOV       A,#0x37
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV       A,?V4
        MOV       ?V6,A
        ; Setup parameters for call to function strlen
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?Subroutine5 & 0xFFFF
//  357     }
??CrossCallReturnLabel_0:
        JC        ??_ltoa_5
//  358     strcat((char*)buf, (char const*)tmp2);
??_ltoa_4:
        ; Setup parameters for call to function strcat
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x37
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
//  359     if (num3 || num2)
??CrossCallReturnLabel_7:
        JNZ       ??_ltoa_6
        MOV       A,R6
        ORL       A,R7
        JZ        ??_ltoa_7
//  360     {
//  361       for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
??_ltoa_6:
        MOV       ?V4,#0x0
        SJMP      ??CrossCallReturnLabel_5
//  362         strcat((char*)buf, "0");
??_ltoa_8:
        ; Setup parameters for call to function strcat
        MOV       R4,#`?<Constant "0">` & 0xff
        MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
        MOV       A,#0x37
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV       A,?V4
        MOV       ?V6,A
        ; Setup parameters for call to function strlen
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?Subroutine5 & 0xFFFF
//  363     }
??CrossCallReturnLabel_1:
        JC        ??_ltoa_8
//  364     strcat((char*)buf, (char const*)tmp1);
??_ltoa_7:
        ; Setup parameters for call to function strcat
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x37
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
//  365     if (!num3 && !num2 && !num1)
//  366       strcpy((char*)buf, "0");
//  367   }
??CrossCallReturnLabel_8:
        JNZ       ??_ltoa_9
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??_ltoa_10 & 0xFFFF
//  368   else if ( radix == 16 )
//  369   {
//  370     num1 = l & 0x0000FFFF;
//  371     num2 = l >> 16;
//  372 
//  373     if (num2) _itoa(num2, tmp2, 16);
//  374     if (num1) _itoa(num1, tmp1, 16);
//  375 
//  376     if (num2)
//  377     {
//  378       strcpy((char*)buf,(char const*)tmp2);
//  379       for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
//  380         strcat((char*)buf, "0");
//  381     }
//  382     strcat((char*)buf, (char const*)tmp1);
//  383     if (!num2 && !num1)
//  384       strcpy((char*)buf, "0");
//  385   }
//  386   else
//  387     return NULL;
//  388 
//  389   return buf;
??_ltoa_9:
        MOV       A,#0x37
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV       A,#0x1f
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
          CFI CFA_XSP16 add(XSP16, 55)
??_ltoa_0:
        MOVX      A,@DPTR
        XRL       A,#0x10
        JZ        $+5
        LJMP      ??_ltoa_11 & 0xFFFF
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,#0x10
        MOV       R0,#?V8
        LCALL     ?UL_SHR
        MOV       R6,?V8
        MOV       R7,?V9
        MOV       A,R6
        ORL       A,R7
        JZ        ??_ltoa_12
        ; Setup parameters for call to function _itoa
        MOV       R1,#0x10
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??_itoa::?relay`; Banked call to: _itoa
??_ltoa_12:
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??_ltoa_13
        ; Setup parameters for call to function _itoa
        MOV       R1,#0x10
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??_itoa::?relay`; Banked call to: _itoa
??_ltoa_13:
        MOV       A,R6
        ORL       A,R7
        JZ        ??_ltoa_14
        ; Setup parameters for call to function strcpy
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x37
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_10:
        SJMP      ??CrossCallReturnLabel_6
??_ltoa_15:
        ; Setup parameters for call to function strcat
        MOV       R4,#`?<Constant "0">` & 0xff
        MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
        MOV       A,#0x37
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV       A,?V4
        MOV       ?V2,A
        ; Setup parameters for call to function strlen
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??strlen::?relay`; Banked call to: strlen
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       A,#0x4
        CLR       C
        SUBB      A,?V6
        MOV       R0,A
        CLR       A
        SUBB      A,?V7
        MOV       R1,A
        CLR       C
        MOV       A,?V2
        SUBB      A,R0
        CLR       A
        SUBB      A,R1
        JC        ??_ltoa_15
??_ltoa_14:
        ; Setup parameters for call to function strcat
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x37
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_67:
        LCALL     `??strcat::?relay`; Banked call to: strcat
        MOV       A,R6
        ORL       A,R7
        JZ        $+5
        LJMP      ??_ltoa_9 & 0xFFFF
??_ltoa_10:
        MOV       A,?V0
        ORL       A,?V1
        JZ        $+5
        LJMP      ??_ltoa_9 & 0xFFFF
        ; Setup parameters for call to function strcpy
        MOV       R4,#`?<Constant "0">` & 0xff
        MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
        MOV       A,#0x37
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_68:
        LCALL     `??strcpy::?relay`; Banked call to: strcpy
        LJMP      ??_ltoa_9 & 0xFFFF
??_ltoa_11:
        MOV       R2,#0x0
        MOV       R3,#0x0
        LJMP      ??CrossCallReturnLabel_66 & 0xFFFF
//  390 #endif
//  391 }
          CFI EndBlock cfiBlock23

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function _ltoa
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 55)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function _ltoa
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 55)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??strcpy::?relay`; Banked call to: strcpy
        MOV       ?V4,#0x0
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function _ltoa
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 55)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function _ltoa
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 55)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV       A,?V2
        ORL       A,?V3
        RET
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function _ltoa
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 55)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function _ltoa
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 55)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function _ltoa
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 55)
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_31:
        INC       ?V4
        RET
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond34 Using cfiCommon0
          CFI Function _ltoa
          CFI Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 55)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function _ltoa
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_8
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-4
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 55)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function _ltoa
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_4
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-4
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 55)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function _ltoa
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_5
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-4
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 55)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function _ltoa
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_6
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond38) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond38) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-4
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 55)
          CFI Block cfiPicker39 Using cfiCommon1
          CFI (cfiPicker39) NoFunction
          CFI (cfiPicker39) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??strcat::?relay`; Banked call to: strcat
        RET
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiPicker39

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond40 Using cfiCommon0
          CFI Function _ltoa
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 55)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function _ltoa
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 55)
          CFI Block cfiPicker42 Using cfiCommon1
          CFI (cfiPicker42) NoFunction
          CFI (cfiPicker42) Picker
        LCALL     `??strlen::?relay`; Banked call to: strlen
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       A,#0x4
        CLR       C
        SUBB      A,?V8
        MOV       R0,A
        CLR       A
        SUBB      A,?V9
        MOV       R1,A
        CLR       C
        MOV       A,?V6
        SUBB      A,R0
        CLR       A
        SUBB      A,R1
        RET
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiPicker42
//  392 #endif // !defined(ZBIT) && !defined(ZBIT2)
//  393 
//  394 /*********************************************************************
//  395  * @fn        osal_rand
//  396  *
//  397  * @brief    Random number generator
//  398  *
//  399  * @param   none
//  400  *
//  401  * @return  uint16 - new random number
//  402  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  403 uint16 osal_rand( void )
osal_rand:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function osal_rand
        CODE
//  404 {
        FUNCALL osal_rand, Onboard_rand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  405   return ( Onboard_rand() );
        ; Setup parameters for call to function Onboard_rand
        LCALL     `??Onboard_rand::?relay`; Banked call to: Onboard_rand
        SJMP      ?Subroutine0
//  406 }
          CFI EndBlock cfiBlock43
//  407 
//  408 /*********************************************************************
//  409  * API FUNCTIONS
//  410  *********************************************************************/
//  411 
//  412 /*********************************************************************
//  413  * @fn      osal_msg_allocate
//  414  *
//  415  * @brief
//  416  *
//  417  *    This function is called by a task to allocate a message buffer
//  418  *    into which the task will encode the particular message it wishes
//  419  *    to send.  This common buffer scheme is used to strictly limit the
//  420  *    creation of message buffers within the system due to RAM size
//  421  *    limitations on the microprocessor.   Note that all message buffers
//  422  *    are a fixed size (at least initially).  The parameter len is kept
//  423  *    in case a message pool with varying fixed message sizes is later
//  424  *    created (for example, a pool of message buffers of size LARGE,
//  425  *    MEDIUM and SMALL could be maintained and allocated based on request
//  426  *    from the tasks).
//  427  *
//  428  *
//  429  * @param   uint8 len  - wanted buffer length
//  430  *
//  431  *
//  432  * @return  pointer to allocated buffer or NULL if allocation failed.
//  433  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  434 uint8 * osal_msg_allocate( uint16 len )
osal_msg_allocate:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function osal_msg_allocate
        CODE
//  435 {
        FUNCALL osal_msg_allocate, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  436   osal_msg_hdr_t *hdr;
//  437 
//  438   if ( len == 0 )
        MOV       A,R2
        ORL       A,R7
        JZ        ??osal_msg_allocate_0
//  439     return ( NULL );
//  440 
//  441   hdr = (osal_msg_hdr_t *) osal_mem_alloc( (short)(len + sizeof( osal_msg_hdr_t )) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       A,R2
        ADD       A,#0x5
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V1,R3
        MOV       R1,?V1
//  442   if ( hdr )
        MOV       A,R2
        ORL       A,R1
        JZ        ??osal_msg_allocate_0
//  443   {
//  444     hdr->next = NULL;
        MOV       DPL,R2
        MOV       DPH,R3
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ??Subroutine28_0 & 0xFFFF
//  445     hdr->len = len;
??CrossCallReturnLabel_38:
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine17 & 0xFFFF
//  446     hdr->dest_id = TASK_NO_TASK;
??CrossCallReturnLabel_36:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  447     return ( (uint8 *) (hdr + 1) );
        MOV       A,R2
        ADD       A,#0x5
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        SJMP      ??osal_msg_allocate_1
//  448   }
//  449   else
//  450     return ( NULL );
??osal_msg_allocate_0:
        MOV       R2,#0x0
        MOV       R3,#0x0
??osal_msg_allocate_1:
        LJMP      ?Subroutine2 & 0xFFFF
//  451 }
          CFI EndBlock cfiBlock44
//  452 
//  453 /*********************************************************************
//  454  * @fn      osal_msg_deallocate
//  455  *
//  456  * @brief
//  457  *
//  458  *    This function is used to deallocate a message buffer. This function
//  459  *    is called by a task (or processing element) after it has finished
//  460  *    processing a received message.
//  461  *
//  462  *
//  463  * @param   uint8 *msg_ptr - pointer to new message buffer
//  464  *
//  465  * @return  SUCCESS, INVALID_MSG_POINTER
//  466  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  467 uint8 osal_msg_deallocate( uint8 *msg_ptr )
osal_msg_deallocate:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function osal_msg_deallocate
        CODE
//  468 {
        FUNCALL osal_msg_deallocate, osal_mem_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  469   uint8 *x;
//  470 
//  471   if ( msg_ptr == NULL )
        MOV       A,R2
        ORL       A,R3
        JNZ       ??osal_msg_deallocate_0
//  472     return ( INVALID_MSG_POINTER );
        MOV       R1,#0x5
        SJMP      ??osal_msg_deallocate_1
//  473 
//  474   // don't deallocate queued buffer
//  475   if ( OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
??osal_msg_deallocate_0:
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_17:
        JZ        ??osal_msg_deallocate_2
//  476     return ( MSG_BUFFER_NOT_AVAIL );
        MOV       R1,#0x4
        SJMP      ??osal_msg_deallocate_1
//  477 
//  478   x = (uint8 *)((uint8 *)msg_ptr - sizeof( osal_msg_hdr_t ));
//  479 
//  480   osal_mem_free( (void *)x );
??osal_msg_deallocate_2:
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R2
        ADD       A,#-0x5
        MOV       R2,A
        MOV       A,R3
        ADDC      A,#-0x1
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  481 
//  482   return ( SUCCESS );
        MOV       R1,#0x0
??osal_msg_deallocate_1:
          CFI EndBlock cfiBlock45
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  483 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock46
//  484 
//  485 /*********************************************************************
//  486  * @fn      osal_msg_send
//  487  *
//  488  * @brief
//  489  *
//  490  *    This function is called by a task to send a command message to
//  491  *    another task or processing element.  The sending_task field must
//  492  *    refer to a valid task, since the task ID will be used
//  493  *    for the response message.  This function will also set a message
//  494  *    ready event in the destination tasks event list.
//  495  *
//  496  *
//  497  * @param   uint8 destination task - Send msg to?  Task ID
//  498  * @param   uint8 *msg_ptr - pointer to new message buffer
//  499  * @param   uint8 len - length of data in message
//  500  *
//  501  * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
//  502  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  503 uint8 osal_msg_send( uint8 destination_task, uint8 *msg_ptr )
osal_msg_send:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function osal_msg_send
        CODE
//  504 {
        FUNCALL osal_msg_send, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_send, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_send, osal_msg_enqueue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_send, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  505   if ( msg_ptr == NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??osal_msg_send_0
//  506     return ( INVALID_MSG_POINTER );
//  507 
//  508   if ( destination_task >= tasksCnt )
        MOV       DPTR,#tasksCnt
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R1
        CLR       C
        SUBB      A,R0
        JC        ??osal_msg_send_1
//  509   {
//  510     osal_msg_deallocate( msg_ptr );
        ; Setup parameters for call to function osal_msg_deallocate
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  511     return ( INVALID_TASK );
        MOV       R1,#0x3
        SJMP      ??osal_msg_send_2
//  512   }
//  513 
//  514   // Check the message header
//  515   if ( OSAL_MSG_NEXT( msg_ptr ) != NULL ||
//  516        OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
??osal_msg_send_1:
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV       A,R3
        ADDC      A,#-0x1
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_34:
        JNZ       ??osal_msg_send_3
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_18:
        JZ        ??osal_msg_send_4
//  517   {
//  518     osal_msg_deallocate( msg_ptr );
??osal_msg_send_3:
        ; Setup parameters for call to function osal_msg_deallocate
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  519     return ( INVALID_MSG_POINTER );
??osal_msg_send_0:
        MOV       R1,#0x5
        SJMP      ??osal_msg_send_2
//  520   }
//  521 
//  522   OSAL_MSG_ID( msg_ptr ) = destination_task;
??osal_msg_send_4:
        MOV       A,R6
        MOVX      @DPTR,A
//  523 
//  524   // queue message
//  525   osal_msg_enqueue( &osal_qHead, msg_ptr );
        ; Setup parameters for call to function osal_msg_enqueue
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
        MOV       R5,A
        MOV       R2,#osal_qHead & 0xff
        MOV       R3,#(osal_qHead >> 8) & 0xff
        LCALL     `??osal_msg_enqueue::?relay`; Banked call to: osal_msg_enqueue
//  526 
//  527   // Signal the task that a message is waiting
//  528   osal_set_event( destination_task, SYS_EVENT_MSG );
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x0
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
//  529 
//  530   return ( SUCCESS );
        MOV       R1,#0x0
??osal_msg_send_2:
        SJMP      ??Subroutine27_0
//  531 }
          CFI EndBlock cfiBlock47

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond48 Using cfiCommon0
          CFI Function osal_msg_deallocate
          CFI Conditional ??CrossCallReturnLabel_17
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function osal_msg_send
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker50 Using cfiCommon1
          CFI (cfiPicker50) NoFunction
          CFI (cfiPicker50) Picker
        MOV       A,R2
        ADD       A,#-0x1
        MOV       DPL,A
        MOV       A,R3
        ADDC      A,#-0x1
        MOV       DPH,A
        MOVX      A,@DPTR
        CPL       A
        RET
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiPicker50

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond51 Using cfiCommon0
          CFI Function osal_msg_send
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function osal_run_system
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        MOV       DPH,A
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine25_0:
          CFI Block cfiCond54 Using cfiCommon0
          CFI Function osal_msg_enqueue
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function osal_msg_enqueue_max
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function osal_msg_send
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function osal_run_system
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOVX      @DPTR,A
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
          CFI EndBlock cfiBlock59
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine26_0:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       0xa8.7,C
          CFI EndBlock cfiBlock60
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine27_0:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock61
//  532 
//  533 /*********************************************************************
//  534  * @fn      osal_msg_receive
//  535  *
//  536  * @brief
//  537  *
//  538  *    This function is called by a task to retrieve a received command
//  539  *    message. The calling task must deallocate the message buffer after
//  540  *    processing the message using the osal_msg_deallocate() call.
//  541  *
//  542  * @param   uint8 task_id - receiving tasks ID
//  543  *
//  544  * @return  *uint8 - message information or NULL if no message
//  545  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  546 uint8 *osal_msg_receive( uint8 task_id )
osal_msg_receive:
          CFI Block cfiBlock62 Using cfiCommon0
          CFI Function osal_msg_receive
        CODE
//  547 {
        FUNCALL osal_msg_receive, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_receive, osal_clear_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_receive, osal_msg_extract
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
//  548   osal_msg_hdr_t *listHdr;
//  549   osal_msg_hdr_t *prevHdr = NULL;
        MOV       ?V4,#0x0
        MOV       ?V5,#0x0
//  550   osal_msg_hdr_t *foundHdr = NULL;
        MOV       R6,#0x0
        MOV       R7,#0x0
//  551   halIntState_t   intState;
//  552 
//  553   // Hold off interrupts
//  554   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV       C,0xa8.7
        CLR       A
        RLC       A
        MOV       ?V2,A
        CLR       0xa8.7
//  555 
//  556   // Point to the top of the queue
//  557   listHdr = osal_qHead;
        MOV       DPTR,#osal_qHead
        SJMP      ??CrossCallReturnLabel_46
//  558 
//  559   // Look through the queue for a message that belongs to the asking task
//  560   while ( listHdr != NULL )
//  561   {
//  562     if ( (listHdr - 1)->dest_id == task_id )
//  563     {
//  564       if ( foundHdr == NULL )
//  565       {
//  566         // Save the first one
//  567         foundHdr = listHdr;
//  568       }
//  569       else
//  570       {
//  571         // Second msg found, stop looking
//  572         break;
//  573       }
//  574     }
//  575     if ( foundHdr == NULL )
??osal_msg_receive_0:
        MOV       A,R6
        ORL       A,R7
        JNZ       ??osal_msg_receive_1
//  576     {
//  577       prevHdr = listHdr;
        MOV       ?V4,?V0
        MOV       ?V5,?V1
//  578     }
//  579     listHdr = OSAL_MSG_NEXT( listHdr );
??osal_msg_receive_1:
        MOV       A,?V0
        LCALL     ??Subroutine33_0 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV       A,?V1
        LCALL     ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_46:
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??osal_msg_receive_2
        MOV       A,?V0
        ADD       A,#-0x1
        MOV       DPL,A
        MOV       A,?V1
        LCALL     ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_47:
        MOVX      A,@DPTR
        XRL       A,R1
        JNZ       ??osal_msg_receive_0
        MOV       A,R6
        ORL       A,R7
        JNZ       ??osal_msg_receive_3
        MOV       R6,?V0
        MOV       R7,?V1
        SJMP      ??osal_msg_receive_1
//  580   }
//  581 
//  582   // Is there more than one?
//  583   if ( listHdr != NULL )
//  584   {
//  585     // Yes, Signal the task that a message is waiting
//  586     osal_set_event( task_id, SYS_EVENT_MSG );
??osal_msg_receive_3:
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x0
        MOV       R3,#-0x80
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
        SJMP      ??osal_msg_receive_4
//  587   }
//  588   else
//  589   {
//  590     // No more
//  591     osal_clear_event( task_id, SYS_EVENT_MSG );
??osal_msg_receive_2:
        ; Setup parameters for call to function osal_clear_event
        MOV       R2,#0x0
        MOV       R3,#-0x80
        LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
//  592   }
//  593 
//  594   // Did we find a message?
//  595   if ( foundHdr != NULL )
        MOV       A,R6
        ORL       A,R7
        JZ        ??osal_msg_receive_5
//  596   {
//  597     // Take out of the link list
//  598     osal_msg_extract( &osal_qHead, foundHdr, prevHdr );
??osal_msg_receive_4:
        ; Setup parameters for call to function osal_msg_extract
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,#osal_qHead & 0xff
        MOV       R3,#(osal_qHead >> 8) & 0xff
        LCALL     `??osal_msg_extract::?relay`; Banked call to: osal_msg_extract
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  599   }
//  600 
//  601   // Release interrupts
//  602   HAL_EXIT_CRITICAL_SECTION(intState);
??osal_msg_receive_5:
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.0
        MOV       0xa8.7,C
//  603 
//  604   return ( (uint8*) foundHdr );
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock62
        REQUIRE _A_IEN0
//  605 }
//  606 
//  607 /**************************************************************************************************
//  608  * @fn          osal_msg_find
//  609  *
//  610  * @brief       This function finds in place an OSAL message matching the task_id and event
//  611  *              parameters.
//  612  *
//  613  * input parameters
//  614  *
//  615  * @param       task_id - The OSAL task id that the enqueued OSAL message must match.
//  616  * @param       event - The OSAL event id that the enqueued OSAL message must match.
//  617  *
//  618  * output parameters
//  619  *
//  620  * None.
//  621  *
//  622  * @return      NULL if no match, otherwise an in place pointer to the matching OSAL message.
//  623  **************************************************************************************************
//  624  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  625 osal_event_hdr_t *osal_msg_find(uint8 task_id, uint8 event)
osal_msg_find:
          CFI Block cfiBlock63 Using cfiCommon0
          CFI Function osal_msg_find
        CODE
//  626 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV       A,R2
        MOV       R4,A
//  627   osal_msg_hdr_t *pHdr;
//  628   halIntState_t intState;
//  629 
//  630   HAL_ENTER_CRITICAL_SECTION(intState);  // Hold off interrupts.
        MOV       C,0xa8.7
        CLR       A
        RLC       A
        MOV       R0,A
        CLR       0xa8.7
//  631 
//  632   pHdr = osal_qHead;  // Point to the top of the queue.
        MOV       DPTR,#osal_qHead
        SJMP      ??CrossCallReturnLabel_48
//  633 
//  634   // Look through the queue for a message that matches the task_id and event parameters.
//  635   while (pHdr != NULL)
//  636   {
//  637     if (((pHdr-1)->dest_id == task_id) && (((osal_event_hdr_t *)pHdr)->event == event))
//  638     {
//  639       break;
//  640     }
//  641 
//  642     pHdr = OSAL_MSG_NEXT(pHdr);
??osal_msg_find_0:
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_65:
        MOV       A,R3
        LCALL     ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL     ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_69:
        MOV       A,R2
        ORL       A,R3
        JZ        ??osal_msg_find_1
        MOV       A,R2
        ADD       A,#-0x1
        MOV       DPL,A
        MOV       A,R3
        LCALL     ??Subroutine32_0 & 0xFFFF
//  643   }
??CrossCallReturnLabel_49:
        MOVX      A,@DPTR
        XRL       A,R1
        JNZ       ??osal_msg_find_0
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        XRL       A,R4
        JNZ       ??osal_msg_find_0
//  644 
//  645   HAL_EXIT_CRITICAL_SECTION(intState);  // Release interrupts.
??osal_msg_find_1:
        MOV       A,R0
        MOV       C,0xE0 /* A   */.0
        MOV       0xa8.7,C
//  646 
//  647   return (osal_event_hdr_t *)pHdr;
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock63
        REQUIRE _A_IEN0
//  648 }
//  649 
//  650 /*********************************************************************
//  651  * @fn      osal_msg_enqueue
//  652  *
//  653  * @brief
//  654  *
//  655  *    This function enqueues an OSAL message into an OSAL queue.
//  656  *
//  657  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  658  * @param   void *msg_ptr  - OSAL message
//  659  *
//  660  * @return  none
//  661  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  662 void osal_msg_enqueue( osal_msg_q_t *q_ptr, void *msg_ptr )
osal_msg_enqueue:
          CFI Block cfiBlock64 Using cfiCommon0
          CFI Function osal_msg_enqueue
        CODE
//  663 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  664   void *list;
//  665   halIntState_t intState;
//  666 
//  667   // Hold off interrupts
//  668   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV       C,0xa8.7
        CLR       A
        RLC       A
        MOV       R6,A
        CLR       0xa8.7
//  669 
//  670   OSAL_MSG_NEXT( msg_ptr ) = NULL;
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL     ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_50:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ??Subroutine28_0 & 0xFFFF
//  671   // If first message in queue
//  672   if ( *q_ptr == NULL )
??CrossCallReturnLabel_39:
        LCALL     ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_32:
        JNZ       ??CrossCallReturnLabel_44
//  673   {
//  674     *q_ptr = msg_ptr;
        MOV       DPL,R2
        MOV       DPH,R3
        SJMP      ??CrossCallReturnLabel_57
//  675   }
//  676   else
//  677   {
//  678     // Find end of queue
//  679     for ( list = *q_ptr; OSAL_MSG_NEXT( list ) != NULL; list = OSAL_MSG_NEXT( list ) );
??osal_msg_enqueue_0:
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL     ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_70:
        MOV       A,R2
        ORL       A,R3
        JNZ       ??osal_msg_enqueue_0
//  680 
//  681     // Add message to end of queue
//  682     OSAL_MSG_NEXT( list ) = msg_ptr;
        LCALL     ?Subroutine18 & 0xFFFF
//  683   }
??CrossCallReturnLabel_57:
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock64
        REQUIRE _A_IEN0
//  684 
//  685   // Re-enable interrupts
//  686   HAL_EXIT_CRITICAL_SECTION(intState);
//  687 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond65 Using cfiCommon0
          CFI Function osal_msg_allocate
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function osal_msg_push
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-2
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker67 Using cfiCommon1
          CFI (cfiPicker67) NoFunction
          CFI (cfiPicker67) Picker
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiPicker67
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine28_0:
          CFI Block cfiCond68 Using cfiCommon0
          CFI Function osal_msg_allocate
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function osal_msg_enqueue
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function osal_msg_allocate
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function osal_msg_push
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker72 Using cfiCommon1
          CFI (cfiPicker72) NoFunction
          CFI (cfiPicker72) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        RET
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiPicker72

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond73 Using cfiCommon0
          CFI Function osal_msg_enqueue
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function osal_msg_enqueue_max
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker75 Using cfiCommon1
          CFI (cfiPicker75) NoFunction
          CFI (cfiPicker75) Picker
        MOV       A,R0
        LCALL     ??Subroutine33_0 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV       A,R1
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiPicker75
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine29_0:
          CFI Block cfiCond76 Using cfiCommon0
          CFI Function osal_msg_extract
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function osal_msg_extract
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function osal_msg_enqueue
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function osal_msg_enqueue_max
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker80 Using cfiCommon1
          CFI (cfiPicker80) NoFunction
          CFI (cfiPicker80) Picker
        ADDC      A,#-0x1
        MOV       DPH,A
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiPicker80
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine30_0:
          CFI Block cfiCond81 Using cfiCommon0
          CFI Function osal_msg_dequeue
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function osal_msg_extract
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function osal_msg_extract
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-2
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function osal_msg_extract
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function osal_msg_enqueue
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function osal_msg_enqueue_max
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker87 Using cfiCommon1
          CFI (cfiPicker87) NoFunction
          CFI (cfiPicker87) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiPicker87
//  688 
//  689 /*********************************************************************
//  690  * @fn      osal_msg_dequeue
//  691  *
//  692  * @brief
//  693  *
//  694  *    This function dequeues an OSAL message from an OSAL queue.
//  695  *
//  696  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  697  *
//  698  * @return  void * - pointer to OSAL message or NULL of queue is empty.
//  699  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  700 void *osal_msg_dequeue( osal_msg_q_t *q_ptr )
osal_msg_dequeue:
          CFI Block cfiBlock88 Using cfiCommon0
          CFI Function osal_msg_dequeue
        CODE
//  701 {
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  702   void *msg_ptr = NULL;
        MOV       R0,#0x0
        MOV       R1,#0x0
//  703   halIntState_t intState;
//  704 
//  705   // Hold off interrupts
//  706   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV       C,0xa8.7
        CLR       A
        RLC       A
        MOV       R6,A
        CLR       0xa8.7
//  707 
//  708   if ( *q_ptr != NULL )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R4
        ORL       A,R5
        JZ        ??osal_msg_dequeue_0
//  709   {
//  710     // Dequeue message
//  711     msg_ptr = *q_ptr;
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine30_0 & 0xFFFF
//  712     *q_ptr = OSAL_MSG_NEXT( msg_ptr );
??CrossCallReturnLabel_40:
        MOV       A,R4
        ADD       A,#-0x5
        MOV       R4,A
        MOV       A,R5
        ADDC      A,#-0x1
        MOV       R5,A
        MOV       DPL,R4
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
//  713     OSAL_MSG_NEXT( msg_ptr ) = NULL;
        MOV       DPL,R4
        MOV       DPH,R5
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  714     OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
        MOV       A,R0
        ADD       A,#-0x1
        LCALL     ??Subroutine31_0 & 0xFFFF
//  715   }
??CrossCallReturnLabel_55:
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  716 
//  717   // Re-enable interrupts
//  718   HAL_EXIT_CRITICAL_SECTION(intState);
??osal_msg_dequeue_0:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        MOV       0xa8.7,C
//  719 
//  720   return msg_ptr;
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
          CFI EndBlock cfiBlock88
        REQUIRE ?Subroutine2
        REQUIRE _A_IEN0
        ; // Fall through to label ?Subroutine2
//  721 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock89 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock89
//  722 
//  723 /*********************************************************************
//  724  * @fn      osal_msg_push
//  725  *
//  726  * @brief
//  727  *
//  728  *    This function pushes an OSAL message to the head of an OSAL
//  729  *    queue.
//  730  *
//  731  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  732  * @param   void *msg_ptr  - OSAL message
//  733  *
//  734  * @return  none
//  735  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  736 void osal_msg_push( osal_msg_q_t *q_ptr, void *msg_ptr )
osal_msg_push:
          CFI Block cfiBlock90 Using cfiCommon0
          CFI Function osal_msg_push
        CODE
//  737 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  738   halIntState_t intState;
//  739 
//  740   // Hold off interrupts
//  741   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV       R0,0xa8+0x0
        CLR       0xa8.7
//  742 
//  743   // Push message to head of queue
//  744   OSAL_MSG_NEXT( msg_ptr ) = *q_ptr;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL     ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL     ?Subroutine17 & 0xFFFF
//  745   *q_ptr = msg_ptr;
??CrossCallReturnLabel_37:
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
//  746 
//  747   // Re-enable interrupts
//  748   HAL_EXIT_CRITICAL_SECTION(intState);
        MOV       A,R0
        MOV       C,0xE0 /* A   */.7
        LJMP      ??Subroutine26_0 & 0xFFFF
          CFI EndBlock cfiBlock90
        REQUIRE _A_IEN0
//  749 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond91 Using cfiCommon0
          CFI Function osal_msg_enqueue
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function osal_msg_push
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function osal_msg_extract
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function osal_msg_extract
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function osal_msg_extract
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker96 Using cfiCommon1
          CFI (cfiPicker96) NoFunction
          CFI (cfiPicker96) Picker
        MOV       A,R4
        LCALL     ??Subroutine33_0 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV       A,R5
        RET
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiPicker96

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond97 Using cfiCommon0
          CFI Function osal_msg_enqueue
          CFI Conditional ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function osal_msg_enqueue
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function osal_msg_enqueue_max
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function osal_msg_enqueue_max
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker101 Using cfiCommon1
          CFI (cfiPicker101) NoFunction
          CFI (cfiPicker101) Picker
        MOV       A,R0
        ADD       A,#-0x5
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiPicker101
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine31_0:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function osal_msg_dequeue
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function osal_msg_enqueue
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function osal_msg_enqueue
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function osal_msg_enqueue_max
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function osal_msg_enqueue_max
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker107 Using cfiCommon1
          CFI (cfiPicker107) NoFunction
          CFI (cfiPicker107) Picker
        MOV       DPL,A
        MOV       A,R1
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiPicker107
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine32_0:
          CFI Block cfiCond108 Using cfiCommon0
          CFI Function osal_msg_receive
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function osal_msg_receive
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function osal_msg_find
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond110) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond110) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond110) CFA_SP SP+-7
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function osal_msg_find
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond111) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond111) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond111) CFA_SP SP+-7
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function osal_msg_enqueue
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function osal_msg_push
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function osal_msg_extract
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function osal_msg_extract
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-2
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function osal_msg_extract
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function osal_msg_dequeue
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function osal_msg_enqueue
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function osal_msg_enqueue
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function osal_msg_enqueue_max
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-2
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function osal_msg_enqueue_max
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker122 Using cfiCommon1
          CFI (cfiPicker122) NoFunction
          CFI (cfiPicker122) Picker
        ADDC      A,#-0x1
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiPicker122
//  750 
//  751 /*********************************************************************
//  752  * @fn      osal_msg_extract
//  753  *
//  754  * @brief
//  755  *
//  756  *    This function extracts and removes an OSAL message from the
//  757  *    middle of an OSAL queue.
//  758  *
//  759  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  760  * @param   void *msg_ptr  - OSAL message to be extracted
//  761  * @param   void *prev_ptr  - OSAL message before msg_ptr in queue
//  762  *
//  763  * @return  none
//  764  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  765 void osal_msg_extract( osal_msg_q_t *q_ptr, void *msg_ptr, void *prev_ptr )
osal_msg_extract:
          CFI Block cfiBlock123 Using cfiCommon0
          CFI Function osal_msg_extract
        CODE
//  766 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  767   halIntState_t intState;
//  768 
//  769   // Hold off interrupts
//  770   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV       C,0xa8.7
        CLR       A
        RLC       A
        MOV       R6,A
        CLR       0xa8.7
//  771 
//  772   if ( msg_ptr == *q_ptr )
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV       A,R4
        XRL       A,R0
        JNZ       ??osal_msg_extract_0
        MOV       A,R5
        XRL       A,R1
??osal_msg_extract_0:
        JNZ       ??osal_msg_extract_1
//  773   {
//  774     // remove from first
//  775     *q_ptr = OSAL_MSG_NEXT( msg_ptr );
        LCALL     ?Subroutine21 & 0xFFFF
//  776   }
??CrossCallReturnLabel_25:
        LCALL     ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV       DPL,R2
        MOV       DPH,R3
        SJMP      ??CrossCallReturnLabel_52
//  777   else
//  778   {
//  779     // remove from middle
//  780     OSAL_MSG_NEXT( prev_ptr ) = OSAL_MSG_NEXT( msg_ptr );
??osal_msg_extract_1:
        LCALL     ?Subroutine21 & 0xFFFF
//  781   }
??CrossCallReturnLabel_26:
        LCALL     ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R2
        LCALL     ??Subroutine33_0 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV       A,R2
        LCALL     ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  782   OSAL_MSG_NEXT( msg_ptr ) = NULL;
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL     ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_53:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  783   OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
        MOV       A,R4
        ADD       A,#-0x1
        MOV       DPL,A
        MOV       A,R5
        LCALL     ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV       A,#-0x1
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock123
        REQUIRE _A_IEN0
//  784 
//  785   // Re-enable interrupts
//  786   HAL_EXIT_CRITICAL_SECTION(intState);
//  787 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond124 Using cfiCommon0
          CFI Function osal_msg_send
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function osal_msg_find
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond125) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond125) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond125) CFA_SP SP+-7
          CFI Block cfiPicker126 Using cfiCommon1
          CFI (cfiPicker126) NoFunction
          CFI (cfiPicker126) Picker
        MOV       A,R2
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiPicker126
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine33_0:
          CFI Block cfiCond127 Using cfiCommon0
          CFI Function osal_msg_receive
          CFI Conditional ??CrossCallReturnLabel_60
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function osal_msg_enqueue
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_44
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-4
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function osal_msg_enqueue_max
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_45
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-4
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function osal_msg_enqueue
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_23
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-4
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function osal_msg_push
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_24
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-4
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function osal_msg_extract
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_25
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-4
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function osal_msg_extract
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_26
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-4
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function osal_msg_extract
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_27
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-4
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function osal_msg_extract
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function osal_msg_send
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function osal_msg_find
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond137) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond137) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond137) CFA_SP SP+-7
          CFI Block cfiPicker138 Using cfiCommon1
          CFI (cfiPicker138) NoFunction
          CFI (cfiPicker138) Picker
        ADD       A,#-0x5
        MOV       DPL,A
        RET
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiPicker138
//  788 
//  789 /*********************************************************************
//  790  * @fn      osal_msg_enqueue_max
//  791  *
//  792  * @brief
//  793  *
//  794  *    This function enqueues an OSAL message into an OSAL queue if
//  795  *    the length of the queue is less than max.
//  796  *
//  797  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  798  * @param   void *msg_ptr  - OSAL message
//  799  * @param   uint8 max - maximum length of queue
//  800  *
//  801  * @return  TRUE if message was enqueued, FALSE otherwise
//  802  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  803 uint8 osal_msg_enqueue_max( osal_msg_q_t *q_ptr, void *msg_ptr, uint8 max )
osal_msg_enqueue_max:
          CFI Block cfiBlock139 Using cfiCommon0
          CFI Function osal_msg_enqueue_max
        CODE
//  804 {
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R1
//  805   void *list;
//  806   uint8 ret = FALSE;
        MOV       R2,#0x0
//  807   halIntState_t intState;
//  808 
//  809   // Hold off interrupts
//  810   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV       C,0xa8.7
        CLR       A
        RLC       A
        MOV       R3,A
        CLR       0xa8.7
//  811 
//  812   // If first message in queue
//  813   if ( *q_ptr == NULL )
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_33:
        JNZ       ??CrossCallReturnLabel_45
//  814   {
//  815     *q_ptr = msg_ptr;
        MOV       DPL,R6
        MOV       DPH,R7
        SJMP      ??CrossCallReturnLabel_59
//  816     ret = TRUE;
//  817   }
//  818   else
//  819   {
//  820     // Find end of queue or max
//  821     list = *q_ptr;
//  822     max--;
//  823     while ( (OSAL_MSG_NEXT( list ) != NULL) && (max > 0) )
??osal_msg_enqueue_max_0:
        MOV       A,?V0
        JZ        ??osal_msg_enqueue_max_1
//  824     {
//  825       list = OSAL_MSG_NEXT( list );
        LCALL     ?Subroutine9 & 0xFFFF
//  826       max--;
??CrossCallReturnLabel_45:
        DEC       ?V0
//  827     }
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_58:
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        MOV       A,R6
        ORL       A,R7
        JNZ       ??osal_msg_enqueue_max_0
//  828 
//  829     // Add message to end of queue if max not reached
//  830     if ( max != 0 )
        MOV       A,?V0
        JZ        ??osal_msg_enqueue_max_1
//  831     {
//  832       OSAL_MSG_NEXT( list ) = msg_ptr;
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
//  833       ret = TRUE;
        MOV       R2,#0x1
//  834     }
//  835   }
//  836 
//  837   // Re-enable interrupts
//  838   HAL_EXIT_CRITICAL_SECTION(intState);
??osal_msg_enqueue_max_1:
        MOV       A,R3
        MOV       C,0xE0 /* A   */.0
        MOV       0xa8.7,C
//  839 
//  840   return ret;
        MOV       A,R2
        MOV       R1,A
        LJMP      ??Subroutine27_0 & 0xFFFF
          CFI EndBlock cfiBlock139
        REQUIRE _A_IEN0
//  841 }
//  842 
//  843 /*********************************************************************
//  844  * @fn      osal_set_event
//  845  *
//  846  * @brief
//  847  *
//  848  *    This function is called to set the event flags for a task. The
//  849  *    event passed in is OR'd into the task's event variable.
//  850  *
//  851  * @param   uint8 task_id - receiving tasks ID
//  852  * @param   uint8 event_flag - what event to set
//  853  *
//  854  * @return  SUCCESS, INVALID_TASK
//  855  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  856 uint8 osal_set_event( uint8 task_id, uint16 event_flag )
osal_set_event:
          CFI Block cfiBlock140 Using cfiCommon0
          CFI Function osal_set_event
        CODE
//  857 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  858   if ( task_id < tasksCnt )
        MOV       DPTR,#tasksCnt
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R1
        CLR       C
        SUBB      A,R0
        JNC       ??osal_set_event_0
//  859   {
//  860     halIntState_t   intState;
//  861     HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
        MOV       R4,0xa8+0x0
        CLR       0xa8.7
//  862     tasksEvents[task_id] |= event_flag;  // Stuff the event bit(s)
        MOV       A,R1
        ADD       A,R1
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       DPTR,#tasksEvents
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R5,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R5
        MOV       DPH,A
        MOVX      A,@DPTR
        ORL       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,R3
        MOVX      @DPTR,A
//  863     HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
        MOV       A,R4
        MOV       C,0xE0 /* A   */.7
        MOV       0xa8.7,C
//  864     return ( SUCCESS );
        MOV       R1,#0x0
        SJMP      ??osal_set_event_1
//  865   }
//  866    else
//  867   {
//  868     return ( INVALID_TASK );
??osal_set_event_0:
        MOV       R1,#0x3
//  869   }
??osal_set_event_1:
        LJMP      ??Subroutine27_0 & 0xFFFF
          CFI EndBlock cfiBlock140
        REQUIRE _A_IEN0
//  870 }
//  871 
//  872 /*********************************************************************
//  873  * @fn      osal_clear_event
//  874  *
//  875  * @brief
//  876  *
//  877  *    This function is called to clear the event flags for a task. The
//  878  *    event passed in is masked out of the task's event variable.
//  879  *
//  880  * @param   uint8 task_id - receiving tasks ID
//  881  * @param   uint8 event_flag - what event to clear
//  882  *
//  883  * @return  SUCCESS, INVALID_TASK
//  884  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  885 uint8 osal_clear_event( uint8 task_id, uint16 event_flag )
osal_clear_event:
          CFI Block cfiBlock141 Using cfiCommon0
          CFI Function osal_clear_event
        CODE
//  886 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  887   if ( task_id < tasksCnt )
        MOV       DPTR,#tasksCnt
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R1
        CLR       C
        SUBB      A,R0
        JNC       ??osal_clear_event_0
//  888   {
//  889     halIntState_t   intState;
//  890     HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
        MOV       R6,0xa8+0x0
        CLR       0xa8.7
//  891     tasksEvents[task_id] &= ~(event_flag);   // Clear the event bit(s)
        MOV       A,R2
        CPL       A
        MOV       R4,A
        MOV       A,R3
        CPL       A
        MOV       R5,A
        MOV       A,R1
        ADD       A,R1
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV       DPH,A
        MOVX      A,@DPTR
        ANL       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,R5
        MOVX      @DPTR,A
//  892     HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
        MOV       A,R6
        MOV       C,0xE0 /* A   */.7
        MOV       0xa8.7,C
//  893     return ( SUCCESS );
        MOV       R1,#0x0
        SJMP      ??osal_clear_event_1
//  894   }
//  895    else
//  896   {
//  897     return ( INVALID_TASK );
??osal_clear_event_0:
        MOV       R1,#0x3
//  898   }
??osal_clear_event_1:
        LJMP      ??Subroutine27_0 & 0xFFFF
          CFI EndBlock cfiBlock141
        REQUIRE _A_IEN0
//  899 }
//  900 
//  901 /*********************************************************************
//  902  * @fn      osal_isr_register
//  903  *
//  904  * @brief
//  905  *
//  906  *   This function is called to register a service routine with an
//  907  *   interrupt. When the interrupt occurs, this service routine is called.
//  908  *
//  909  * @param   uint8 interrupt_id - Interrupt number
//  910  * @param   void (*isr_ptr)( uint8* ) - function pointer to ISR
//  911  *
//  912  * @return  SUCCESS, INVALID_INTERRUPT_ID,
//  913  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  914 uint8 osal_isr_register( uint8 interrupt_id, void (*isr_ptr)( uint8* ) )
osal_isr_register:
          CFI Block cfiBlock142 Using cfiCommon0
          CFI Function osal_isr_register
        CODE
//  915 {
        ; Saved register size: 0
        ; Auto size: 0
//  916   // Remove these statements when functionality is complete
//  917   (void)interrupt_id;
//  918   (void)isr_ptr;
//  919   return ( SUCCESS );
        MOV       R1,#0x0
        LJMP      ?BRET
//  920 }
          CFI EndBlock cfiBlock142
//  921 
//  922 /*********************************************************************
//  923  * @fn      osal_int_enable
//  924  *
//  925  * @brief
//  926  *
//  927  *   This function is called to enable an interrupt. Once enabled,
//  928  *   occurrence of the interrupt causes the service routine associated
//  929  *   with that interrupt to be called.
//  930  *
//  931  *   If INTS_ALL is the interrupt_id, interrupts (in general) are enabled.
//  932  *   If a single interrupt is passed in, then interrupts still have
//  933  *   to be enabled with another call to INTS_ALL.
//  934  *
//  935  * @param   uint8 interrupt_id - Interrupt number
//  936  *
//  937  * @return  SUCCESS or INVALID_INTERRUPT_ID
//  938  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  939 uint8 osal_int_enable( uint8 interrupt_id )
osal_int_enable:
          CFI Block cfiBlock143 Using cfiCommon0
          CFI Function osal_int_enable
        CODE
//  940 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV       A,R1
        MOV       R0,A
//  941 
//  942   if ( interrupt_id == INTS_ALL )
        MOV       A,#-0x1
        XRL       A,R0
        JNZ       ??osal_int_enable_0
//  943   {
//  944     HAL_ENABLE_INTERRUPTS();
        SETB      0xa8.7
//  945     return ( SUCCESS );
        MOV       R1,#0x0
        SJMP      ??osal_int_enable_1
//  946   }
//  947   else
//  948   {
//  949     return ( INVALID_INTERRUPT_ID );
??osal_int_enable_0:
        MOV       R1,#0x7
??osal_int_enable_1:
        LJMP      ?BRET
          CFI EndBlock cfiBlock143
        REQUIRE _A_IEN0
//  950   }
//  951 }
//  952 
//  953 /*********************************************************************
//  954  * @fn      osal_int_disable
//  955  *
//  956  * @brief
//  957  *
//  958  *   This function is called to disable an interrupt. When a disabled
//  959  *   interrupt occurs, the service routine associated with that
//  960  *   interrupt is not called.
//  961  *
//  962  *   If INTS_ALL is the interrupt_id, interrupts (in general) are disabled.
//  963  *   If a single interrupt is passed in, then just that interrupt is disabled.
//  964  *
//  965  * @param   uint8 interrupt_id - Interrupt number
//  966  *
//  967  * @return  SUCCESS or INVALID_INTERRUPT_ID
//  968  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  969 uint8 osal_int_disable( uint8 interrupt_id )
osal_int_disable:
          CFI Block cfiBlock144 Using cfiCommon0
          CFI Function osal_int_disable
        CODE
//  970 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV       A,R1
        MOV       R0,A
//  971 
//  972   if ( interrupt_id == INTS_ALL )
        MOV       A,#-0x1
        XRL       A,R0
        JNZ       ??osal_int_disable_0
//  973   {
//  974     HAL_DISABLE_INTERRUPTS();
        CLR       0xa8.7
//  975     return ( SUCCESS );
        MOV       R1,#0x0
        SJMP      ??osal_int_disable_1
//  976   }
//  977   else
//  978   {
//  979     return ( INVALID_INTERRUPT_ID );
??osal_int_disable_0:
        MOV       R1,#0x7
??osal_int_disable_1:
        LJMP      ?BRET
          CFI EndBlock cfiBlock144
        REQUIRE _A_IEN0
//  980   }
//  981 }
//  982 
//  983 /*********************************************************************
//  984  * @fn      osal_init_system
//  985  *
//  986  * @brief
//  987  *
//  988  *   This function initializes the "task" system by creating the
//  989  *   tasks defined in the task table (OSAL_Tasks.h).
//  990  *
//  991  * @param   void
//  992  *
//  993  * @return  SUCCESS
//  994  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  995 uint8 osal_init_system( void )
osal_init_system:
          CFI Block cfiBlock145 Using cfiCommon0
          CFI Function osal_init_system
        CODE
//  996 {
        FUNCALL osal_init_system, osal_mem_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_init_system, osalTimerInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_init_system, osal_pwrmgr_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_init_system, osalInitTasks
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_init_system, osal_mem_kick
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  997   // Initialize the Memory Allocation System
//  998   osal_mem_init();
        ; Setup parameters for call to function osal_mem_init
        LCALL     `??osal_mem_init::?relay`; Banked call to: osal_mem_init
//  999 
// 1000   // Initialize the message queue
// 1001   osal_qHead = NULL;
        MOV       DPTR,#osal_qHead
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1002 
// 1003   // Initialize the timers
// 1004   osalTimerInit();
        ; Setup parameters for call to function osalTimerInit
        LCALL     `??osalTimerInit::?relay`; Banked call to: osalTimerInit
// 1005 
// 1006   // Initialize the Power Management System
// 1007   osal_pwrmgr_init();
        ; Setup parameters for call to function osal_pwrmgr_init
        LCALL     `??osal_pwrmgr_init::?relay`; Banked call to: osal_pwrmgr_init
// 1008 
// 1009   // Initialize the system tasks.
// 1010   osalInitTasks();
        ; Setup parameters for call to function osalInitTasks
        LCALL     `??osalInitTasks::?relay`; Banked call to: osalInitTasks
// 1011 
// 1012   // Setup efficient search for the first free block of heap.
// 1013   osal_mem_kick();
        ; Setup parameters for call to function osal_mem_kick
        LCALL     `??osal_mem_kick::?relay`; Banked call to: osal_mem_kick
// 1014 
// 1015   return ( SUCCESS );
        MOV       R1,#0x0
        LJMP      ?Subroutine0 & 0xFFFF
// 1016 }
          CFI EndBlock cfiBlock145
// 1017 
// 1018 
// 1019 
// 1020 
// 1021 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1022 void Delayms(unsigned int xms) //i=xms  ¼´ÑÓÊ± i  ºÁÃë
Delayms:
          CFI Block cfiBlock146 Using cfiCommon0
          CFI Function Delayms
        CODE
// 1023 {
        ; Saved register size: 0
        ; Auto size: 0
// 1024   unsigned int i,j;
// 1025   for(i=xms;i>0;i--)
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        SJMP      ??Delayms_0
// 1026     for(j=587;j>0;j--);
??Delayms_1:
        MOV       A,R0
        ADD       A,#-0x1
        DEC       R0
        MOV       A,R1
        ADDC      A,#-0x1
??Delayms_0:
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??Delayms_1
// 1027 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock146
// 1028 /*********************************************************************
// 1029  * @fn      osal_start_system
// 1030  *
// 1031  * @brief
// 1032  *
// 1033  *   This function is the main loop function of the task system (if
// 1034  *   ZBIT and UBIT are not defined). This Function doesn't return.
// 1035  *
// 1036  * @param   void
// 1037  *
// 1038  * @return  none
// 1039  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1040 void osal_start_system( void )
osal_start_system:
          CFI Block cfiBlock147 Using cfiCommon0
          CFI Function osal_start_system
        CODE
// 1041 {
        FUNCALL osal_start_system, osal_getClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_start_system, srand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_start_system, rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_start_system, Delayms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_start_system, osal_run_system
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 1042 #if !defined ( ZBIT ) && !defined ( UBIT )
// 1043 
// 1044   for(;;)  // Forever Loop
// 1045 
// 1046 
// 1047 #endif
// 1048   {
// 1049     srand((int)osal_getClock());
??osal_start_system_0:
        ; Setup parameters for call to function osal_getClock
        LCALL     `??osal_getClock::?relay`; Banked call to: osal_getClock
        ; Setup parameters for call to function srand
        LCALL     `??srand::?relay`; Banked call to: srand
// 1050     Delayms(random(300));
        ; Setup parameters for call to function Delayms
        ; Setup parameters for call to function rand
        LCALL     `??rand::?relay` ; Banked call to: rand
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
        MOV       R2,#0x2c
        MOV       R3,#0x1
        LCALL     ?S_DIV_MOD
        LCALL     `??Delayms::?relay`; Banked call to: Delayms
// 1051     osal_run_system();
        ; Setup parameters for call to function osal_run_system
        LCALL     `??osal_run_system::?relay`; Banked call to: osal_run_system
// 1052     //feed the dog
// 1053     WDCTL = 0xa0; //°´¼Ä´æÆ÷ÃèÊöÀ´Î¹¹·
        MOV       0xc9,#-0x60
// 1054     WDCTL = 0x50;
        MOV       0xc9,#0x50
        SJMP      ??osal_start_system_0
          CFI EndBlock cfiBlock147
        REQUIRE WDCTL
// 1055   }
// 1056 }
// 1057 
// 1058 /*********************************************************************
// 1059  * @fn      osal_run_system
// 1060  *
// 1061  * @brief
// 1062  *
// 1063  *   This function will make one pass through the OSAL taskEvents table
// 1064  *   and call the task_event_processor() function for the first task that
// 1065  *   is found with at least one event pending. If there are no pending
// 1066  *   events (all tasks), this function puts the processor into Sleep.
// 1067  *
// 1068  * @param   void
// 1069  *
// 1070  * @return  none
// 1071  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1072 void osal_run_system( void )
osal_run_system:
          CFI Block cfiBlock148 Using cfiCommon0
          CFI Function osal_run_system
        CODE
// 1073 {
        FUNCALL osal_run_system, osalTimeUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_run_system, Hal_ProcessPoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1074   uint8 idx = 0;
        MOV       ?V0,#0x0
// 1075 
// 1076   osalTimeUpdate();
        ; Setup parameters for call to function osalTimeUpdate
        LCALL     `??osalTimeUpdate::?relay`; Banked call to: osalTimeUpdate
// 1077   Hal_ProcessPoll();
        ; Setup parameters for call to function Hal_ProcessPoll
        LCALL     `??Hal_ProcessPoll::?relay`; Banked call to: Hal_ProcessPoll
// 1078 
// 1079   do {
// 1080     if (tasksEvents[idx])  // Task is highest priority that is ready.
??osal_run_system_0:
        MOV       R0,?V0
        MOV       A,R0
        ADD       A,R0
        LCALL     ?Subroutine15 & 0xFFFF
// 1081     {
// 1082       break;
// 1083     }
// 1084   } while (++idx < tasksCnt);
??CrossCallReturnLabel_16:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_35:
        JNZ       ??osal_run_system_1
        INC       ?V0
        MOV       DPTR,#tasksCnt
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V0
        CLR       C
        SUBB      A,R0
        JC        ??osal_run_system_0
// 1085 
// 1086   if (idx < tasksCnt)
??osal_run_system_1:
        MOV       DPTR,#tasksCnt
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V0
        CLR       C
        SUBB      A,R0
        JNC       ??osal_run_system_2
// 1087   {
// 1088     uint16 events;
// 1089     halIntState_t intState;
// 1090 
// 1091     HAL_ENTER_CRITICAL_SECTION(intState);
        MOV       R4,0xa8+0x0
        CLR       0xa8.7
// 1092     events = tasksEvents[idx];
        MOV       R6,?V0
        MOV       A,R6
        ADD       A,R6
        MOV       R6,A
        CLR       A
        RLC       A
        MOV       R7,A
        MOV       DPTR,#tasksEvents
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        LCALL     ??Subroutine34_0 & 0xFFFF
// 1093     tasksEvents[idx] = 0;  // Clear the Events for this task.
??CrossCallReturnLabel_71:
        MOV       DPL,R0
        MOV       DPH,R1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1094     HAL_EXIT_CRITICAL_SECTION(intState);
        MOV       A,R4
        MOV       C,0xE0 /* A   */.7
        MOV       0xa8.7,C
// 1095 
// 1096     activeTaskID = idx;
        MOV       A,?V0
        MOV       DPTR,#activeTaskID
        MOVX      @DPTR,A
// 1097     events = (tasksArr[idx])( idx, events );
        ; Setup parameters for indirect call
        MOV       R1,A
        MOV       A,#tasksArr & 0xff
        ADD       A,R6
        MOV       DPL,A
        MOV       A,#(tasksArr >> 8) & 0xff
        ADDC      A,R7
        MOV       DPH,A
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL     ?CALL_IND
// 1098     activeTaskID = TASK_NO_TASK;
        MOV       DPTR,#activeTaskID
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 1099 
// 1100     HAL_ENTER_CRITICAL_SECTION(intState);
        MOV       R0,0xa8+0x0
        CLR       0xa8.7
// 1101     tasksEvents[idx] |= events;  // Add back unprocessed events to the current task.
        MOV       DPTR,#tasksEvents
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       R1,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       DPL,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        ORL       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,R3
        MOVX      @DPTR,A
// 1102     HAL_EXIT_CRITICAL_SECTION(intState);
        MOV       A,R0
        MOV       C,0xE0 /* A   */.7
        MOV       0xa8.7,C
// 1103   }
// 1104 #if defined( POWER_SAVING )
// 1105   else  // Complete pass through all task events with no activity?
// 1106   {
// 1107     osal_pwrmgr_powerconserve();  // Put the processor/system into sleep
// 1108   }
// 1109 #endif
// 1110 
// 1111   /* Yield in case cooperative scheduling is being used. */
// 1112 #if defined (configUSE_PREEMPTION) && (configUSE_PREEMPTION == 0)
// 1113   {
// 1114     osal_task_yield();
// 1115   }
// 1116 #endif
// 1117 }
??osal_run_system_2:
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock148
        REQUIRE _A_IEN0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond149 Using cfiCommon0
          CFI Function osal_clear_event
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function osal_run_system
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-2
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker151 Using cfiCommon1
          CFI (cfiPicker151) NoFunction
          CFI (cfiPicker151) Picker
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       DPTR,#tasksEvents
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R2
        RET
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiPicker151

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond152 Using cfiCommon0
          CFI Function _ltoa
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 55)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function osal_run_system
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-2
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker154 Using cfiCommon1
          CFI (cfiPicker154) NoFunction
          CFI (cfiPicker154) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiPicker154

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond155 Using cfiCommon0
          CFI Function osal_memcpy
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function osal_revmemcpy
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-2
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker157 Using cfiCommon1
          CFI (cfiPicker157) NoFunction
          CFI (cfiPicker157) Picker
        MOVX      A,@DPTR
        MOV       R1,A
        INC       DPTR
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiPicker157
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine34_0:
          CFI Block cfiCond158 Using cfiCommon0
          CFI Function _ltoa
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 55)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function _ltoa
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond159) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond159) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond159) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond159) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-2
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 55)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function _ltoa
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 55)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function osal_msg_find
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond161) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond161) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond161) CFA_SP SP+-7
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function osal_msg_enqueue
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-2
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function osal_run_system
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function osal_memcpy
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function osal_revmemcpy
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker166 Using cfiCommon1
          CFI (cfiPicker166) NoFunction
          CFI (cfiPicker166) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiPicker166
// 1118 
// 1119 /*********************************************************************
// 1120  * @fn      osal_buffer_uint32
// 1121  *
// 1122  * @brief
// 1123  *
// 1124  *   Buffer an uint32 value - LSB first.
// 1125  *
// 1126  * @param   buf - buffer
// 1127  * @param   val - uint32 value
// 1128  *
// 1129  * @return  pointer to end of destination buffer
// 1130  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1131 uint8* osal_buffer_uint32( uint8 *buf, uint32 val )
osal_buffer_uint32:
          CFI Block cfiBlock167 Using cfiCommon0
          CFI Function osal_buffer_uint32
        CODE
// 1132 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
// 1133   *buf++ = BREAK_UINT32( val, 0 );
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,?V4
        LCALL     ?Subroutine20 & 0xFFFF
// 1134   *buf++ = BREAK_UINT32( val, 1 );
// 1135   *buf++ = BREAK_UINT32( val, 2 );
??CrossCallReturnLabel_21:
        MOV       ?V0,?V4
        MOV       ?V2,?V6
        MOV       ?V3,?V7
        MOV       A,#0x10
        MOV       R0,#?V0
        LCALL     ?UL_SHR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
// 1136   *buf++ = BREAK_UINT32( val, 3 );
        MOV       A,#0x18
        MOV       R0,#?V4
        LCALL     ?UL_SHR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,?V4
        MOVX      @DPTR,A
// 1137 
// 1138   return buf;
        MOV       A,R2
        ADD       A,#0x4
        MOV       R2,A
        JNC       ??osal_buffer_uint32_0
        INC       R3
??osal_buffer_uint32_0:
        LJMP      ?Subroutine3 & 0xFFFF
// 1139 }
          CFI EndBlock cfiBlock167
// 1140 
// 1141 /*********************************************************************
// 1142  * @fn      osal_buffer_uint24
// 1143  *
// 1144  * @brief
// 1145  *
// 1146  *   Buffer an uint24 value - LSB first. Note that type uint24 is
// 1147  *   typedef to uint32 in comdef.h
// 1148  *
// 1149  * @param   buf - buffer
// 1150  * @param   val - uint24 value
// 1151  *
// 1152  * @return  pointer to end of destination buffer
// 1153  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1154 uint8* osal_buffer_uint24( uint8 *buf, uint24 val )
osal_buffer_uint24:
          CFI Block cfiBlock168 Using cfiCommon0
          CFI Function osal_buffer_uint24
        CODE
// 1155 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
// 1156   *buf++ = BREAK_UINT32( val, 0 );
        MOV       ?V0,?V4
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,?V0
        LCALL     ?Subroutine20 & 0xFFFF
// 1157   *buf++ = BREAK_UINT32( val, 1 );
// 1158   *buf++ = BREAK_UINT32( val, 2 );
??CrossCallReturnLabel_22:
        MOV       A,#0x10
        MOV       R0,#?V4
        LCALL     ?UL_SHR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOV       A,?V4
        MOVX      @DPTR,A
// 1159 
// 1160   return buf;
        MOV       A,R2
        ADD       A,#0x3
        MOV       R2,A
        JNC       ??osal_buffer_uint24_0
        INC       R3
??osal_buffer_uint24_0:
        LJMP      ?Subroutine3 & 0xFFFF
// 1161 }
          CFI EndBlock cfiBlock168

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond169 Using cfiCommon0
          CFI Function osal_buffer_uint32
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function osal_buffer_uint24
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-2
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker171 Using cfiCommon1
          CFI (cfiPicker171) NoFunction
          CFI (cfiPicker171) Picker
        MOVX      @DPTR,A
        MOV       ?V1,?V5
        MOV       A,?V1
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiPicker171
// 1162 
// 1163 /*********************************************************************
// 1164  * @fn      osal_isbufset
// 1165  *
// 1166  * @brief
// 1167  *
// 1168  *   Is all of the array elements set to a value?
// 1169  *
// 1170  * @param   buf - buffer to check
// 1171  * @param   val - value to check each array element for
// 1172  * @param   len - length to check
// 1173  *
// 1174  * @return  TRUE if all "val"
// 1175  *          FALSE otherwise
// 1176  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1177 uint8 osal_isbufset( uint8 *buf, uint8 val, uint8 len )
osal_isbufset:
          CFI Block cfiBlock172 Using cfiCommon0
          CFI Function osal_isbufset
        CODE
// 1178 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R5,A
// 1179   uint8 x;
// 1180 
// 1181   if ( buf == NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??osal_isbufset_0
// 1182   {
// 1183     return ( FALSE );
// 1184   }
// 1185 
// 1186   for ( x = 0; x < len; x++ )
        MOV       R0,#0x0
        SJMP      ??osal_isbufset_1
??osal_isbufset_2:
        INC       R0
??osal_isbufset_1:
        MOV       A,R0
        CLR       C
        SUBB      A,R4
        JNC       ??osal_isbufset_3
// 1187   {
// 1188     // Check for non-initialized value
// 1189     if ( buf[x] != val )
        MOV       A,R0
        MOV       R6,A
        MOV       A,R2
        ADD       A,R6
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,R5
        JZ        ??osal_isbufset_2
// 1190     {
// 1191       return ( FALSE );
??osal_isbufset_0:
        MOV       R1,#0x0
        SJMP      ??osal_isbufset_4
// 1192     }
// 1193   }
// 1194   return ( TRUE );
??osal_isbufset_3:
        MOV       R1,#0x1
??osal_isbufset_4:
        LJMP      ??Subroutine27_0 & 0xFFFF
// 1195 }
          CFI EndBlock cfiBlock172
// 1196 
// 1197 /*********************************************************************
// 1198  * @fn      osal_self
// 1199  *
// 1200  * @brief
// 1201  *
// 1202  *   This function returns the task ID of the current (active) task.
// 1203  *
// 1204  * @param   void
// 1205  *
// 1206  * @return   active task ID or TASK_NO_TASK if no task is active
// 1207  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1208 uint8 osal_self( void )
osal_self:
          CFI Block cfiBlock173 Using cfiCommon0
          CFI Function osal_self
        CODE
// 1209 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1210   return ( activeTaskID );
        MOV       DPTR,#activeTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LJMP      ?Subroutine0 & 0xFFFF
// 1211 }
          CFI EndBlock cfiBlock173

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for activeTaskID>`:
        DATA8
        DB 255

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_strlen::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_strlen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_memcpy::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_memcpy

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_revmemcpy::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_revmemcpy

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_memdup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_memdup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_memcmp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_memcmp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_memset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_memset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_build_uint16::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_build_uint16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_build_uint32::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_build_uint32

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??_ltoa::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    _ltoa

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_rand::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_rand

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_allocate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_allocate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_deallocate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_deallocate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_send::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_receive::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_receive

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_find::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_find

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_enqueue::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_enqueue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_dequeue::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_dequeue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_push::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_push

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_extract::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_extract

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_enqueue_max::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_enqueue_max

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_set_event::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_set_event

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_clear_event::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_clear_event

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_isr_register::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_isr_register

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_int_enable::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_int_enable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_int_disable::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_int_disable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_init_system::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_init_system

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Delayms::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Delayms

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_start_system::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_start_system

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_run_system::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_run_system

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_buffer_uint32::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_buffer_uint32

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_buffer_uint24::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_buffer_uint24

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_isbufset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_isbufset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_self::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_self

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">`:
        DB ""
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">_1`:
        DB ""
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">_2`:
        DB ""
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "0">`:
        DB "0"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_5f5e100:
        DD 100000000

        END
// 1212 
// 1213 /*********************************************************************
// 1214  */
// 
// 2 603 bytes in segment BANKED_CODE
//   198 bytes in segment BANK_RELAYS
//     2 bytes in segment SFR_AN
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//    40 bytes in segment XDATA_ROM_C
//     2 bytes in segment XDATA_Z
// 
//   199 bytes of CODE     memory
//    32 bytes of CONST    memory (+ 8 bytes shared)
//     0 bytes of DATA     memory (+ 2 bytes shared)
// 2 603 bytes of HUGECODE memory
//     3 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
