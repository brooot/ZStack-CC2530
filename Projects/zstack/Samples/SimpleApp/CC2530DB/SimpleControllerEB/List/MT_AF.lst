###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               30/Aug/2019  09:36:04
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\ZStack-CC2530-2.5.1a\Components\mt\MT_AF.c
#    Command line       =  
#        -f C:\Users\Ð¡»ðÁú\AppData\Local\Temp\EWB6D.tmp
#        (D:\ZStack-CC2530-2.5.1a\Components\mt\MT_AF.c -D HOLD_AUTO_START -D
#        BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D xNV_RESTORE -D xZTOOL_P1
#        -D xMT_TASK -D xMT_SYS_FUNC -D xMT_SAPI_FUNC -D xMT_SAPI_CB_FUNC -lC
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleControllerEB\List
#        -lA
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleControllerEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleControllerEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x02000000 -DZDAPP_CONFIG_PAN_ID=0xFFF0
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\ -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\Source\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleControllerEB\List\MT_AF.lst
#    Object file        =  
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleControllerEB\Obj\MT_AF.r51
#
###############################################################################

D:\ZStack-CC2530-2.5.1a\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2011-05-27 16:00:27 -0700 (Fri, 27 May 2011) $
      4            Revision:       $Revision: 26145 $
      5          
      6          
      7            Description:    MonitorTest functions for the AF layer.
      8          
      9          
     10            Copyright 2007-2011 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40          **************************************************************************************************/
     41          
     42          /* ------------------------------------------------------------------------------------------------
     43           *                                          Includes
     44           * ------------------------------------------------------------------------------------------------
     45           */
     46          #include "ZComDef.h"
     47          #include "OSAL.h"
     48          #include "MT.h"
     49          #include "MT_AF.h"
     50          #include "MT_ZDO.h"
     51          #include "nwk.h"
     52          #include "OnBoard.h"
     53          #include "MT_UART.h"
     54          
     55          #if defined INTER_PAN
     56          #include "stub_aps.h"
     57          #endif
     58          
     59          /* ------------------------------------------------------------------------------------------------
     60           *                                          Constants
     61           * ------------------------------------------------------------------------------------------------
     62           */
     63          
     64          #if !defined MT_AF_EXEC_CNT
     65          #define MT_AF_EXEC_CNT  15
     66          #endif
     67          
     68          #if !defined MT_AF_EXEC_DLY
     69          #define MT_AF_EXEC_DLY  1000
     70          #endif
     71          
     72          /* ------------------------------------------------------------------------------------------------
     73           *                                           Typedefs
     74           * ------------------------------------------------------------------------------------------------
     75           */
     76          
     77          typedef struct
     78          {
     79            uint8 *data;
     80            afAddrType_t dstAddr;
     81            endPointDesc_t *epDesc;
     82            uint16 cId;
     83            uint16 dataLen;
     84            uint8 transId;
     85            uint8 txOpts;
     86            uint8 radius;
     87            uint8 tick;
     88          } mtAfDataReq_t;
     89          
     90          typedef struct _mtAfInMsgList_t
     91          {
     92            struct _mtAfInMsgList_t *next;
     93            uint8 *data;
     94            uint32 timestamp;         // Receipt timestamp from MAC.
     95            uint8 tick;
     96          } mtAfInMsgList_t;
     97          
     98          /* ------------------------------------------------------------------------------------------------
     99           *                                        Local Variables
    100           * ------------------------------------------------------------------------------------------------
    101           */
    102          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          mtAfInMsgList_t *pMtAfInMsgList = NULL;
   \                     pMtAfInMsgList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          mtAfDataReq_t *pMtAfDataReq = NULL;
   \                     pMtAfDataReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          /* ------------------------------------------------------------------------------------------------
    107           *                                        Global Variables
    108           * ------------------------------------------------------------------------------------------------
    109           */
    110          
    111          #if defined ( MT_AF_CB_FUNC )
    112          uint16 _afCallbackSub;
    113          #endif
    114          
    115          /* ------------------------------------------------------------------------------------------------
    116           *                                        Local Functions
    117           * ------------------------------------------------------------------------------------------------
    118           */
    119          
    120          void MT_AfRegister(uint8 *pBuf);
    121          void MT_AfDataRequest(uint8 *pBuf);
    122          
    123          #if defined ( ZIGBEE_SOURCE_ROUTING )
    124          void MT_AfDataRequestSrcRtg(uint8 *pBuf);
    125          #endif
    126          
    127          #if defined INTER_PAN
    128          static void MT_AfInterPanCtl(uint8 *pBuf);
    129          #endif
    130          
    131          static void MT_AfDataRetrieve(uint8 *pBuf);
    132          static void MT_AfDataStore(uint8 *pBuf);
    133          static void MT_AfAPSF_ConfigSet(uint8 *pBuf);
    134          
    135          /**************************************************************************************************
    136           * @fn          MT_AfExec
    137           *
    138           * @brief       This function is invoked by an MT timer event.
    139           *
    140           * input parameters
    141           *
    142           * None.
    143           *
    144           * output parameters
    145           *
    146           * None.
    147           *
    148           * @return      None.
    149           **************************************************************************************************
    150           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    151          void MT_AfExec(void)
   \                     MT_AfExec:
    152          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    153            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \                     ??MT_AfExec_0:
   \   000005   90....       MOV       DPTR,#pMtAfInMsgList
   \   000008   8008         SJMP      ??MT_AfExec_1
    154          
    155            while (pItem != NULL)
    156            {
    157              if (--(pItem->tick) == 0)
    158              {
    159                if (pMtAfInMsgList == pItem)
    160                {
    161                  pMtAfInMsgList = pItem->next;
    162                  (void)osal_mem_free(pItem);
    163                  pItem = pMtAfInMsgList;
    164                }
    165                else
    166                {
    167                  pPrev->next = pItem->next;
    168                  (void)osal_mem_free(pItem);
    169                  pItem = pPrev->next;
    170                }
    171              }
    172              else
    173              {
    174                pPrev = pItem;
   \                     ??MT_AfExec_2:
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    175                pItem = pItem->next;
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
    176              }
   \                     ??MT_AfExec_1:
   \   000012   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000015   FB           MOV       R3,A
   \   000016   EA           MOV       A,R2
   \   000017   4B           ORL       A,R3
   \   000018   6035         JZ        ??MT_AfExec_3
   \   00001A   EA           MOV       A,R2
   \   00001B   2408         ADD       A,#0x8
   \   00001D   F582         MOV       DPL,A
   \   00001F   E4           CLR       A
   \   000020   3B           ADDC      A,R3
   \   000021   F583         MOV       DPH,A
   \   000023   E0           MOVX      A,@DPTR
   \   000024   14           DEC       A
   \   000025   F0           MOVX      @DPTR,A
   \   000026   70E2         JNZ       ??MT_AfExec_2
   \   000028   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00002B   EA           MOV       A,R2
   \   00002C   68           XRL       A,R0
   \   00002D   7002         JNZ       ??MT_AfExec_4
   \   00002F   EB           MOV       A,R3
   \   000030   69           XRL       A,R1
   \                     ??MT_AfExec_4:
   \   000031   8A82         MOV       DPL,R2
   \   000033   8B83         MOV       DPH,R3
   \   000035   7008         JNZ       ??MT_AfExec_5
   \   000037   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00003A   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00003D   80C6         SJMP      ??MT_AfExec_0
   \                     ??MT_AfExec_5:
   \   00003F   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   80C3         SJMP      ??MT_AfExec_1
    177            }
    178          
    179            if (pMtAfDataReq != NULL)
   \                     ??MT_AfExec_3:
   \   00004F   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000052   6015         JZ        ??MT_AfExec_6
    180            {
    181              if (--(pMtAfDataReq->tick) == 0)
   \   000054   E8           MOV       A,R0
   \   000055   2417         ADD       A,#0x17
   \   000057   F582         MOV       DPL,A
   \   000059   E4           CLR       A
   \   00005A   39           ADDC      A,R1
   \   00005B   F583         MOV       DPH,A
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   14           DEC       A
   \   00005F   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000062   E0           MOVX      A,@DPTR
   \   000063   7004         JNZ       ??MT_AfExec_6
    182              {
    183                (void)osal_mem_free(pMtAfDataReq);
   \   000065                ; Setup parameters for call to function osal_mem_free
   \   000065   12....       LCALL     ?Subroutine4 & 0xFFFF
    184                pMtAfDataReq = NULL;
    185              }
    186            }
   \                     ??CrossCallReturnLabel_4:
   \   000068   F0           MOVX      @DPTR,A
    187          
    188            if ((pMtAfInMsgList != NULL) || (pMtAfDataReq != NULL))
   \                     ??MT_AfExec_6:
   \   000069   90....       MOV       DPTR,#pMtAfInMsgList
   \   00006C   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00006F   7005         JNZ       ??MT_AfExec_7
   \   000071   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000074   6008         JZ        ??CrossCallReturnLabel_30
    189            {
    190              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??MT_AfExec_7:
   \   000076                ; Setup parameters for call to function osal_start_timerEx
   \   000076   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000079   6003         JZ        ??CrossCallReturnLabel_30
    191              {
    192                osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00007B                ; Setup parameters for call to function osal_set_event
   \   00007B   12....       LCALL     ?Subroutine20 & 0xFFFF
    193              }
    194            }
    195          }
   \                     ??CrossCallReturnLabel_30:
   \   00007E                REQUIRE ?Subroutine0
   \   00007E                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   7A08         MOV       R2,#0x8
   \   000002   7B00         MOV       R3,#0x0
   \   000004   90....       MOV       DPTR,#MT_TaskID
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   7CE8         MOV       R4,#-0x18
   \   000002   7D03         MOV       R5,#0x3
   \   000004   7A08         MOV       R2,#0x8
   \   000006   7B00         MOV       R3,#0x0
   \   000008   90....       MOV       DPTR,#MT_TaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000010   E9           MOV       A,R1
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine48_0
   \   000003                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000004   C8           XCH       A,R0
   \   000005   2417         ADD       A,#0x17
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   38           ADDC      A,R0
   \   00000B   F583         MOV       DPH,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine49_0
   \   000003                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   49           ORL       A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   90....       MOV       DPTR,#pMtAfInMsgList
   \   000003                REQUIRE ??Subroutine53_0
   \   000003                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000003   F9           MOV       R1,A
   \   000004   90....       MOV       DPTR,#pMtAfInMsgList
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000006   FB           MOV       R3,A
   \   000007   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00000A   90....       MOV       DPTR,#pMtAfDataReq
   \   00000D   E4           CLR       A
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   22           RET
    196          
    197          /***************************************************************************************************
    198           * @fn      MT_AfCommandProcessing
    199           *
    200           * @brief   Process all the AF commands that are issued by test tool
    201           *
    202           * @param   pBuf - pointer to the received buffer
    203           *
    204           * @return  status
    205           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    206          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
    207          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   F8           MOV       R0,A
   \   00000C   EB           MOV       A,R3
   \   00000D   F9           MOV       R1,A
    208            uint8 status = MT_RPC_SUCCESS;
   \   00000E   7E00         MOV       R6,#0x0
    209          
    210            switch (pBuf[MT_RPC_POS_CMD1])
   \   000010   8A82         MOV       DPL,R2
   \   000012   F583         MOV       DPH,A
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   6015         JZ        ??MT_AfCommandProcessing_0
   \   000019   14           DEC       A
   \   00001A   6017         JZ        ??MT_AfCommandProcessing_1
   \   00001C   14           DEC       A
   \   00001D   6014         JZ        ??MT_AfCommandProcessing_1
   \   00001F   14           DEC       A
   \   000020   6016         JZ        ??MT_AfCommandProcessing_2
   \   000022   24F2         ADD       A,#-0xe
   \   000024   601C         JZ        ??MT_AfCommandProcessing_3
   \   000026   14           DEC       A
   \   000027   6014         JZ        ??MT_AfCommandProcessing_4
   \   000029   14           DEC       A
   \   00002A   601B         JZ        ??MT_AfCommandProcessing_5
   \   00002C   8063         SJMP      ??MT_AfCommandProcessing_6
    211            {
    212              case MT_AF_REGISTER:
    213                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   00002E                ; Setup parameters for call to function MT_AfRegister
   \   00002E   12....       LCALL     `??MT_AfRegister::?relay`; Banked call to: MT_AfRegister
    214                break;
   \   000031   8060         SJMP      ??MT_AfCommandProcessing_7
    215          
    216              case MT_AF_DATA_REQUEST:
    217              case MT_AF_DATA_REQUEST_EXT:
    218                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   000033                ; Setup parameters for call to function MT_AfDataRequest
   \   000033   12....       LCALL     `??MT_AfDataRequest::?relay`; Banked call to: MT_AfDataRequest
    219                break;
   \   000036   805B         SJMP      ??MT_AfCommandProcessing_7
    220          
    221          #if defined ( ZIGBEE_SOURCE_ROUTING )
    222              case MT_AF_DATA_REQUEST_SRCRTG:
    223                MT_AfDataRequestSrcRtg(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   000038                ; Setup parameters for call to function MT_AfDataRequestSrcRtg
   \   000038   12....       LCALL     `??MT_AfDataRequestSrcRtg::?relay`; Banked call to: MT_AfDataRequestSrcRtg
    224                break;
   \   00003B   8056         SJMP      ??MT_AfCommandProcessing_7
    225          #endif
    226          
    227          #if defined INTER_PAN
    228              case MT_AF_INTER_PAN_CTL:
    229                MT_AfInterPanCtl(pBuf);
    230                break;
    231          #endif
    232          
    233              case MT_AF_DATA_RETRIEVE:
    234                MT_AfDataRetrieve(pBuf);
   \                     ??MT_AfCommandProcessing_4:
   \   00003D                ; Setup parameters for call to function MT_AfDataRetrieve
   \   00003D   12....       LCALL     `??MT_AfDataRetrieve::?relay`; Banked call to: MT_AfDataRetrieve
    235                break;
   \   000040   8051         SJMP      ??MT_AfCommandProcessing_7
    236          
    237              case MT_AF_DATA_STORE:
    238                MT_AfDataStore(pBuf);
   \                     ??MT_AfCommandProcessing_3:
   \   000042                ; Setup parameters for call to function MT_AfDataStore
   \   000042   12....       LCALL     `??MT_AfDataStore::?relay`; Banked call to: MT_AfDataStore
    239                break;
   \   000045   804C         SJMP      ??MT_AfCommandProcessing_7
    240          
    241              case MT_AF_APSF_CONFIG_SET:
    242                MT_AfAPSF_ConfigSet(pBuf);
   \                     ??MT_AfCommandProcessing_5:
   \   000047   8A82         MOV       DPL,R2
   \   000049   8B83         MOV       DPH,R3
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   C0E0         PUSH      A
   \   000052   7401         MOV       A,#0x1
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   D0E0         POP       A
   \   000059   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   C0E0         PUSH      A
   \   000061   7402         MOV       A,#0x2
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   D0E0         POP       A
   \   000068   F0           MOVX      @DPTR,A
   \   000069                ; Setup parameters for call to function afAPSF_ConfigSet
   \   000069   7401         MOV       A,#0x1
   \   00006B   12....       LCALL     ?XSTACK_DISP101_8
   \   00006E   8882         MOV       DPL,R0
   \   000070   8983         MOV       DPH,R1
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F9           MOV       R1,A
   \   000077   12....       LCALL     `??afAPSF_ConfigSet::?relay`; Banked call to: afAPSF_ConfigSet
   \   00007A   E9           MOV       A,R1
   \   00007B   85..82       MOV       DPL,?XSP + 0
   \   00007E   85..83       MOV       DPH,?XSP + 1
   \   000081   F0           MOVX      @DPTR,A
   \   000082                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000082   AC..         MOV       R4,?XSP + 0
   \   000084   AD..         MOV       R5,?XSP + 1
   \   000086   7B01         MOV       R3,#0x1
   \   000088   7A13         MOV       R2,#0x13
   \   00008A   7964         MOV       R1,#0x64
   \   00008C   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    243                break;
   \   00008F   8002         SJMP      ??MT_AfCommandProcessing_7
    244          
    245              default:
    246                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_6:
   \   000091   7E02         MOV       R6,#0x2
    247                break;
    248            }
    249          
    250            return status;
   \                     ??MT_AfCommandProcessing_7:
   \   000093   EE           MOV       A,R6
   \   000094   F9           MOV       R1,A
   \   000095   7403         MOV       A,#0x3
   \   000097   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009A   02....       LJMP      ?Subroutine0 & 0xFFFF
    251          }
    252          
    253          /***************************************************************************************************
    254           * @fn      MT_AfRegister
    255           *
    256           * @brief   Process AF Register command
    257           *
    258           * @param   pBuf - pointer to the received buffer
    259           *
    260           * @return  none
    261           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    262          void MT_AfRegister(uint8 *pBuf)
   \                     MT_AfRegister:
    263          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    264            uint8 cmdId;
    265            uint8 retValue = ZMemError;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7410         MOV       A,#0x10
   \   000016   12....       LCALL     ?Subroutine23 & 0xFFFF
    266            endPointDesc_t *epDesc;
    267          
    268            /* parse header */
    269            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_37:
   \   000019   F5..         MOV       ?V2,A
    270            pBuf += MT_RPC_FRAME_HDR_SZ;
    271          
    272            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   7A06         MOV       R2,#0x6
   \   00001D   7B00         MOV       R3,#0x0
   \   00001F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000022   8A..         MOV       ?V4,R2
   \   000024   8B..         MOV       ?V5,R3
   \   000026   AE..         MOV       R6,?V4
   \   000028   AF..         MOV       R7,?V5
    273            if ( epDesc )
   \   00002A   EA           MOV       A,R2
   \   00002B   4F           ORL       A,R7
   \   00002C   603F         JZ        ??MT_AfRegister_0
    274            {
    275              epDesc->task_id = &MT_TaskID;
   \   00002E   8A82         MOV       DPL,R2
   \   000030   8B83         MOV       DPH,R3
   \   000032   A3           INC       DPTR
   \   000033   74..         MOV       A,#MT_TaskID & 0xff
   \   000035   F0           MOVX      @DPTR,A
   \   000036   A3           INC       DPTR
   \   000037   74..         MOV       A,#(MT_TaskID >> 8) & 0xff
   \   000039   F0           MOVX      @DPTR,A
    276              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
   \   00003A                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   00003A   EA           MOV       A,R2
   \   00003B   FC           MOV       R4,A
   \   00003C   EB           MOV       A,R3
   \   00003D   FD           MOV       R5,A
   \   00003E   E5..         MOV       A,?V0
   \   000040   2403         ADD       A,#0x3
   \   000042   FA           MOV       R2,A
   \   000043   E4           CLR       A
   \   000044   35..         ADDC      A,?V1
   \   000046   FB           MOV       R3,A
   \   000047   12....       LCALL     `??MT_BuildEndpointDesc::?relay`; Banked call to: MT_BuildEndpointDesc
   \   00004A   E9           MOV       A,R1
   \   00004B   85..82       MOV       DPL,?XSP + 0
   \   00004E   85..83       MOV       DPH,?XSP + 1
   \   000051   F0           MOVX      @DPTR,A
    277              if ( retValue == ZSuccess )
   \   000052   700F         JNZ       ??MT_AfRegister_1
    278              {
    279                retValue = afRegister( epDesc );
   \   000054                ; Setup parameters for call to function afRegister
   \   000054   EE           MOV       A,R6
   \   000055   FA           MOV       R2,A
   \   000056   EF           MOV       A,R7
   \   000057   FB           MOV       R3,A
   \   000058   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
   \   00005B   E9           MOV       A,R1
   \   00005C   85..82       MOV       DPL,?XSP + 0
   \   00005F   85..83       MOV       DPH,?XSP + 1
   \   000062   F0           MOVX      @DPTR,A
    280              }
    281          
    282              if ( retValue != ZSuccess )
   \                     ??MT_AfRegister_1:
   \   000063   E0           MOVX      A,@DPTR
   \   000064   6007         JZ        ??MT_AfRegister_0
    283              {
    284                osal_mem_free( epDesc );
   \   000066                ; Setup parameters for call to function osal_mem_free
   \   000066   EE           MOV       A,R6
   \   000067   FA           MOV       R2,A
   \   000068   EF           MOV       A,R7
   \   000069   FB           MOV       R3,A
   \   00006A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    285              }
    286            }
    287          
    288            /* Build and send back the response */
    289            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfRegister_0:
   \   00006D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00006D   AC..         MOV       R4,?XSP + 0
   \   00006F   AD..         MOV       R5,?XSP + 1
   \   000071   7B01         MOV       R3,#0x1
   \   000073   AA..         MOV       R2,?V2
   \   000075   7964         MOV       R1,#0x64
   \   000077   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    290          }
   \   00007A   7401         MOV       A,#0x1
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007F   7F06         MOV       R7,#0x6
   \   000081   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET
    291          
    292          /***************************************************************************************************
    293           * @fn      MT_AfDataRequest
    294           *
    295           * @brief   Process AF Register command
    296           *
    297           * @param   pBuf - pointer to the received buffer
    298           *
    299           * @return  none
    300           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    302          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8B..         MOV       ?V5,R3
    303            #define MT_AF_REQ_MSG_LEN  10
    304            #define MT_AF_REQ_MSG_EXT  10
    305          
    306            endPointDesc_t *epDesc;
    307            afAddrType_t dstAddr;
    308            cId_t cId;
    309            uint8 transId, txOpts, radius;
    310            uint8 cmd0, cmd1;
    311            uint8 retValue = ZFailure;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   12....       LCALL     ?Subroutine38 & 0xFFFF
    312            uint16 dataLen, tempLen;
    313          
    314            /* Parse header */
    315            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \                     ??CrossCallReturnLabel_60:
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V10,A
    316            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V7,A
    317            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000023   EA           MOV       A,R2
   \   000024   2403         ADD       A,#0x3
   \   000026   F5..         MOV       ?V4,A
   \   000028   5002         JNC       ??MT_AfDataRequest_0
   \   00002A   05..         INC       ?V5
    318          
    319            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_0:
   \   00002C   7402         MOV       A,#0x2
   \   00002E   65..         XRL       A,?V7
   \   000030   6003         JZ        $+5
   \   000032   02....       LJMP      ??MT_AfDataRequest_1 & 0xFFFF
    320            {
    321              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   000035   85..82       MOV       DPL,?V4
   \   000038   85..83       MOV       DPH,?V5
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F8           MOV       R0,A
   \   00003D   740A         MOV       A,#0xa
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   E8           MOV       A,R0
   \   000043   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000046   8582..       MOV       ?V4,DPL
   \   000049   8583..       MOV       ?V5,DPH
    322          
    323              if (dstAddr.addrMode == afAddr64Bit)
   \   00004C   7403         MOV       A,#0x3
   \   00004E   68           XRL       A,R0
   \   00004F   701F         JNZ       ??MT_AfDataRequest_2
    324              {
    325                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   000051                ; Setup parameters for call to function osal_memcpy
   \   000051   85....       MOV       ?V0,?V4
   \   000054   85....       MOV       ?V1,?V5
   \   000057   75..00       MOV       ?V2,#0x0
   \   00005A   78..         MOV       R0,#?V0
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005F   7C08         MOV       R4,#0x8
   \   000061   7D00         MOV       R5,#0x0
   \   000063   7405         MOV       A,#0x5
   \   000065   12....       LCALL     ?XSTACK_DISP101_8
   \   000068   12....       LCALL     ??Subroutine52_0 & 0xFFFF
    326              }
   \                     ??CrossCallReturnLabel_112:
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006E   8009         SJMP      ??CrossCallReturnLabel_87
    327              else
    328              {
    329                dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_2:
   \   000070   12....       LCALL     ?Subroutine8 & 0xFFFF
    330              }
   \                     ??CrossCallReturnLabel_11:
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   12....       LCALL     ?Subroutine30 & 0xFFFF
    331              pBuf += Z_EXTADDR_LEN;
    332          
    333              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_87:
   \   000079   85..82       MOV       DPL,?V4
   \   00007C   85..83       MOV       DPH,?V5
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   C0E0         PUSH      A
   \   00008A   740B         MOV       A,#0xb
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   D0E0         POP       A
   \   000091   F0           MOVX      @DPTR,A
   \   000092   E5..         MOV       A,?V4
   \   000094   2409         ADD       A,#0x9
   \   000096   F5..         MOV       ?V4,A
   \   000098   5002         JNC       ??MT_AfDataRequest_3
   \   00009A   05..         INC       ?V5
    334              dstAddr.panId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_3:
   \   00009C   F582         MOV       DPL,A
   \   00009E   85..83       MOV       DPH,?V5
   \   0000A1   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000A4   F9           MOV       R1,A
   \   0000A5   740C         MOV       A,#0xc
   \   0000A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AA   12....       LCALL     ?Subroutine30 & 0xFFFF
    335              pBuf += 2;
   \                     ??CrossCallReturnLabel_88:
   \   0000AD   E5..         MOV       A,?V4
   \   0000AF   2402         ADD       A,#0x2
   \   0000B1   F5..         MOV       ?V4,A
   \   0000B3   503D         JNC       ??MT_AfDataRequest_4
   \   0000B5   05..         INC       ?V5
   \   0000B7   8039         SJMP      ??MT_AfDataRequest_4
    336            }
    337            else
    338            {
    339              /* Destination address */
    340              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_1:
   \   0000B9   740A         MOV       A,#0xa
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   7402         MOV       A,#0x2
   \   0000C0   F0           MOVX      @DPTR,A
    341              dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000C1   85..82       MOV       DPL,?V4
   \   0000C4   85..83       MOV       DPH,?V5
   \   0000C7   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CD   EA           MOV       A,R2
   \   0000CE   F0           MOVX      @DPTR,A
   \   0000CF   A3           INC       DPTR
   \   0000D0   E9           MOV       A,R1
   \   0000D1   12....       LCALL     ?Subroutine25 & 0xFFFF
    342              pBuf += 2;
    343          
    344              /* Destination endpoint */
    345              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_40:
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   C0E0         PUSH      A
   \   0000D7   740B         MOV       A,#0xb
   \   0000D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DC   D0E0         POP       A
   \   0000DE   F0           MOVX      @DPTR,A
   \   0000DF   E5..         MOV       A,?V4
   \   0000E1   2403         ADD       A,#0x3
   \   0000E3   F5..         MOV       ?V4,A
   \   0000E5   5002         JNC       ??MT_AfDataRequest_5
   \   0000E7   05..         INC       ?V5
    346              dstAddr.panId = 0;
   \                     ??MT_AfDataRequest_5:
   \   0000E9   740C         MOV       A,#0xc
   \   0000EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EE   E4           CLR       A
   \   0000EF   F0           MOVX      @DPTR,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   F0           MOVX      @DPTR,A
    347            }
    348          
    349            /* Source endpoint */
    350            epDesc = afFindEndPointDesc(*pBuf++);
   \                     ??MT_AfDataRequest_4:
   \   0000F2                ; Setup parameters for call to function afFindEndPointDesc
   \   0000F2   85..82       MOV       DPL,?V4
   \   0000F5   85..83       MOV       DPH,?V5
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   F9           MOV       R1,A
   \   0000FA   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000FD   8A..         MOV       ?V8,R2
   \   0000FF   8B..         MOV       ?V9,R3
   \   000101   85..82       MOV       DPL,?V4
   \   000104   85..83       MOV       DPH,?V5
   \   000107   A3           INC       DPTR
   \   000108   8582..       MOV       ?V4,DPL
   \   00010B   8583..       MOV       ?V5,DPH
    351          
    352            /* ClusterId */
    353            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00010E   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000111   F5..         MOV       ?V0,A
   \   000113   E4           CLR       A
   \   000114   39           ADDC      A,R1
   \   000115   F5..         MOV       ?V1,A
    354            pBuf +=2;
    355          
    356            /* TransId */
    357            transId = *pBuf++;
   \   000117   85..82       MOV       DPL,?V4
   \   00011A   85..83       MOV       DPH,?V5
   \   00011D   A3           INC       DPTR
   \   00011E   A3           INC       DPTR
   \   00011F   E0           MOVX      A,@DPTR
   \   000120   C0E0         PUSH      A
   \   000122   7401         MOV       A,#0x1
   \   000124   12....       LCALL     ?XSTACK_DISP0_8
   \   000127   D0E0         POP       A
   \   000129   12....       LCALL     ?Subroutine25 & 0xFFFF
    358          
    359            /* TxOption */
    360            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_41:
   \   00012C   A3           INC       DPTR
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   F5..         MOV       ?V3,A
    361          
    362            /* Radius */
    363            radius = *pBuf++;
   \   000130   85..82       MOV       DPL,?V4
   \   000133   85..83       MOV       DPH,?V5
   \   000136   A3           INC       DPTR
   \   000137   A3           INC       DPTR
   \   000138   A3           INC       DPTR
   \   000139   A3           INC       DPTR
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   F5..         MOV       ?V2,A
   \   00013D   E5..         MOV       A,?V4
   \   00013F   2405         ADD       A,#0x5
   \   000141   F5..         MOV       ?V4,A
   \   000143   5002         JNC       ??MT_AfDataRequest_6
   \   000145   05..         INC       ?V5
    364          
    365            /* Length */
    366            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_6:
   \   000147   7402         MOV       A,#0x2
   \   000149   65..         XRL       A,?V7
   \   00014B   85..82       MOV       DPL,?V4
   \   00014E   85..83       MOV       DPH,?V5
   \   000151   701A         JNZ       ??MT_AfDataRequest_7
    367            {
    368              dataLen = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000153   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000156   FE           MOV       R6,A
   \   000157   E4           CLR       A
   \   000158   39           ADDC      A,R1
   \   000159   FF           MOV       R7,A
    369              tempLen = dataLen + MT_AF_REQ_MSG_LEN + MT_AF_REQ_MSG_EXT;
   \   00015A   EA           MOV       A,R2
   \   00015B   2414         ADD       A,#0x14
   \   00015D   F8           MOV       R0,A
   \   00015E   E4           CLR       A
   \   00015F   3F           ADDC      A,R7
   \   000160   F9           MOV       R1,A
    370              pBuf += 2;
   \   000161   E5..         MOV       A,?V4
   \   000163   2402         ADD       A,#0x2
   \   000165   F5..         MOV       ?V4,A
   \   000167   5016         JNC       ??MT_AfDataRequest_8
   \   000169   05..         INC       ?V5
   \   00016B   8012         SJMP      ??MT_AfDataRequest_8
    371            }
    372            else
    373            {
    374              dataLen = *pBuf++;
   \                     ??MT_AfDataRequest_7:
   \   00016D   E0           MOVX      A,@DPTR
   \   00016E   FE           MOV       R6,A
   \   00016F   7F00         MOV       R7,#0x0
   \   000171   A3           INC       DPTR
   \   000172   8582..       MOV       ?V4,DPL
   \   000175   8583..       MOV       ?V5,DPH
    375              tempLen = dataLen + MT_AF_REQ_MSG_LEN;
   \   000178   240A         ADD       A,#0xa
   \   00017A   F8           MOV       R0,A
   \   00017B   E4           CLR       A
   \   00017C   3400         ADDC      A,#0x0
   \   00017E   F9           MOV       R1,A
    376            }
    377          
    378            if ( epDesc == NULL )
   \                     ??MT_AfDataRequest_8:
   \   00017F   E5..         MOV       A,?V8
   \   000181   4B           ORL       A,R3
   \   000182   6011         JZ        ??MT_AfDataRequest_9
    379            {
    380              retValue = afStatus_INVALID_PARAMETER;
    381            }
    382            else if (tempLen > (uint16)MT_RPC_DATA_MAX)
   \   000184   C3           CLR       C
   \   000185   E8           MOV       A,R0
   \   000186   94FB         SUBB      A,#-0x5
   \   000188   E9           MOV       A,R1
   \   000189   9400         SUBB      A,#0x0
   \   00018B   5003         JNC       $+5
   \   00018D   02....       LJMP      ??MT_AfDataRequest_10 & 0xFFFF
    383            {
    384              if (pMtAfDataReq != NULL)
   \   000190   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000193   600B         JZ        ??MT_AfDataRequest_11
    385              {
    386                retValue = afStatus_INVALID_PARAMETER;
   \                     ??MT_AfDataRequest_9:
   \   000195   85..82       MOV       DPL,?XSP + 0
   \   000198   85..83       MOV       DPH,?XSP + 1
   \   00019B   7402         MOV       A,#0x2
   \   00019D   02....       LJMP      ??MT_AfDataRequest_12 & 0xFFFF
    387              }
    388              else if ((pMtAfDataReq = osal_mem_alloc(sizeof(mtAfDataReq_t) + dataLen)) == NULL)
   \                     ??MT_AfDataRequest_11:
   \   0001A0                ; Setup parameters for call to function osal_mem_alloc
   \   0001A0   EE           MOV       A,R6
   \   0001A1   2418         ADD       A,#0x18
   \   0001A3   FA           MOV       R2,A
   \   0001A4   E4           CLR       A
   \   0001A5   3F           ADDC      A,R7
   \   0001A6   FB           MOV       R3,A
   \   0001A7   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0001AA   90....       MOV       DPTR,#pMtAfDataReq
   \   0001AD   EA           MOV       A,R2
   \   0001AE   F0           MOVX      @DPTR,A
   \   0001AF   A3           INC       DPTR
   \   0001B0   EB           MOV       A,R3
   \   0001B1   F0           MOVX      @DPTR,A
   \   0001B2   F9           MOV       R1,A
   \   0001B3   EA           MOV       A,R2
   \   0001B4   49           ORL       A,R1
   \   0001B5   85..82       MOV       DPL,?XSP + 0
   \   0001B8   85..83       MOV       DPH,?XSP + 1
   \   0001BB   7005         JNZ       ??MT_AfDataRequest_13
    389              {
    390                retValue = afStatus_MEM_FAIL;
   \   0001BD   7410         MOV       A,#0x10
   \   0001BF   02....       LJMP      ??MT_AfDataRequest_12 & 0xFFFF
    391              }
    392              else
    393              {
    394                retValue = afStatus_SUCCESS;
   \                     ??MT_AfDataRequest_13:
   \   0001C2   E4           CLR       A
   \   0001C3   F0           MOVX      @DPTR,A
    395          
    396                pMtAfDataReq->data = (uint8 *)(pMtAfDataReq+1);
   \   0001C4   90....       MOV       DPTR,#pMtAfDataReq
   \   0001C7   E0           MOVX      A,@DPTR
   \   0001C8   2418         ADD       A,#0x18
   \   0001CA   FA           MOV       R2,A
   \   0001CB   A3           INC       DPTR
   \   0001CC   E0           MOVX      A,@DPTR
   \   0001CD   3400         ADDC      A,#0x0
   \   0001CF   FB           MOV       R3,A
   \   0001D0   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0001D3   EA           MOV       A,R2
   \   0001D4   F0           MOVX      @DPTR,A
   \   0001D5   A3           INC       DPTR
   \   0001D6   EB           MOV       A,R3
   \   0001D7   F0           MOVX      @DPTR,A
    397                (void)osal_memcpy(&(pMtAfDataReq->dstAddr), &dstAddr, sizeof(afAddrType_t));
   \   0001D8                ; Setup parameters for call to function osal_memcpy
   \   0001D8   7402         MOV       A,#0x2
   \   0001DA   12....       LCALL     ?XSTACK_DISP100_8
   \   0001DD   88..         MOV       ?V4,R0
   \   0001DF   89..         MOV       ?V5,R1
   \   0001E1   75..00       MOV       ?V6,#0x0
   \   0001E4   78..         MOV       R0,#?V4
   \   0001E6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001E9   7C0C         MOV       R4,#0xc
   \   0001EB   7D00         MOV       R5,#0x0
   \   0001ED   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0001F0   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   0001F3   12....       LCALL     ?DEALLOC_XSTACK8
    398                pMtAfDataReq->epDesc = epDesc;
   \   0001F6   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0001F9   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0001FC   E5..         MOV       A,?V8
   \   0001FE   F0           MOVX      @DPTR,A
   \   0001FF   A3           INC       DPTR
   \   000200   E5..         MOV       A,?V9
   \   000202   12....       LCALL     ?Subroutine7 & 0xFFFF
    399                pMtAfDataReq->cId = cId;
   \                     ??CrossCallReturnLabel_93:
   \   000205   2410         ADD       A,#0x10
   \   000207   F582         MOV       DPL,A
   \   000209   E4           CLR       A
   \   00020A   38           ADDC      A,R0
   \   00020B   F583         MOV       DPH,A
   \   00020D   E5..         MOV       A,?V0
   \   00020F   F0           MOVX      @DPTR,A
   \   000210   A3           INC       DPTR
   \   000211   E5..         MOV       A,?V1
   \   000213   12....       LCALL     ?Subroutine7 & 0xFFFF
    400                pMtAfDataReq->dataLen = dataLen;
   \                     ??CrossCallReturnLabel_94:
   \   000216   2412         ADD       A,#0x12
   \   000218   F582         MOV       DPL,A
   \   00021A   E4           CLR       A
   \   00021B   38           ADDC      A,R0
   \   00021C   F583         MOV       DPH,A
   \   00021E   EE           MOV       A,R6
   \   00021F   F0           MOVX      @DPTR,A
   \   000220   A3           INC       DPTR
   \   000221   EF           MOV       A,R7
   \   000222   F0           MOVX      @DPTR,A
    401                pMtAfDataReq->transId = transId;
   \   000223   7401         MOV       A,#0x1
   \   000225   12....       LCALL     ?XSTACK_DISP0_8
   \   000228   E0           MOVX      A,@DPTR
   \   000229   C0E0         PUSH      A
   \   00022B   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00022E   2414         ADD       A,#0x14
   \   000230   F582         MOV       DPL,A
   \   000232   E4           CLR       A
   \   000233   38           ADDC      A,R0
   \   000234   F583         MOV       DPH,A
   \   000236   D0E0         POP       A
   \   000238   12....       LCALL     ?Subroutine7 & 0xFFFF
    402                pMtAfDataReq->txOpts = txOpts;
   \                     ??CrossCallReturnLabel_95:
   \   00023B   2415         ADD       A,#0x15
   \   00023D   F582         MOV       DPL,A
   \   00023F   E4           CLR       A
   \   000240   38           ADDC      A,R0
   \   000241   F583         MOV       DPH,A
   \   000243   E5..         MOV       A,?V3
   \   000245   12....       LCALL     ?Subroutine7 & 0xFFFF
    403                pMtAfDataReq->radius = radius;
   \                     ??CrossCallReturnLabel_96:
   \   000248   2416         ADD       A,#0x16
   \   00024A   F582         MOV       DPL,A
   \   00024C   E4           CLR       A
   \   00024D   38           ADDC      A,R0
   \   00024E   F583         MOV       DPH,A
   \   000250   E5..         MOV       A,?V2
   \   000252   12....       LCALL     ?Subroutine5 & 0xFFFF
    404          
    405                // Setup to time-out the huge outgoing item if host does not MT_AF_DATA_STORE it.
    406                pMtAfDataReq->tick = MT_AF_EXEC_CNT;
   \                     ??CrossCallReturnLabel_6:
   \   000255   12....       LCALL     ?Subroutine12 & 0xFFFF
    407                if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??CrossCallReturnLabel_90:
   \   000258   6046         JZ        ??MT_AfDataRequest_14
    408                {
    409                  (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00025A                ; Setup parameters for call to function osal_set_event
   \   00025A   12....       LCALL     ?Subroutine20 & 0xFFFF
    410                }
    411              }
    412            }
   \                     ??CrossCallReturnLabel_31:
   \   00025D   8041         SJMP      ??MT_AfDataRequest_14
    413            else
    414            {
    415              retValue = AF_DataRequest(&dstAddr, epDesc, cId, dataLen, pBuf, &transId, txOpts, radius);
   \                     ??MT_AfDataRequest_10:
   \   00025F                ; Setup parameters for call to function AF_DataRequest
   \   00025F   78..         MOV       R0,#?V2
   \   000261   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000264   7402         MOV       A,#0x2
   \   000266   12....       LCALL     ?XSTACK_DISP100_8
   \   000269   88..         MOV       ?V12,R0
   \   00026B   89..         MOV       ?V13,R1
   \   00026D   78..         MOV       R0,#?V12
   \   00026F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000272   78..         MOV       R0,#?V4
   \   000274   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000277   8E..         MOV       ?V4,R6
   \   000279   8F..         MOV       ?V5,R7
   \   00027B   78..         MOV       R0,#?V4
   \   00027D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000280   78..         MOV       R0,#?V0
   \   000282   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000285   A9..         MOV       R1,?V3
   \   000287   AC..         MOV       R4,?V8
   \   000289   AD..         MOV       R5,?V9
   \   00028B   740B         MOV       A,#0xb
   \   00028D   12....       LCALL     ?XSTACK_DISP101_8
   \   000290   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000293   7409         MOV       A,#0x9
   \   000295   12....       LCALL     ?DEALLOC_XSTACK8
   \   000298   E9           MOV       A,R1
   \   000299   85..82       MOV       DPL,?XSP + 0
   \   00029C   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_AfDataRequest_12:
   \   00029F   F0           MOVX      @DPTR,A
    416            }
    417          
    418            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??MT_AfDataRequest_14:
   \   0002A0   74E0         MOV       A,#-0x20
   \   0002A2   55..         ANL       A,?V10
   \   0002A4   6420         XRL       A,#0x20
   \   0002A6   700D         JNZ       ??MT_AfDataRequest_15
    419            {
    420              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   0002A8                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0002A8   AC..         MOV       R4,?XSP + 0
   \   0002AA   AD..         MOV       R5,?XSP + 1
   \   0002AC   7B01         MOV       R3,#0x1
   \   0002AE   AA..         MOV       R2,?V7
   \   0002B0   7964         MOV       R1,#0x64
   \   0002B2   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    421            }
    422          }
   \                     ??MT_AfDataRequest_15:
   \   0002B5   740E         MOV       A,#0xe
   \   0002B7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002BA   7F0E         MOV       R7,#0xe
   \   0002BC   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine45_0
   \   000001                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   740F         MOV       A,#0xf
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function osal_start_timerEx
   \   000003                ; Setup parameters for call to function osal_start_timerEx
   \   000003                REQUIRE ??Subroutine46_0
   \   000003                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   C8           XCH       A,R0
   \   000006   F9           MOV       R1,A
   \   000007   EA           MOV       A,R2
   \   000008   28           ADD       A,R0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine47_0
   \   000001                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000003   C8           XCH       A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   F9           MOV       R1,A
   \   000004   7402         MOV       A,#0x2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   240E         ADD       A,#0xe
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2402         ADD       A,#0x2
   \   000006   FA           MOV       R2,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   3400         ADDC      A,#0x0
   \   00000B   FB           MOV       R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET
    423          
    424          #if defined ( ZIGBEE_SOURCE_ROUTING )
    425          
    426          /***************************************************************************************************
    427           * @fn      MT_AfDataRequestSrcRtg
    428           *
    429           * @brief   Process AF Register command
    430           *
    431           * @param   pBuf - pointer to the received buffer
    432           *
    433           * @return  none
    434           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    435          void MT_AfDataRequestSrcRtg(uint8 *pBuf)
   \                     MT_AfDataRequestSrcRtg:
    436          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EB           MOV       A,R3
   \   00000B   FF           MOV       R7,A
    437            uint8 cmdId, dataLen = 0;
    438            uint8 retValue = ZFailure;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   12....       LCALL     ?Subroutine23 & 0xFFFF
    439            endPointDesc_t *epDesc;
    440            byte transId;
    441            afAddrType_t dstAddr;
    442            cId_t cId;
    443            byte txOpts, radius, srcEP, relayCnt;
    444            uint16 *pRelayList;
    445            uint8 i;
    446          
    447            /* parse header */
    448            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_38:
   \   000017   F5..         MOV       ?V6,A
    449            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000019   EA           MOV       A,R2
   \   00001A   2403         ADD       A,#0x3
   \   00001C   FE           MOV       R6,A
   \   00001D   5001         JNC       ??MT_AfDataRequestSrcRtg_0
   \   00001F   0F           INC       R7
    450          
    451            /* Destination address */
    452            /* Initialize the panID field to zero to avoid inter-pan */
    453            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) );
   \                     ??MT_AfDataRequestSrcRtg_0:
   \   000020                ; Setup parameters for call to function osal_memset
   \   000020   7C0C         MOV       R4,#0xc
   \   000022   7D00         MOV       R5,#0x0
   \   000024   7900         MOV       R1,#0x0
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP101_8
   \   00002B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    454            dstAddr.addrMode = afAddr16Bit;
   \   00002E   740A         MOV       A,#0xa
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   7402         MOV       A,#0x2
   \   000035   F0           MOVX      @DPTR,A
    455            dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000036   8E82         MOV       DPL,R6
   \   000038   8F83         MOV       DPH,R7
   \   00003A   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?Subroutine30 & 0xFFFF
    456            pBuf += 2;
    457          
    458            /* Destination endpoint */
    459            dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_89:
   \   000043   8E82         MOV       DPL,R6
   \   000045   8F83         MOV       DPH,R7
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   C0E0         PUSH      A
   \   00004C   740B         MOV       A,#0xb
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   D0E0         POP       A
   \   000053   12....       LCALL     ?Subroutine26 & 0xFFFF
    460          
    461            /* Source endpoint */
    462            srcEP = *pBuf++;
   \                     ??CrossCallReturnLabel_42:
   \   000056   F9           MOV       R1,A
   \   000057   EE           MOV       A,R6
   \   000058   2404         ADD       A,#0x4
   \   00005A   FE           MOV       R6,A
   \   00005B   5001         JNC       ??MT_AfDataRequestSrcRtg_1
   \   00005D   0F           INC       R7
    463            epDesc = afFindEndPointDesc( srcEP );
   \                     ??MT_AfDataRequestSrcRtg_1:
   \   00005E                ; Setup parameters for call to function afFindEndPointDesc
   \   00005E   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000061   8A..         MOV       ?V2,R2
   \   000063   8B..         MOV       ?V3,R3
    464          
    465            /* ClusterId */
    466            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000065   8E82         MOV       DPL,R6
   \   000067   8F83         MOV       DPH,R7
   \   000069   12....       LCALL     ?Subroutine3 & 0xFFFF
    467            pBuf +=2;
    468          
    469            /* TransId */
    470            transId = *pBuf++;
   \                     ??CrossCallReturnLabel_2:
   \   00006C   8E82         MOV       DPL,R6
   \   00006E   8F83         MOV       DPH,R7
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   E0           MOVX      A,@DPTR
   \   000073   C0E0         PUSH      A
   \   000075   7401         MOV       A,#0x1
   \   000077   12....       LCALL     ?XSTACK_DISP0_8
   \   00007A   D0E0         POP       A
   \   00007C   12....       LCALL     ?Subroutine26 & 0xFFFF
    471          
    472            /* TxOption */
    473            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_43:
   \   00007F   F5..         MOV       ?V7,A
    474          
    475            /* Radius */
    476            radius = *pBuf++;
   \   000081   8E82         MOV       DPL,R6
   \   000083   8F83         MOV       DPH,R7
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   F5..         MOV       ?V8,A
    477          
    478            /* Source route relay count */
    479            relayCnt = *pBuf++;
   \   00008C   8E82         MOV       DPL,R6
   \   00008E   8F83         MOV       DPH,R7
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   E0           MOVX      A,@DPTR
   \   000096   F5..         MOV       ?V9,A
   \   000098   EE           MOV       A,R6
   \   000099   2406         ADD       A,#0x6
   \   00009B   FE           MOV       R6,A
   \   00009C   5001         JNC       ??MT_AfDataRequestSrcRtg_2
   \   00009E   0F           INC       R7
    480          
    481            /* Convert the source route relay list */
    482            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
   \                     ??MT_AfDataRequestSrcRtg_2:
   \   00009F                ; Setup parameters for call to function osal_mem_alloc
   \   00009F   AA..         MOV       R2,?V9
   \   0000A1   EA           MOV       A,R2
   \   0000A2   2A           ADD       A,R2
   \   0000A3   FA           MOV       R2,A
   \   0000A4   E4           CLR       A
   \   0000A5   33           RLC       A
   \   0000A6   FB           MOV       R3,A
   \   0000A7   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000AA   8A..         MOV       ?V0,R2
   \   0000AC   8B..         MOV       ?V1,R3
   \   0000AE   EA           MOV       A,R2
   \   0000AF   4B           ORL       A,R3
   \   0000B0   7003         JNZ       $+5
   \   0000B2   02....       LJMP      ??MT_AfDataRequestSrcRtg_3 & 0xFFFF
    483            {
    484              for( i = 0; i < relayCnt; i++ )
   \   0000B5   7A00         MOV       R2,#0x0
   \   0000B7   8029         SJMP      ??MT_AfDataRequestSrcRtg_4
    485              {
    486                pRelayList[i]  = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_AfDataRequestSrcRtg_5:
   \   0000B9   FC           MOV       R4,A
   \   0000BA   A3           INC       DPTR
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   F8           MOV       R0,A
   \   0000BD   E4           CLR       A
   \   0000BE   C8           XCH       A,R0
   \   0000BF   F9           MOV       R1,A
   \   0000C0   EC           MOV       A,R4
   \   0000C1   28           ADD       A,R0
   \   0000C2   E4           CLR       A
   \   0000C3   39           ADDC      A,R1
   \   0000C4   FD           MOV       R5,A
   \   0000C5   EA           MOV       A,R2
   \   0000C6   25E0         ADD       A,0xE0 /* A   */
   \   0000C8   F8           MOV       R0,A
   \   0000C9   E4           CLR       A
   \   0000CA   33           RLC       A
   \   0000CB   F9           MOV       R1,A
   \   0000CC   E5..         MOV       A,?V0
   \   0000CE   28           ADD       A,R0
   \   0000CF   F582         MOV       DPL,A
   \   0000D1   EB           MOV       A,R3
   \   0000D2   39           ADDC      A,R1
   \   0000D3   F583         MOV       DPH,A
   \   0000D5   EC           MOV       A,R4
   \   0000D6   F0           MOVX      @DPTR,A
   \   0000D7   A3           INC       DPTR
   \   0000D8   ED           MOV       A,R5
   \   0000D9   F0           MOVX      @DPTR,A
    487                pBuf += 2;
   \   0000DA   EE           MOV       A,R6
   \   0000DB   2402         ADD       A,#0x2
   \   0000DD   FE           MOV       R6,A
   \   0000DE   5001         JNC       ??MT_AfDataRequestSrcRtg_6
   \   0000E0   0F           INC       R7
    488              }
   \                     ??MT_AfDataRequestSrcRtg_6:
   \   0000E1   0A           INC       R2
   \                     ??MT_AfDataRequestSrcRtg_4:
   \   0000E2   EA           MOV       A,R2
   \   0000E3   C3           CLR       C
   \   0000E4   95..         SUBB      A,?V9
   \   0000E6   8E82         MOV       DPL,R6
   \   0000E8   8F83         MOV       DPH,R7
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   40CC         JC        ??MT_AfDataRequestSrcRtg_5
    489          
    490              /* Data payload Length */
    491              dataLen = *pBuf++;
   \   0000ED   FA           MOV       R2,A
   \   0000EE   A3           INC       DPTR
   \   0000EF   AE82         MOV       R6,DPL
   \   0000F1   AF83         MOV       R7,DPH
    492          
    493              if ( epDesc == NULL )
   \   0000F3   E5..         MOV       A,?V2
   \   0000F5   45..         ORL       A,?V3
   \   0000F7   700A         JNZ       ??MT_AfDataRequestSrcRtg_7
    494              {
    495                retValue = afStatus_INVALID_PARAMETER;
   \   0000F9   85..82       MOV       DPL,?XSP + 0
   \   0000FC   85..83       MOV       DPH,?XSP + 1
   \   0000FF   7402         MOV       A,#0x2
   \   000101   8050         SJMP      ??MT_AfDataRequestSrcRtg_8
    496              }
    497              else
    498              {
    499                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf,
    500                                               &transId, txOpts, radius, relayCnt, pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_7:
   \   000103                ; Setup parameters for call to function AF_DataRequestSrcRtg
   \   000103   78..         MOV       R0,#?V0
   \   000105   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000108   78..         MOV       R0,#?V9
   \   00010A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00010D   78..         MOV       R0,#?V8
   \   00010F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000112   7405         MOV       A,#0x5
   \   000114   12....       LCALL     ?XSTACK_DISP100_8
   \   000117   88..         MOV       ?V8,R0
   \   000119   89..         MOV       ?V9,R1
   \   00011B   78..         MOV       R0,#?V8
   \   00011D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000120   8E..         MOV       ?V8,R6
   \   000122   8F..         MOV       ?V9,R7
   \   000124   78..         MOV       R0,#?V8
   \   000126   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000129   EA           MOV       A,R2
   \   00012A   F5..         MOV       ?V8,A
   \   00012C   75..00       MOV       ?V9,#0x0
   \   00012F   78..         MOV       R0,#?V8
   \   000131   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000134   78..         MOV       R0,#?V4
   \   000136   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000139   A9..         MOV       R1,?V7
   \   00013B   AC..         MOV       R4,?V2
   \   00013D   AD..         MOV       R5,?V3
   \   00013F   740E         MOV       A,#0xe
   \   000141   12....       LCALL     ?XSTACK_DISP101_8
   \   000144   12....       LCALL     `??AF_DataRequestSrcRtg::?relay`; Banked call to: AF_DataRequestSrcRtg
   \   000147   740C         MOV       A,#0xc
   \   000149   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014C   E9           MOV       A,R1
   \   00014D   85..82       MOV       DPL,?XSP + 0
   \   000150   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_AfDataRequestSrcRtg_8:
   \   000153   F0           MOVX      @DPTR,A
    501              }
    502          
    503              /* Free the memory allocated */
    504              osal_mem_free( pRelayList );
   \   000154                ; Setup parameters for call to function osal_mem_free
   \   000154   AA..         MOV       R2,?V0
   \   000156   AB..         MOV       R3,?V1
   \   000158   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00015B   8009         SJMP      ??MT_AfDataRequestSrcRtg_9
    505            }
    506            else
    507            {
    508              retValue = afStatus_MEM_FAIL;
   \                     ??MT_AfDataRequestSrcRtg_3:
   \   00015D   85..82       MOV       DPL,?XSP + 0
   \   000160   85..83       MOV       DPH,?XSP + 1
   \   000163   7410         MOV       A,#0x10
   \   000165   F0           MOVX      @DPTR,A
    509            }
    510          
    511          
    512            /* Build and send back the response */
    513            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfDataRequestSrcRtg_9:
   \   000166                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000166   AC..         MOV       R4,?XSP + 0
   \   000168   AD..         MOV       R5,?XSP + 1
   \   00016A   7B01         MOV       R3,#0x1
   \   00016C   AA..         MOV       R2,?V6
   \   00016E   7964         MOV       R1,#0x64
   \   000170   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    514          }
   \   000173   740E         MOV       A,#0xe
   \   000175   12....       LCALL     ?DEALLOC_XSTACK8
   \   000178   7F0C         MOV       R7,#0xc
   \   00017A   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003   F5..         MOV       ?V4,A
   \   000005   E4           CLR       A
   \   000006   39           ADDC      A,R1
   \   000007   F5..         MOV       ?V5,A
   \   000009   22           RET
    515          #endif
    516          
    517          #if defined INTER_PAN
    518          /***************************************************************************************************
    519           * @fn      MT_AfInterPanCtl
    520           *
    521           * @brief   Process the AF Inter Pan control command.
    522           *
    523           * @param   pBuf - pointer to the received buffer
    524           *
    525           * @return  none
    526           ***************************************************************************************************/
    527          static void MT_AfInterPanCtl(uint8 *pBuf)
    528          {
    529            uint8 cmd, rtrn;
    530            uint16 panId;
    531            endPointDesc_t *pEP;
    532          
    533            cmd = pBuf[MT_RPC_POS_CMD1];
    534            pBuf += MT_RPC_FRAME_HDR_SZ;
    535          
    536            switch (*pBuf++)  // Inter-pan request parameter.
    537            {
    538            case InterPanClr:
    539              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
    540              break;
    541          
    542            case InterPanSet:
    543              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
    544              break;
    545          
    546            case InterPanReg:
    547              if ((pEP = afFindEndPointDesc(*pBuf)))
    548              {
    549                StubAPS_RegisterApp(pEP);
    550                rtrn = SUCCESS;
    551              }
    552              else
    553              {
    554                rtrn = FAILURE;
    555              }
    556              break;
    557          
    558            case InterPanChk:
    559              panId = BUILD_UINT16(pBuf[0], pBuf[1]);
    560              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
    561              break;
    562          
    563            default:
    564              rtrn = afStatus_INVALID_PARAMETER;
    565              break;
    566            }
    567          
    568            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
    569          }
    570          #endif
    571          
    572          /***************************************************************************************************
    573           * @fn      MT_AfDataConfirm
    574           *
    575           * @brief   Process
    576           *
    577           * @param   pBuf - pointer to the received buffer
    578           *
    579           * @return  none
    580           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    581          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    582          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    583            uint8 retArray[3];
    584          
    585            retArray[0] = pMsg->hdr.status;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   85..83       MOV       DPH,?XSP + 1
   \   000015   12....       LCALL     ?Subroutine23 & 0xFFFF
    586            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_39:
   \   000018   C0E0         PUSH      A
   \   00001A   7401         MOV       A,#0x1
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   D0E0         POP       A
   \   000021   12....       LCALL     ?Subroutine29 & 0xFFFF
    587            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_49:
   \   000024   E0           MOVX      A,@DPTR
   \   000025   C0E0         PUSH      A
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   D0E0         POP       A
   \   00002E   F0           MOVX      @DPTR,A
    588          
    589            /* Build and send back the response */
    590            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \   00002F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00002F   AC..         MOV       R4,?XSP + 0
   \   000031   AD..         MOV       R5,?XSP + 1
   \   000033   7B03         MOV       R3,#0x3
   \   000035   7A80         MOV       R2,#-0x80
   \   000037   7944         MOV       R1,#0x44
   \   000039   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    591          }
   \   00003C   7403         MOV       A,#0x3
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   D083         POP       DPH
   \   000043   D082         POP       DPL
   \   000045   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET
    592          
    593          /***************************************************************************************************
    594           * @fn          MT_AfIncomingMsg
    595           *
    596           * @brief       Process the callback subscription for AF Incoming data.
    597           *
    598           * @param       pkt - Incoming AF data.
    599           *
    600           * @return      none
    601           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    602          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    603          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV       A,#-0x17
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
    604            #define MT_AF_INC_MSG_LEN  17
    605            #define MT_AF_INC_MSG_EXT  10
    606          
    607            uint16 dataLen = pMsg->cmd.DataLength;  // Length of the data section in the response packet.
   \   000009   EA           MOV       A,R2
   \   00000A   2420         ADD       A,#0x20
   \   00000C   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F5..         MOV       ?V0,A
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F5..         MOV       ?V1,A
    608            uint16 respLen = MT_AF_INC_MSG_LEN + dataLen;
   \   000016   E5..         MOV       A,?V0
   \   000018   2411         ADD       A,#0x11
   \   00001A   FE           MOV       R6,A
   \   00001B   E4           CLR       A
   \   00001C   35..         ADDC      A,?V1
   \   00001E   FF           MOV       R7,A
    609            uint8 cmd = MT_AF_INCOMING_MSG;
   \   00001F   75..81       MOV       ?V14,#-0x7f
    610            uint8 *pRsp, *pTmp;
    611            mtAfInMsgList_t *pItem = NULL;
   \   000022   75..00       MOV       ?V10,#0x0
   \   000025   75..00       MOV       ?V11,#0x0
    612          
    613          #if defined INTER_PAN
    614            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
    615            {
    616              cmd = MT_AF_INCOMING_MSG_EXT;
    617            }
    618            else
    619          #endif
    620            if ((pMsg->srcAddr.addrMode == afAddr64Bit) ||
    621                (respLen > (uint16)(MT_RPC_DATA_MAX - MT_AF_INC_MSG_EXT)))
   \   000028   EA           MOV       A,R2
   \   000029   240E         ADD       A,#0xe
   \   00002B   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6403         XRL       A,#0x3
   \   000031   6009         JZ        ??MT_AfIncomingMsg_0
   \   000033   C3           CLR       C
   \   000034   EE           MOV       A,R6
   \   000035   94F1         SUBB      A,#-0xf
   \   000037   EF           MOV       A,R7
   \   000038   9400         SUBB      A,#0x0
   \   00003A   400A         JC        ??MT_AfIncomingMsg_1
    622            {
    623              cmd = MT_AF_INCOMING_MSG_EXT;
   \                     ??MT_AfIncomingMsg_0:
   \   00003C   75..82       MOV       ?V14,#-0x7e
    624            }
    625          
    626            if (cmd == MT_AF_INCOMING_MSG_EXT)
    627            {
    628              respLen += MT_AF_INC_MSG_EXT;
   \   00003F   EE           MOV       A,R6
   \   000040   240A         ADD       A,#0xa
   \   000042   FE           MOV       R6,A
   \   000043   E4           CLR       A
   \   000044   3F           ADDC      A,R7
   \   000045   FF           MOV       R7,A
    629            }
    630          
    631            if (respLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfIncomingMsg_1:
   \   000046   C3           CLR       C
   \   000047   EE           MOV       A,R6
   \   000048   94FB         SUBB      A,#-0x5
   \   00004A   EF           MOV       A,R7
   \   00004B   9400         SUBB      A,#0x0
   \   00004D   4032         JC        ??MT_AfIncomingMsg_2
    632            {
    633              if ((pItem = (mtAfInMsgList_t *)osal_mem_alloc(sizeof(mtAfInMsgList_t) + dataLen)) == NULL)
   \   00004F                ; Setup parameters for call to function osal_mem_alloc
   \   00004F   E5..         MOV       A,?V0
   \   000051   2409         ADD       A,#0x9
   \   000053   FA           MOV       R2,A
   \   000054   E4           CLR       A
   \   000055   35..         ADDC      A,?V1
   \   000057   FB           MOV       R3,A
   \   000058   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005B   8A..         MOV       ?V10,R2
   \   00005D   8B..         MOV       ?V11,R3
   \   00005F   EA           MOV       A,R2
   \   000060   4B           ORL       A,R3
   \   000061   7003         JNZ       $+5
   \   000063   02....       LJMP      ??MT_AfIncomingMsg_3 & 0xFFFF
    634              {
    635                return;  // If cannot hold a huge message, cannot give indication at all.
    636              }
    637          
    638              pItem->data = (uint8 *)(pItem+1);
   \   000066   EA           MOV       A,R2
   \   000067   2409         ADD       A,#0x9
   \   000069   F8           MOV       R0,A
   \   00006A   E4           CLR       A
   \   00006B   35..         ADDC      A,?V11
   \   00006D   F9           MOV       R1,A
   \   00006E   8A82         MOV       DPL,R2
   \   000070   8B83         MOV       DPH,R3
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   E8           MOV       A,R0
   \   000075   12....       LCALL     ??Subroutine45_0 & 0xFFFF
    639              respLen -= dataLen;  // Zero data bytes are sent with an over-sized incoming indication.
   \                     ??CrossCallReturnLabel_84:
   \   000078   C3           CLR       C
   \   000079   EE           MOV       A,R6
   \   00007A   95..         SUBB      A,?V0
   \   00007C   FE           MOV       R6,A
   \   00007D   EF           MOV       A,R7
   \   00007E   95..         SUBB      A,?V1
   \   000080   FF           MOV       R7,A
    640            }
    641          
    642            // Attempt to allocate memory for the response packet.
    643            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_2:
   \   000081                ; Setup parameters for call to function osal_mem_alloc
   \   000081   EE           MOV       A,R6
   \   000082   FA           MOV       R2,A
   \   000083   EF           MOV       A,R7
   \   000084   FB           MOV       R3,A
   \   000085   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000088   8A..         MOV       ?V12,R2
   \   00008A   8B..         MOV       ?V13,R3
   \   00008C   EA           MOV       A,R2
   \   00008D   4B           ORL       A,R3
   \   00008E   7010         JNZ       ??MT_AfIncomingMsg_4
    644            {
    645              if (pItem != NULL)
   \   000090   E5..         MOV       A,?V10
   \   000092   45..         ORL       A,?V11
   \   000094   6007         JZ        ??MT_AfIncomingMsg_5
    646              {
    647                (void)osal_mem_free(pItem);
   \   000096                ; Setup parameters for call to function osal_mem_free
   \   000096   AA..         MOV       R2,?V10
   \   000098   AB..         MOV       R3,?V11
   \   00009A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    648              }
    649              return;
   \                     ??MT_AfIncomingMsg_5:
   \   00009D   02....       LJMP      ??MT_AfIncomingMsg_3 & 0xFFFF
    650            }
    651            pTmp = pRsp;
    652          
    653            /* Group ID */
    654            *pTmp++ = LO_UINT16(pMsg->groupId);
   \                     ??MT_AfIncomingMsg_4:
   \   0000A0   E5..         MOV       A,?V8
   \   0000A2   2402         ADD       A,#0x2
   \   0000A4   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   8A82         MOV       DPL,R2
   \   0000AA   8B83         MOV       DPH,R3
   \   0000AC   12....       LCALL     ?Subroutine14 & 0xFFFF
    655            *pTmp++ = HI_UINT16(pMsg->groupId);
   \                     ??CrossCallReturnLabel_107:
   \   0000AF   F0           MOVX      @DPTR,A
    656          
    657            /* Cluster ID */
    658            *pTmp++ = LO_UINT16(pMsg->clusterId);
   \   0000B0   E5..         MOV       A,?V8
   \   0000B2   2404         ADD       A,#0x4
   \   0000B4   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000B7   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   0000BA   A3           INC       DPTR
   \   0000BB   12....       LCALL     ?Subroutine14 & 0xFFFF
    659            *pTmp++ = HI_UINT16(pMsg->clusterId);
   \                     ??CrossCallReturnLabel_108:
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   F0           MOVX      @DPTR,A
    660          
    661            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0000C1   7482         MOV       A,#-0x7e
   \   0000C3   65..         XRL       A,?V14
   \   0000C5   706B         JNZ       ??MT_AfIncomingMsg_6
    662            {
    663              *pTmp++ = pMsg->srcAddr.addrMode;
   \   0000C7   E5..         MOV       A,?V8
   \   0000C9   240E         ADD       A,#0xe
   \   0000CB   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000CE   EA           MOV       A,R2
   \   0000CF   2405         ADD       A,#0x5
   \   0000D1   F5..         MOV       ?V2,A
   \   0000D3   E4           CLR       A
   \   0000D4   35..         ADDC      A,?V13
   \   0000D6   F5..         MOV       ?V3,A
    664          
    665              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \   0000D8   8882         MOV       DPL,R0
   \   0000DA   8983         MOV       DPH,R1
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   6403         XRL       A,#0x3
   \   0000DF   7023         JNZ       ??MT_AfIncomingMsg_7
    666              {
    667                (void)osal_memcpy(pTmp, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   0000E1                ; Setup parameters for call to function osal_memcpy
   \   0000E1   E5..         MOV       A,?V8
   \   0000E3   2406         ADD       A,#0x6
   \   0000E5   F5..         MOV       ?V4,A
   \   0000E7   E4           CLR       A
   \   0000E8   35..         ADDC      A,?V9
   \   0000EA   F5..         MOV       ?V5,A
   \   0000EC   75..00       MOV       ?V6,#0x0
   \   0000EF   78..         MOV       R0,#?V4
   \   0000F1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F4   7C08         MOV       R4,#0x8
   \   0000F6   7D00         MOV       R5,#0x0
   \   0000F8   AA..         MOV       R2,?V2
   \   0000FA   AB..         MOV       R3,?V3
   \   0000FC   12....       LCALL     ??Subroutine52_0 & 0xFFFF
    668              }
   \                     ??CrossCallReturnLabel_114:
   \   0000FF   12....       LCALL     ?DEALLOC_XSTACK8
   \   000102   8016         SJMP      ??CrossCallReturnLabel_22
    669              else
    670              {
    671                pTmp[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_7:
   \   000104   E5..         MOV       A,?V8
   \   000106   2406         ADD       A,#0x6
   \   000108   F8           MOV       R0,A
   \   000109   E4           CLR       A
   \   00010A   35..         ADDC      A,?V9
   \   00010C   F9           MOV       R1,A
   \   00010D   8882         MOV       DPL,R0
   \   00010F   12....       LCALL     ?Subroutine21 & 0xFFFF
    672                pTmp[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_33:
   \   000112   8882         MOV       DPL,R0
   \   000114   8983         MOV       DPH,R1
   \   000116   A3           INC       DPTR
   \   000117   12....       LCALL     ?Subroutine15 & 0xFFFF
    673              }
    674              pTmp += Z_EXTADDR_LEN;
    675          
    676              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??CrossCallReturnLabel_22:
   \   00011A   E5..         MOV       A,?V8
   \   00011C   240F         ADD       A,#0xf
   \   00011E   12....       LCALL     ?Subroutine1 & 0xFFFF
    677          #if defined INTER_PAN
    678              *pTmp++ = LO_UINT16(pMsg->srcAddr.panId);
    679              *pTmp++ = HI_UINT16(pMsg->srcAddr.panId);
    680          #else
    681              *pTmp++ = 0;
    682              *pTmp++ = 0;
    683          #endif
    684            }
   \                     ??CrossCallReturnLabel_0:
   \   000121   E4           CLR       A
   \   000122   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000125   F0           MOVX      @DPTR,A
   \   000126   E5..         MOV       A,?V2
   \   000128   240B         ADD       A,#0xb
   \   00012A   F5..         MOV       ?V2,A
   \   00012C   502A         JNC       ??MT_AfIncomingMsg_8
   \   00012E   05..         INC       ?V3
   \   000130   8026         SJMP      ??MT_AfIncomingMsg_8
    685            else
    686            {
    687              /* Source Address */
    688              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_6:
   \   000132   E5..         MOV       A,?V8
   \   000134   2406         ADD       A,#0x6
   \   000136   12....       LCALL     ?Subroutine10 & 0xFFFF
    689              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_17:
   \   000139   8882         MOV       DPL,R0
   \   00013B   8983         MOV       DPH,R1
   \   00013D   A3           INC       DPTR
   \   00013E   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000141   F0           MOVX      @DPTR,A
    690          
    691              /* Source EP */
    692              *pTmp++ = pMsg->srcAddr.endPoint;
   \   000142   E5..         MOV       A,?V8
   \   000144   240F         ADD       A,#0xf
   \   000146   12....       LCALL     ?Subroutine41 & 0xFFFF
    693            }
   \                     ??CrossCallReturnLabel_70:
   \   000149   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00014C   A3           INC       DPTR
   \   00014D   F0           MOVX      @DPTR,A
   \   00014E   EA           MOV       A,R2
   \   00014F   2407         ADD       A,#0x7
   \   000151   F5..         MOV       ?V2,A
   \   000153   E4           CLR       A
   \   000154   35..         ADDC      A,?V13
   \   000156   F5..         MOV       ?V3,A
    694          
    695            /* Destination EP */
    696            *pTmp++ = pMsg->endPoint;
   \                     ??MT_AfIncomingMsg_8:
   \   000158   E5..         MOV       A,?V8
   \   00015A   2414         ADD       A,#0x14
   \   00015C   F582         MOV       DPL,A
   \   00015E   E4           CLR       A
   \   00015F   35..         ADDC      A,?V9
   \   000161   12....       LCALL     ?Subroutine21 & 0xFFFF
    697          
    698            /* WasBroadCast */
    699            *pTmp++ = pMsg->wasBroadcast;
   \                     ??CrossCallReturnLabel_34:
   \   000164   E5..         MOV       A,?V8
   \   000166   2415         ADD       A,#0x15
   \   000168   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00016B   12....       LCALL     ?Subroutine15 & 0xFFFF
    700          
    701            /* LinkQuality */
    702            *pTmp++ = pMsg->LinkQuality;
   \                     ??CrossCallReturnLabel_23:
   \   00016E   E5..         MOV       A,?V8
   \   000170   2416         ADD       A,#0x16
   \   000172   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000175   F0           MOVX      @DPTR,A
    703          
    704            /* SecurityUse */
    705            *pTmp++ = pMsg->SecurityUse;
   \   000176   E5..         MOV       A,?V8
   \   000178   2419         ADD       A,#0x19
   \   00017A   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00017D   A3           INC       DPTR
   \   00017E   F0           MOVX      @DPTR,A
    706          
    707            /* Timestamp */
    708            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 0);
   \   00017F   E5..         MOV       A,?V8
   \   000181   241A         ADD       A,#0x1a
   \   000183   FA           MOV       R2,A
   \   000184   E4           CLR       A
   \   000185   35..         ADDC      A,?V9
   \   000187   FB           MOV       R3,A
   \   000188   8A82         MOV       DPL,R2
   \   00018A   F583         MOV       DPH,A
   \   00018C   78..         MOV       R0,#?V4
   \   00018E   12....       LCALL     ?L_MOV_X
   \   000191   85..82       MOV       DPL,?V2
   \   000194   85..83       MOV       DPH,?V3
   \   000197   12....       LCALL     ?Subroutine24 & 0xFFFF
    709            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 1);
   \                     ??CrossCallReturnLabel_104:
   \   00019A   12....       LCALL     ?L_MOV_X
   \   00019D   E5..         MOV       A,?V5
   \   00019F   85..82       MOV       DPL,?V2
   \   0001A2   85..83       MOV       DPH,?V3
   \   0001A5   A3           INC       DPTR
   \   0001A6   A3           INC       DPTR
   \   0001A7   A3           INC       DPTR
   \   0001A8   A3           INC       DPTR
   \   0001A9   A3           INC       DPTR
   \   0001AA   12....       LCALL     ??Subroutine50_0 & 0xFFFF
    710            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 2);
   \                     ??CrossCallReturnLabel_106:
   \   0001AD   12....       LCALL     ?L_MOV_X
   \   0001B0   7410         MOV       A,#0x10
   \   0001B2   78..         MOV       R0,#?V4
   \   0001B4   12....       LCALL     ?UL_SHR
   \   0001B7   85..82       MOV       DPL,?V2
   \   0001BA   85..83       MOV       DPH,?V3
   \   0001BD   A3           INC       DPTR
   \   0001BE   A3           INC       DPTR
   \   0001BF   12....       LCALL     ?Subroutine24 & 0xFFFF
    711            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 3);
   \                     ??CrossCallReturnLabel_105:
   \   0001C2   12....       LCALL     ?L_MOV_X
   \   0001C5   7418         MOV       A,#0x18
   \   0001C7   78..         MOV       R0,#?V4
   \   0001C9   12....       LCALL     ?UL_SHR
   \   0001CC   85..82       MOV       DPL,?V2
   \   0001CF   85..83       MOV       DPH,?V3
   \   0001D2   A3           INC       DPTR
   \   0001D3   A3           INC       DPTR
   \   0001D4   A3           INC       DPTR
   \   0001D5   A3           INC       DPTR
   \   0001D6   A3           INC       DPTR
   \   0001D7   A3           INC       DPTR
   \   0001D8   A3           INC       DPTR
   \   0001D9   E5..         MOV       A,?V4
   \   0001DB   F0           MOVX      @DPTR,A
    712          
    713          
    714            /* Data Length */
    715            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0001DC   7482         MOV       A,#-0x7e
   \   0001DE   65..         XRL       A,?V14
   \   0001E0   7027         JNZ       ??MT_AfIncomingMsg_9
    716            {
    717              /* Z-Tool apparently takes the last Byte before the data buffer as the dynamic length and
    718               * ignores the bigger UInt16 length of an EXT incoming message. But no data bytes will be sent
    719               * with a huge message, so it's necessary to work-around and fake-out Z-Tool with a zero here.
    720               */
    721              *pTmp++ = 0;  // TODO - workaround Z-Tool shortcoming; should be: = pMsg->cmd.TransSeqNumber;
   \   0001E2   85..82       MOV       DPL,?V2
   \   0001E5   85..83       MOV       DPH,?V3
   \   0001E8   A3           INC       DPTR
   \   0001E9   A3           INC       DPTR
   \   0001EA   A3           INC       DPTR
   \   0001EB   A3           INC       DPTR
   \   0001EC   A3           INC       DPTR
   \   0001ED   A3           INC       DPTR
   \   0001EE   A3           INC       DPTR
   \   0001EF   A3           INC       DPTR
   \   0001F0   E4           CLR       A
   \   0001F1   12....       LCALL     ?Subroutine27 & 0xFFFF
    722              *pTmp++ = LO_UINT16(dataLen);
    723              *pTmp++ = HI_UINT16(dataLen);
    724            }
   \                     ??CrossCallReturnLabel_44:
   \   0001F4   A3           INC       DPTR
   \   0001F5   A3           INC       DPTR
   \   0001F6   A3           INC       DPTR
   \   0001F7   A3           INC       DPTR
   \   0001F8   A3           INC       DPTR
   \   0001F9   A3           INC       DPTR
   \   0001FA   A3           INC       DPTR
   \   0001FB   E5..         MOV       A,?V0
   \   0001FD   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000200   E5..         MOV       A,?V1
   \   000202   F0           MOVX      @DPTR,A
   \   000203   E5..         MOV       A,?V2
   \   000205   240B         ADD       A,#0xb
   \   000207   800E         SJMP      ??MT_AfIncomingMsg_10
    725            else
    726            {
    727              *pTmp++ = pMsg->cmd.TransSeqNumber;
   \                     ??MT_AfIncomingMsg_9:
   \   000209   E5..         MOV       A,?V8
   \   00020B   241F         ADD       A,#0x1f
   \   00020D   12....       LCALL     ?Subroutine1 & 0xFFFF
    728              *pTmp++ = dataLen;
    729            }
   \                     ??CrossCallReturnLabel_1:
   \   000210   E5..         MOV       A,?V0
   \   000212   F0           MOVX      @DPTR,A
   \   000213   E5..         MOV       A,?V2
   \   000215   240A         ADD       A,#0xa
   \                     ??MT_AfIncomingMsg_10:
   \   000217   F5..         MOV       ?V2,A
   \   000219   5002         JNC       ??MT_AfIncomingMsg_11
   \   00021B   05..         INC       ?V3
    730          
    731            /* Data */
    732            if (pItem != NULL)
   \                     ??MT_AfIncomingMsg_11:
   \   00021D   E5..         MOV       A,?V10
   \   00021F   45..         ORL       A,?V11
   \   000221   605B         JZ        ??MT_AfIncomingMsg_12
    733            {
    734              // Enqueue the new huge incoming item.
    735              pItem->next = pMtAfInMsgList;
   \   000223   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000226   85..82       MOV       DPL,?V10
   \   000229   85..83       MOV       DPH,?V11
   \   00022C   E8           MOV       A,R0
   \   00022D   12....       LCALL     ??Subroutine45_0 & 0xFFFF
    736              pMtAfInMsgList = pItem;
   \                     ??CrossCallReturnLabel_85:
   \   000230   90....       MOV       DPTR,#pMtAfInMsgList
   \   000233   E5..         MOV       A,?V10
   \   000235   F0           MOVX      @DPTR,A
   \   000236   A3           INC       DPTR
   \   000237   E5..         MOV       A,?V11
   \   000239   F0           MOVX      @DPTR,A
    737          
    738              // Setup to time-out the huge incoming item if host does not MT_AF_DATA_RETRIEVE it.
    739              pItem->tick = MT_AF_EXEC_CNT;
   \   00023A   85..82       MOV       DPL,?V10
   \   00023D   F583         MOV       DPH,A
   \   00023F   A3           INC       DPTR
   \   000240   A3           INC       DPTR
   \   000241   A3           INC       DPTR
   \   000242   A3           INC       DPTR
   \   000243   A3           INC       DPTR
   \   000244   A3           INC       DPTR
   \   000245   A3           INC       DPTR
   \   000246   A3           INC       DPTR
   \   000247   12....       LCALL     ?Subroutine12 & 0xFFFF
    740              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??CrossCallReturnLabel_91:
   \   00024A   6003         JZ        ??CrossCallReturnLabel_32
    741              {
    742                (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00024C                ; Setup parameters for call to function osal_set_event
   \   00024C   12....       LCALL     ?Subroutine20 & 0xFFFF
    743              }
    744          
    745              pItem->timestamp = pMsg->timestamp;
   \                     ??CrossCallReturnLabel_32:
   \   00024F   E5..         MOV       A,?V8
   \   000251   241A         ADD       A,#0x1a
   \   000253   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000256   12....       LCALL     ?XLOAD_R0123
   \   000259   85..82       MOV       DPL,?V10
   \   00025C   85..83       MOV       DPH,?V11
   \   00025F   A3           INC       DPTR
   \   000260   A3           INC       DPTR
   \   000261   A3           INC       DPTR
   \   000262   A3           INC       DPTR
   \   000263   12....       LCALL     ?XSTORE_R0123
    746              (void)osal_memcpy(pItem->data, pMsg->cmd.Data, dataLen);
   \   000266                ; Setup parameters for call to function osal_memcpy
   \   000266   12....       LCALL     ?Subroutine17 & 0xFFFF
    747            }
   \                     ??CrossCallReturnLabel_26:
   \   000269   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00026C   AC..         MOV       R4,?V0
   \   00026E   AD..         MOV       R5,?V1
   \   000270   85..82       MOV       DPL,?V10
   \   000273   85..83       MOV       DPH,?V11
   \   000276   A3           INC       DPTR
   \   000277   A3           INC       DPTR
   \   000278   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00027B   FB           MOV       R3,A
   \   00027C   800E         SJMP      ??MT_AfIncomingMsg_13
    748            else
    749            {
    750              (void)osal_memcpy(pTmp, pMsg->cmd.Data, dataLen);
   \                     ??MT_AfIncomingMsg_12:
   \   00027E                ; Setup parameters for call to function osal_memcpy
   \   00027E   12....       LCALL     ?Subroutine17 & 0xFFFF
    751            }
   \                     ??CrossCallReturnLabel_27:
   \   000281   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000284   AC..         MOV       R4,?V0
   \   000286   AD..         MOV       R5,?V1
   \   000288   AA..         MOV       R2,?V2
   \   00028A   AB..         MOV       R3,?V3
   \                     ??MT_AfIncomingMsg_13:
   \   00028C   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00028F   12....       LCALL     ?DEALLOC_XSTACK8
    752          
    753            /* Build and send back the response */
    754            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \   000292                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000292   AC..         MOV       R4,?V12
   \   000294   AD..         MOV       R5,?V13
   \   000296   EE           MOV       A,R6
   \   000297   FB           MOV       R3,A
   \   000298   AA..         MOV       R2,?V14
   \   00029A   7944         MOV       R1,#0x44
   \   00029C   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    755          
    756            (void)osal_mem_free(pRsp);
   \   00029F                ; Setup parameters for call to function osal_mem_free
   \   00029F   AA..         MOV       R2,?V12
   \   0002A1   AB..         MOV       R3,?V13
   \   0002A3   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    757          }
   \                     ??MT_AfIncomingMsg_3:
   \   0002A6   7F0F         MOV       R7,#0xf
   \   0002A8   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V4
   \   000006                REQUIRE ??Subroutine50_0
   \   000006                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   78..         MOV       R0,#?V4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   85..82       MOV       DPL,?V2
   \   000006   85..83       MOV       DPH,?V3
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E5..         MOV       A,?V8
   \   000002   2422         ADD       A,#0x22
   \   000004   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F5..         MOV       ?V4,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F5..         MOV       ?V5,A
   \   00000E   78..         MOV       R0,#?V4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V9
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V9
   \   000005   F583         MOV       DPH,A
   \   000007   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006                REQUIRE ??Subroutine51_0
   \   000006                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000003   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V9
   \   000004   F9           MOV       R1,A
   \   000005   8882         MOV       DPL,R0
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET
    758          
    759          /**************************************************************************************************
    760           * @fn          MT_AfDataRetrieve
    761           *
    762           * @brief   Process AF Data Retrieve command to incrementally read out a very large
    763           *          incoming AF message.
    764           *
    765           * input parameters
    766           *
    767           * @param pBuf - pointer to the received buffer
    768           *
    769           * output parameters
    770           *
    771           * @param rtrn - AF-Status of the operation.
    772           *
    773           * @return      None.
    774           **************************************************************************************************
    775           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    776          void MT_AfDataRetrieve(uint8 *pBuf)
   \                     MT_AfDataRetrieve:
    777          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000   74EB         MOV       A,#-0x15
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    778            #define MT_AF_RTV_HDR_SZ  2
    779          
    780            uint32 timestamp;
    781            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   000009   90....       MOV       DPTR,#pMtAfInMsgList
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F5..         MOV       ?V2,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F5..         MOV       ?V3,A
    782            uint8 rtrn = afStatus_FAILED;
   \   000013   7A01         MOV       R2,#0x1
    783            uint8 len = 0;
   \   000015   75..00       MOV       ?V12,#0x0
    784          
    785            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000018   E5..         MOV       A,?V0
   \   00001A   2403         ADD       A,#0x3
   \   00001C   F5..         MOV       ?V0,A
   \   00001E   5002         JNC       ??MT_AfDataRetrieve_0
   \   000020   05..         INC       ?V1
    786            timestamp = BUILD_UINT32(pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   \                     ??MT_AfDataRetrieve_0:
   \   000022   F582         MOV       DPL,A
   \   000024   85..83       MOV       DPH,?V1
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V4,A
   \   00002A   E4           CLR       A
   \   00002B   F5..         MOV       ?V5,A
   \   00002D   F5..         MOV       ?V6,A
   \   00002F   F5..         MOV       ?V7,A
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F5..         MOV       ?V8,A
   \   000035   E4           CLR       A
   \   000036   F5..         MOV       ?V9,A
   \   000038   F5..         MOV       ?V10,A
   \   00003A   F5..         MOV       ?V11,A
   \   00003C   7408         MOV       A,#0x8
   \   00003E   78..         MOV       R0,#?V8
   \   000040   12....       LCALL     ?L_SHL
   \   000043   78..         MOV       R0,#?V4
   \   000045   79..         MOV       R1,#?V8
   \   000047   12....       LCALL     ?L_ADD
   \   00004A   85..82       MOV       DPL,?V0
   \   00004D   85..83       MOV       DPH,?V1
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F5..         MOV       ?V8,A
   \   000055   E4           CLR       A
   \   000056   F5..         MOV       ?V9,A
   \   000058   7410         MOV       A,#0x10
   \   00005A   78..         MOV       R0,#?V8
   \   00005C   12....       LCALL     ?L_SHL
   \   00005F   78..         MOV       R0,#?V4
   \   000061   79..         MOV       R1,#?V8
   \   000063   12....       LCALL     ?L_ADD
   \   000066   85..82       MOV       DPL,?V0
   \   000069   85..83       MOV       DPH,?V1
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   F5..         MOV       ?V8,A
   \   000072   E4           CLR       A
   \   000073   F5..         MOV       ?V10,A
   \   000075   7418         MOV       A,#0x18
   \   000077   78..         MOV       R0,#?V8
   \   000079   12....       LCALL     ?L_SHL
   \   00007C   78..         MOV       R0,#?V4
   \   00007E   79..         MOV       R1,#?V8
   \   000080   12....       LCALL     ?L_ADD
   \   000083   800B         SJMP      ??MT_AfDataRetrieve_1
    787          
    788            while (pItem != NULL)
    789            {
    790              pPrev = pItem;
    791              if (pItem->timestamp == timestamp)
    792              {
    793                break;
    794              }
    795              pItem = pItem->next;
   \                     ??MT_AfDataRetrieve_2:
   \   000085   8C82         MOV       DPL,R4
   \   000087   8D83         MOV       DPH,R5
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   F5..         MOV       ?V2,A
   \   00008C   A3           INC       DPTR
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   F5..         MOV       ?V3,A
   \                     ??MT_AfDataRetrieve_1:
   \   000090   E5..         MOV       A,?V2
   \   000092   45..         ORL       A,?V3
   \   000094   605A         JZ        ??MT_AfDataRetrieve_3
   \   000096   AC..         MOV       R4,?V2
   \   000098   AD..         MOV       R5,?V3
   \   00009A   8C82         MOV       DPL,R4
   \   00009C   8D83         MOV       DPH,R5
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   78..         MOV       R0,#?V4
   \   0000A4   12....       LCALL     ?L_EQ_X
   \   0000A7   70DC         JNZ       ??MT_AfDataRetrieve_2
    796            }
    797          
    798            if (pItem != NULL)
    799            {
    800              uint16 idx;
    801              uint8 *pRsp;
    802          
    803              pBuf += 4;
   \   0000A9   E5..         MOV       A,?V0
   \   0000AB   2404         ADD       A,#0x4
   \   0000AD   F5..         MOV       ?V0,A
   \   0000AF   5002         JNC       ??MT_AfDataRetrieve_4
   \   0000B1   05..         INC       ?V1
    804              idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRetrieve_4:
   \   0000B3   F582         MOV       DPL,A
   \   0000B5   85..83       MOV       DPH,?V1
   \   0000B8   12....       LCALL     ?Subroutine3 & 0xFFFF
    805              len = pBuf[2];
   \                     ??CrossCallReturnLabel_3:
   \   0000BB   85..82       MOV       DPL,?V0
   \   0000BE   85..83       MOV       DPH,?V1
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   F5..         MOV       ?V12,A
    806          
    807              if (len == 0)  // Indication to delete the afIncomingMSGPacket.
   \   0000C6   7046         JNZ       ??MT_AfDataRetrieve_5
    808              {
    809                if (pMtAfInMsgList == pItem)
   \   0000C8   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0000CB   EC           MOV       A,R4
   \   0000CC   68           XRL       A,R0
   \   0000CD   7002         JNZ       ??MT_AfDataRetrieve_6
   \   0000CF   ED           MOV       A,R5
   \   0000D0   69           XRL       A,R1
   \                     ??MT_AfDataRetrieve_6:
   \   0000D1   8C82         MOV       DPL,R4
   \   0000D3   8D83         MOV       DPH,R5
   \   0000D5   7005         JNZ       ??MT_AfDataRetrieve_7
    810                {
    811                  pMtAfInMsgList = pItem->next;
   \   0000D7   12....       LCALL     ?Subroutine18 & 0xFFFF
    812                }
   \                     ??CrossCallReturnLabel_29:
   \   0000DA   8007         SJMP      ??MT_AfDataRetrieve_8
    813                else
    814                {
    815                  pPrev->next = pItem->next;
   \                     ??MT_AfDataRetrieve_7:
   \   0000DC   12....       LCALL     ??Subroutine53_0 & 0xFFFF
    816                }
   \                     ??CrossCallReturnLabel_117:
   \   0000DF   8C82         MOV       DPL,R4
   \   0000E1   8D83         MOV       DPH,R5
   \                     ??MT_AfDataRetrieve_8:
   \   0000E3   E8           MOV       A,R0
   \   0000E4   12....       LCALL     ??Subroutine45_0 & 0xFFFF
    817                (void)osal_mem_free(pItem);
   \                     ??CrossCallReturnLabel_86:
   \   0000E7                ; Setup parameters for call to function osal_mem_free
   \   0000E7   AA..         MOV       R2,?V2
   \   0000E9   AB..         MOV       R3,?V3
   \   0000EB   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    818                rtrn = afStatus_SUCCESS;
   \   0000EE   7A00         MOV       R2,#0x0
    819              }
    820              else if ((pRsp = osal_mem_alloc(len + MT_AF_RTV_HDR_SZ)) == NULL)
    821              {
    822                rtrn = afStatus_MEM_FAIL;
    823                len = 0;
    824              }
    825              else
    826              {
    827                pRsp[0] = ZSuccess;
    828                pRsp[1] = len;
    829                (void)osal_memcpy(pRsp + MT_AF_RTV_HDR_SZ, pItem->data+idx, len);
    830                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    831                                                     MT_AF_DATA_RETRIEVE, len + MT_AF_RTV_HDR_SZ, pRsp);
    832                (void)osal_mem_free(pRsp);
    833                return;
    834              }
    835            }
    836          
    837            pBuf[0] = rtrn;
   \                     ??MT_AfDataRetrieve_3:
   \   0000F0   EA           MOV       A,R2
   \   0000F1   85..82       MOV       DPL,?V0
   \   0000F4   85..83       MOV       DPH,?V1
   \   0000F7   F0           MOVX      @DPTR,A
    838            pBuf[1] = len;
   \   0000F8   A3           INC       DPTR
   \   0000F9   E5..         MOV       A,?V12
   \   0000FB   F0           MOVX      @DPTR,A
    839            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    840                                                 MT_AF_DATA_RETRIEVE, MT_AF_RTV_HDR_SZ, pBuf);
   \   0000FC                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000FC   AC..         MOV       R4,?V0
   \   0000FE   AD..         MOV       R5,?V1
   \   000100   7B02         MOV       R3,#0x2
   \   000102   7A12         MOV       R2,#0x12
   \   000104   7964         MOV       R1,#0x64
   \   000106   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    841          }
   \                     ??MT_AfDataRetrieve_9:
   \   000109   7F0D         MOV       R7,#0xd
   \   00010B   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??MT_AfDataRetrieve_5:
   \   00010E                ; Setup parameters for call to function osal_mem_alloc
   \   00010E   2402         ADD       A,#0x2
   \   000110   FA           MOV       R2,A
   \   000111   E4           CLR       A
   \   000112   3400         ADDC      A,#0x0
   \   000114   FB           MOV       R3,A
   \   000115   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000118   8A..         MOV       ?V6,R2
   \   00011A   8B..         MOV       ?V7,R3
   \   00011C   AE..         MOV       R6,?V6
   \   00011E   AF..         MOV       R7,?V7
   \   000120   EA           MOV       A,R2
   \   000121   4F           ORL       A,R7
   \   000122   7007         JNZ       ??MT_AfDataRetrieve_10
   \   000124   7A10         MOV       R2,#0x10
   \   000126   75..00       MOV       ?V12,#0x0
   \   000129   80C5         SJMP      ??MT_AfDataRetrieve_3
   \                     ??MT_AfDataRetrieve_10:
   \   00012B   8A82         MOV       DPL,R2
   \   00012D   8B83         MOV       DPH,R3
   \   00012F   E4           CLR       A
   \   000130   F0           MOVX      @DPTR,A
   \   000131   A3           INC       DPTR
   \   000132   E5..         MOV       A,?V12
   \   000134   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000137   E0           MOVX      A,@DPTR
   \   000138   25..         ADD       A,?V4
   \   00013A   F5..         MOV       ?V0,A
   \   00013C   A3           INC       DPTR
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   35..         ADDC      A,?V5
   \   000140   F5..         MOV       ?V1,A
   \   000142   75..00       MOV       ?V2,#0x0
   \   000145   78..         MOV       R0,#?V0
   \   000147   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00014A   AC..         MOV       R4,?V12
   \   00014C   7D00         MOV       R5,#0x0
   \   00014E   EA           MOV       A,R2
   \   00014F   2402         ADD       A,#0x2
   \   000151   FA           MOV       R2,A
   \   000152   E4           CLR       A
   \   000153   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000156   12....       LCALL     ?DEALLOC_XSTACK8
   \   000159                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000159   EE           MOV       A,R6
   \   00015A   FC           MOV       R4,A
   \   00015B   EF           MOV       A,R7
   \   00015C   FD           MOV       R5,A
   \   00015D   7402         MOV       A,#0x2
   \   00015F   25..         ADD       A,?V12
   \   000161   FB           MOV       R3,A
   \   000162   7A12         MOV       R2,#0x12
   \   000164   7964         MOV       R1,#0x64
   \   000166   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000169                ; Setup parameters for call to function osal_mem_free
   \   000169   EE           MOV       A,R6
   \   00016A   FA           MOV       R2,A
   \   00016B   EF           MOV       A,R7
   \   00016C   FB           MOV       R3,A
   \   00016D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000170   8097         SJMP      ??MT_AfDataRetrieve_9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   3F           ADDC      A,R7
   \   000001   FB           MOV       R3,A
   \   000002                REQUIRE ??Subroutine52_0
   \   000002                ; // Fall through to label ??Subroutine52_0
    842          
    843          /**************************************************************************************************
    844           * @fn          MT_AfDataStore
    845           *
    846           * @brief   Process AF Data Store command to incrementally store the data buffer for very large
    847           *          outgoing AF message.
    848           *
    849           * input parameters
    850           *
    851           * @param pBuf - pointer to the received buffer
    852           *
    853           * output parameters
    854           *
    855           * @param rtrn - AF-Status of the operation.
    856           *
    857           * @return      None.
    858           **************************************************************************************************
    859           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    860          void MT_AfDataStore(uint8 *pBuf)
   \                     MT_AfDataStore:
    861          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    862            uint16 idx;
    863            uint8 len, rtrn = afStatus_FAILED;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   7401         MOV       A,#0x1
   \   000012   F0           MOVX      @DPTR,A
    864          
    865            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   EA           MOV       A,R2
   \   000014   2403         ADD       A,#0x3
   \   000016   FA           MOV       R2,A
   \   000017   5001         JNC       ??MT_AfDataStore_0
   \   000019   0B           INC       R3
    866            idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataStore_0:
   \   00001A   F582         MOV       DPL,A
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   FC           MOV       R4,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F8           MOV       R0,A
   \   000023   E4           CLR       A
   \   000024   C8           XCH       A,R0
   \   000025   F9           MOV       R1,A
   \   000026   EC           MOV       A,R4
   \   000027   28           ADD       A,R0
   \   000028   FE           MOV       R6,A
   \   000029   E4           CLR       A
   \   00002A   39           ADDC      A,R1
   \   00002B   FF           MOV       R7,A
    867            len = pBuf[2];
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FC           MOV       R4,A
    868            pBuf += 3;
   \   000034   EA           MOV       A,R2
   \   000035   2403         ADD       A,#0x3
   \   000037   FA           MOV       R2,A
   \   000038   5001         JNC       ??MT_AfDataStore_1
   \   00003A   0B           INC       R3
    869          
    870            if (pMtAfDataReq == NULL)
   \                     ??MT_AfDataStore_1:
   \   00003B   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00003E   700B         JNZ       ??MT_AfDataStore_2
    871            {
    872              rtrn = afStatus_MEM_FAIL;
   \   000040   85..82       MOV       DPL,?XSP + 0
   \   000043   85..83       MOV       DPH,?XSP + 1
   \   000046   7410         MOV       A,#0x10
   \   000048   02....       LJMP      ??MT_AfDataStore_3 & 0xFFFF
    873            }
    874            else if (len == 0)  // Indication to send the message.
   \                     ??MT_AfDataStore_2:
   \   00004B   EC           MOV       A,R4
   \   00004C   7078         JNZ       ??MT_AfDataStore_4
    875            {
    876              rtrn = AF_DataRequest(&(pMtAfDataReq->dstAddr), pMtAfDataReq->epDesc, pMtAfDataReq->cId,
    877                                      pMtAfDataReq->dataLen,  pMtAfDataReq->data,
    878                                    &(pMtAfDataReq->transId), pMtAfDataReq->txOpts, pMtAfDataReq->radius);
   \   00004E                ; Setup parameters for call to function AF_DataRequest
   \   00004E   E8           MOV       A,R0
   \   00004F   2416         ADD       A,#0x16
   \   000051   F582         MOV       DPL,A
   \   000053   E4           CLR       A
   \   000054   39           ADDC      A,R1
   \   000055   F583         MOV       DPH,A
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F5..         MOV       ?V0,A
   \   00005A   78..         MOV       R0,#?V0
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005F   90....       MOV       DPTR,#pMtAfDataReq
   \   000062   E0           MOVX      A,@DPTR
   \   000063   2414         ADD       A,#0x14
   \   000065   F5..         MOV       ?V0,A
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   3400         ADDC      A,#0x0
   \   00006B   F5..         MOV       ?V1,A
   \   00006D   78..         MOV       R0,#?V0
   \   00006F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000072   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000075   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000078   E8           MOV       A,R0
   \   000079   2412         ADD       A,#0x12
   \   00007B   F582         MOV       DPL,A
   \   00007D   E4           CLR       A
   \   00007E   39           ADDC      A,R1
   \   00007F   F583         MOV       DPH,A
   \   000081   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000084   90....       MOV       DPTR,#pMtAfDataReq
   \   000087   E0           MOVX      A,@DPTR
   \   000088   2410         ADD       A,#0x10
   \   00008A   F582         MOV       DPL,A
   \   00008C   E4           CLR       A
   \   00008D   39           ADDC      A,R1
   \   00008E   F583         MOV       DPH,A
   \   000090   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000093   90....       MOV       DPTR,#pMtAfDataReq
   \   000096   E0           MOVX      A,@DPTR
   \   000097   2415         ADD       A,#0x15
   \   000099   F582         MOV       DPL,A
   \   00009B   E4           CLR       A
   \   00009C   39           ADDC      A,R1
   \   00009D   F583         MOV       DPH,A
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F9           MOV       R1,A
   \   0000A1   90....       MOV       DPTR,#pMtAfDataReq + 1
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   C8           XCH       A,R0
   \   0000A6   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   FC           MOV       R4,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   FD           MOV       R5,A
   \   0000AE   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000B1   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000B4   7409         MOV       A,#0x9
   \   0000B6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B9   E9           MOV       A,R1
   \   0000BA   85..82       MOV       DPL,?XSP + 0
   \   0000BD   85..83       MOV       DPH,?XSP + 1
   \   0000C0   F0           MOVX      @DPTR,A
    879              (void)osal_mem_free(pMtAfDataReq);
   \   0000C1                ; Setup parameters for call to function osal_mem_free
   \   0000C1   12....       LCALL     ?Subroutine4 & 0xFFFF
    880              pMtAfDataReq = NULL;
    881            }
   \                     ??CrossCallReturnLabel_5:
   \   0000C4   8023         SJMP      ??MT_AfDataStore_3
    882            else
    883            {
    884              (void)osal_memcpy(pMtAfDataReq->data+idx, pBuf, len);
   \                     ??MT_AfDataStore_4:
   \   0000C6                ; Setup parameters for call to function osal_memcpy
   \   0000C6   8A..         MOV       ?V0,R2
   \   0000C8   8B..         MOV       ?V1,R3
   \   0000CA   75..00       MOV       ?V2,#0x0
   \   0000CD   78..         MOV       R0,#?V0
   \   0000CF   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D2   7D00         MOV       R5,#0x0
   \   0000D4   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   2E           ADD       A,R6
   \   0000D9   FA           MOV       R2,A
   \   0000DA   A3           INC       DPTR
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0000DF   12....       LCALL     ?DEALLOC_XSTACK8
    885              rtrn = afStatus_SUCCESS;
   \   0000E2   85..82       MOV       DPL,?XSP + 0
   \   0000E5   85..83       MOV       DPH,?XSP + 1
   \   0000E8   E4           CLR       A
   \                     ??MT_AfDataStore_3:
   \   0000E9   F0           MOVX      @DPTR,A
    886            }
    887          
    888            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    889                                                                          MT_AF_DATA_STORE, 1, &rtrn);
   \   0000EA                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000EA   AC..         MOV       R4,?XSP + 0
   \   0000EC   AD..         MOV       R5,?XSP + 1
   \   0000EE   7B01         MOV       R3,#0x1
   \   0000F0   7A11         MOV       R2,#0x11
   \   0000F2   7964         MOV       R1,#0x64
   \   0000F4   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    890          }
   \   0000F7   7401         MOV       A,#0x1
   \   0000F9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000FC   7F03         MOV       R7,#0x3
   \   0000FE   02....       LJMP      ?BANKED_LEAVE_XDATA
    891          
    892          /**************************************************************************************************
    893           * @fn          MT_AfAPSF_ConfigSet
    894           *
    895           * @brief       This function is the MT proxy for afAPSF_ConfigSet().
    896           *
    897           * input parameters
    898           *
    899           * @param       pBuf - Pointer to the received buffer.
    900           *
    901           * output parameters
    902           *
    903           * None.
    904           *
    905           * @return      None.
    906           */
    907          static void MT_AfAPSF_ConfigSet(uint8 *pBuf)
    908          {
    909            afAPSF_Config_t cfg = { pBuf[MT_RPC_POS_DAT0+1], pBuf[MT_RPC_POS_DAT0+2] };
    910            afStatus_t rtrn = afAPSF_ConfigSet(pBuf[MT_RPC_POS_DAT0], &cfg);
    911          
    912            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    913                                                 MT_AF_APSF_CONFIG_SET, 1, (uint8 *)&rtrn);
    914          }
    915          
    916          /***************************************************************************************************
    917          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     12   MT_AfCommandProcessing
        0     12   -> MT_AfDataRequest
        0     12   -> MT_AfDataRequestSrcRtg
        0     12   -> MT_AfDataRetrieve
        0     12   -> MT_AfDataStore
        0     12   -> MT_AfRegister
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> afAPSF_ConfigSet
      3      3   MT_AfDataConfirm
        2      3   -> MT_BuildAndSendZToolResponse
      1     57   MT_AfDataRequest
        0     45   -> AF_DataRequest
        0     36   -> MT_BuildAndSendZToolResponse
        0     36   -> afFindEndPointDesc
        0     36   -> osal_mem_alloc
        0     39   -> osal_memcpy
        0     36   -> osal_set_event
        0     36   -> osal_start_timerEx
      1     58   MT_AfDataRequestSrcRtg
        0     46   -> AF_DataRequestSrcRtg
        0     34   -> MT_BuildAndSendZToolResponse
        0     34   -> afFindEndPointDesc
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     34   -> osal_memset
      1     36   MT_AfDataRetrieve
        0     21   -> MT_BuildAndSendZToolResponse
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     24   -> osal_memcpy
      1     33   MT_AfDataStore
        0     21   -> AF_DataRequest
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> osal_mem_free
        0     15   -> osal_memcpy
      0      9   MT_AfExec
        0      9   -> osal_mem_free
        0      9   -> osal_set_event
        0      9   -> osal_start_timerEx
      1     26   MT_AfIncomingMsg
        0     23   -> MT_BuildAndSendZToolResponse
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     26   -> osal_memcpy
        0     23   -> osal_set_event
        0     23   -> osal_start_timerEx
      1     27   MT_AfRegister
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> MT_BuildEndpointDesc
        0     15   -> afRegister
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ??Subroutine45_0
      18  ??Subroutine46_0
       5  ??Subroutine47_0
       5  ??Subroutine48_0
       7  ??Subroutine49_0
       8  ??Subroutine50_0
       7  ??Subroutine51_0
       6  ??Subroutine52_0
       5  ??Subroutine53_0
       5  ?Subroutine0
      13  ?Subroutine1
       8  ?Subroutine10
       5  ?Subroutine11
       3  ?Subroutine12
      13  ?Subroutine13
       6  ?Subroutine14
       5  ?Subroutine15
       4  ?Subroutine16
      17  ?Subroutine17
       8  ?Subroutine18
       3  ?Subroutine19
       3  ?Subroutine2
      13  ?Subroutine20
      11  ?Subroutine21
       5  ?Subroutine22
       6  ?Subroutine23
       6  ?Subroutine24
       5  ?Subroutine25
      10  ?Subroutine26
       4  ?Subroutine27
       9  ?Subroutine28
       6  ?Subroutine29
      10  ?Subroutine3
       1  ?Subroutine30
       2  ?Subroutine31
       9  ?Subroutine32
      10  ?Subroutine33
      10  ?Subroutine34
      12  ?Subroutine35
       3  ?Subroutine36
      11  ?Subroutine37
       7  ?Subroutine38
       9  ?Subroutine39
      17  ?Subroutine4
      10  ?Subroutine40
       8  ?Subroutine41
       5  ?Subroutine42
       9  ?Subroutine43
      10  ?Subroutine44
      14  ?Subroutine5
       8  ?Subroutine6
       1  ?Subroutine7
       7  ?Subroutine8
       4  ?Subroutine9
     157  MT_AfCommandProcessing
      72  MT_AfDataConfirm
     703  MT_AfDataRequest
     381  MT_AfDataRequestSrcRtg
     370  MT_AfDataRetrieve
     257  MT_AfDataStore
     126  MT_AfExec
     683  MT_AfIncomingMsg
     132  MT_AfRegister
       2  pMtAfDataReq
       2  pMtAfInMsgList
      54  -- Other

 
 3 292 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
     4 bytes in segment XDATA_Z
 
    54 bytes of CODE     memory
 3 292 bytes of HUGECODE memory
     4 bytes of XDATA    memory

Errors: none
Warnings: none
