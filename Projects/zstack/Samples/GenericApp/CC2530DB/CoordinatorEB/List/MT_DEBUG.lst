###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               30/Aug/2019  09:21:29
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\ZStack-CC2530-2.5.1a\Components\mt\MT_DEBUG.c
#    Command line       =  
#        -f C:\Users\Ð¡»ðÁú\AppData\Local\Temp\EW73FA.tmp
#        (D:\ZStack-CC2530-2.5.1a\Components\mt\MT_DEBUG.c -D ZTOOL_P1 -D
#        MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x02000000 -DZDAPP_CONFIG_PAN_ID=0xFFF0
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\MT_DEBUG.lst
#    Object file        =  
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\MT_DEBUG.r51
#
###############################################################################

D:\ZStack-CC2530-2.5.1a\Components\mt\MT_DEBUG.c
      1          /***************************************************************************************************
      2            Filename:       MT.c
      3            Revised:        $Date: 2011-06-07 14:34:55 -0700 (Tue, 07 Jun 2011) $
      4            Revision:       $Revision: 26241 $
      5          
      6            Description:
      7          
      8            Copyright 2007-2011 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "MT.h"
     46          #include "MT_DEBUG.h"
     47          #include "MT_UART.h"
     48          #include "mac_main.h"
     49          #include "mac_data.h"
     50          #include "mac_rx.h"
     51          #include "mac_tx.h"
     52          #include "nwk_globals.h"
     53          
     54          /***************************************************************************************************
     55           * LOCAL FUNCTIONs
     56           ***************************************************************************************************/
     57          
     58          #if defined (MT_DEBUG_FUNC)
     59          static void MT_DebugSetThreshold(uint8 *pBuf);
     60          static void MT_DebugMacDataDump(void);
     61          #endif
     62          
     63          #if defined (MT_DEBUG_FUNC)
     64          /***************************************************************************************************
     65           * @fn      MT_DebugProcessing
     66           *
     67           * @brief   Process all the DEBUG commands that are issued by test tool
     68           *
     69           * @param   pBuf - pointer to received buffer
     70           *
     71           * @return  status
     72           ***************************************************************************************************/
     73          uint8 MT_DebugCommandProcessing(uint8 *pBuf)
     74          {
     75            uint8 status = MT_RPC_SUCCESS;
     76          
     77            switch (pBuf[MT_RPC_POS_CMD1])
     78            {
     79              case MT_DEBUG_SET_THRESHOLD:
     80                MT_DebugSetThreshold(pBuf);
     81                break;
     82          
     83            case MT_DEBUG_MAC_DATA_DUMP:
     84                MT_DebugMacDataDump();
     85                break;
     86          
     87              default:
     88                status = MT_RPC_ERR_COMMAND_ID;
     89                break;
     90            }
     91          
     92            return status;
     93          }
     94          
     95          /***************************************************************************************************
     96           * @fn      MT_DebugSetThreshold
     97           *
     98           * @brief   Process Debug Set Threshold
     99           *
    100           * @param   pBuf - pointer to received buffer
    101           *
    102           * @return  void
    103           ***************************************************************************************************/
    104          static void MT_DebugSetThreshold(uint8 *pBuf)
    105          {
    106            uint8 retValue = ZSuccess;
    107            uint8 cmdId;
    108          
    109            /* parse header */
    110            cmdId = pBuf[MT_RPC_POS_CMD1];
    111            pBuf += MT_RPC_FRAME_HDR_SZ;
    112          
    113            /* Populate info */
    114            debugCompId = *pBuf++;
    115            debugThreshold = *pBuf++;
    116          
    117            /* Build and send back the response */
    118            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_DBG), cmdId, 1, &retValue);
    119          }
    120          
    121          /***************************************************************************************************
    122           * @fn      MT_DebugMacDataDump
    123           *
    124           * @brief   Process the debug MAC Data Dump request.
    125           *
    126           * @param   pBuf - pointer to received buffer
    127           *
    128           * @return  void
    129           ***************************************************************************************************/
    130          static void MT_DebugMacDataDump(void)
    131          {
    132            uint8 buf[sizeof(mtDebugMacDataDump_t)];
    133            uint8 *pBuf = buf;
    134          
    135          #ifdef PACKET_FILTER_STATS
    136            *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 0);
    137            *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 1);
    138            *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 2);
    139            *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 3);
    140            *pBuf++ = BREAK_UINT32(rxCrcFailure, 0);
    141            *pBuf++ = BREAK_UINT32(rxCrcFailure, 1);
    142            *pBuf++ = BREAK_UINT32(rxCrcFailure, 2);
    143            *pBuf++ = BREAK_UINT32(rxCrcFailure, 3);
    144            *pBuf++ = BREAK_UINT32(rxCrcSuccess, 0);
    145            *pBuf++ = BREAK_UINT32(rxCrcSuccess, 1);
    146            *pBuf++ = BREAK_UINT32(rxCrcSuccess, 2);
    147            *pBuf++ = BREAK_UINT32(rxCrcSuccess, 3);
    148          #endif
    149          #if defined HAL_MCU_CC2530
    150            *pBuf++ = FSMSTAT0;
    151            *pBuf++ = FSMSTAT1;
    152          #else
    153            *pBuf++ = macSpiReadReg(FSMSTAT0);
    154            *pBuf++ = macSpiReadReg(FSMSTAT1);
    155          #endif
    156            *pBuf++ = macData.rxCount;
    157            *pBuf++ = macData.directCount;
    158            *pBuf++ = macMain.state;
    159            *pBuf++ = macRxActive;
    160            *pBuf   = macTxActive;
    161          
    162            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_DBG),
    163                                                 MT_DEBUG_MAC_DATA_DUMP, sizeof(buf), buf);
    164          }
    165          #endif
    166          
    167          /***************************************************************************************************
    168           * @fn      MT_ProcessDebugMsg
    169           *
    170           * @brief   Build and send a debug message.
    171           *
    172           * @param   byte *data - pointer to the data portion of the debug message
    173           *
    174           * @return  void
    175           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    176          void MT_ProcessDebugMsg( mtDebugMsg_t *msg )
   \                     MT_ProcessDebugMsg:
    177          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    178            byte *msg_ptr;
    179            byte dataLen;
    180            uint8 buf[11];
    181            uint8 *pBuf;
    182          
    183            /* Calculate the data length based */
    184            dataLen = 5 + (msg->numParams * sizeof ( uint16 ));
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   C3           CLR       C
   \   000018   33           RLC       A
   \   000019   2405         ADD       A,#0x5
   \   00001B   FE           MOV       R6,A
    185          
    186            /* Get a message buffer to build the debug message */
    187            msg_ptr = osal_msg_allocate( (byte)(SPI_0DATA_MSG_LEN + dataLen + 1) );
   \   00001C                ; Setup parameters for call to function osal_msg_allocate
   \   00001C   7406         MOV       A,#0x6
   \   00001E   2E           ADD       A,R6
   \   00001F   FA           MOV       R2,A
   \   000020   7B00         MOV       R3,#0x0
   \   000022   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000025   8A..         MOV       ?V2,R2
   \   000027   8B..         MOV       ?V3,R3
    188            if ( msg_ptr )
   \   000029   EA           MOV       A,R2
   \   00002A   4B           ORL       A,R3
   \   00002B   7003         JNZ       $+5
   \   00002D   02....       LJMP      ??MT_ProcessDebugMsg_0 & 0xFFFF
    189            {
    190              /* Build the message */
    191              pBuf = buf;
    192              *pBuf++ = msg->compID;
   \   000030   85..82       MOV       DPL,?V0
   \   000033   85..83       MOV       DPH,?V1
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   85..82       MOV       DPL,?XSP + 0
   \   00003C   85..83       MOV       DPH,?XSP + 1
   \   00003F   F0           MOVX      @DPTR,A
    193              *pBuf++ = msg->severity;
   \   000040   85..82       MOV       DPL,?V0
   \   000043   85..83       MOV       DPH,?V1
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   C0E0         PUSH      A
   \   00004C   7401         MOV       A,#0x1
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   D0E0         POP       A
   \   000053   F0           MOVX      @DPTR,A
    194              *pBuf++ = msg->numParams;
   \   000054   E5..         MOV       A,?V0
   \   000056   2404         ADD       A,#0x4
   \   000058   F8           MOV       R0,A
   \   000059   E4           CLR       A
   \   00005A   35..         ADDC      A,?V1
   \   00005C   F9           MOV       R1,A
   \   00005D   E8           MOV       A,R0
   \   00005E   FA           MOV       R2,A
   \   00005F   E9           MOV       A,R1
   \   000060   FB           MOV       R3,A
   \   000061   8882         MOV       DPL,R0
   \   000063   F583         MOV       DPH,A
   \   000065   E0           MOVX      A,@DPTR
   \   000066   C0E0         PUSH      A
   \   000068   7402         MOV       A,#0x2
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   D0E0         POP       A
   \   00006F   F0           MOVX      @DPTR,A
   \   000070   7403         MOV       A,#0x3
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   A882         MOV       R0,DPL
   \   000077   A983         MOV       R1,DPH
    195          
    196              if ( msg->numParams >= 1 )
   \   000079   8A82         MOV       DPL,R2
   \   00007B   8B83         MOV       DPH,R3
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   7003         JNZ       $+5
   \   000080   02....       LJMP      ??MT_ProcessDebugMsg_1 & 0xFFFF
    197              {
    198                *pBuf++ = LO_UINT16( msg->param1 );
   \   000083   E5..         MOV       A,?V0
   \   000085   2405         ADD       A,#0x5
   \   000087   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00008A   C0E0         PUSH      A
   \   00008C   7403         MOV       A,#0x3
   \   00008E   12....       LCALL     ?XSTACK_DISP0_8
   \   000091   D0E0         POP       A
   \   000093   F0           MOVX      @DPTR,A
    199                *pBuf++ = HI_UINT16( msg->param1 );
   \   000094   8882         MOV       DPL,R0
   \   000096   8983         MOV       DPH,R1
   \   000098   A3           INC       DPTR
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   C0E0         PUSH      A
   \   00009C   7404         MOV       A,#0x4
   \   00009E   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A1   D0E0         POP       A
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4   7405         MOV       A,#0x5
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   A882         MOV       R0,DPL
   \   0000AB   A983         MOV       R1,DPH
    200              }
    201          
    202              if ( msg->numParams >= 2 )
   \   0000AD   85..82       MOV       DPL,?V0
   \   0000B0   85..83       MOV       DPH,?V1
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   C3           CLR       C
   \   0000B9   9402         SUBB      A,#0x2
   \   0000BB   402A         JC        ??MT_ProcessDebugMsg_2
    203              {
    204                *pBuf++ = LO_UINT16( msg->param2 );
   \   0000BD   E5..         MOV       A,?V0
   \   0000BF   2407         ADD       A,#0x7
   \   0000C1   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000C4   C0E0         PUSH      A
   \   0000C6   7405         MOV       A,#0x5
   \   0000C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CB   D0E0         POP       A
   \   0000CD   F0           MOVX      @DPTR,A
    205                *pBuf++ = HI_UINT16( msg->param2 );
   \   0000CE   8882         MOV       DPL,R0
   \   0000D0   8983         MOV       DPH,R1
   \   0000D2   A3           INC       DPTR
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   C0E0         PUSH      A
   \   0000D6   7406         MOV       A,#0x6
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   D0E0         POP       A
   \   0000DD   F0           MOVX      @DPTR,A
   \   0000DE   7407         MOV       A,#0x7
   \   0000E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E3   A882         MOV       R0,DPL
   \   0000E5   A983         MOV       R1,DPH
    206              }
    207          
    208              if ( msg->numParams == 3 )
   \                     ??MT_ProcessDebugMsg_2:
   \   0000E7   85..82       MOV       DPL,?V0
   \   0000EA   85..83       MOV       DPH,?V1
   \   0000ED   A3           INC       DPTR
   \   0000EE   A3           INC       DPTR
   \   0000EF   A3           INC       DPTR
   \   0000F0   A3           INC       DPTR
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   6403         XRL       A,#0x3
   \   0000F4   700E         JNZ       ??MT_ProcessDebugMsg_1
    209              {
    210                *pBuf++ = LO_UINT16( msg->param3 );
   \   0000F6   E5..         MOV       A,?V0
   \   0000F8   2409         ADD       A,#0x9
   \   0000FA   12....       LCALL     ?Subroutine0 & 0xFFFF
    211                *pBuf++ = HI_UINT16( msg->param3 );
    212              }
   \                     ??CrossCallReturnLabel_0:
   \   0000FD   E8           MOV       A,R0
   \   0000FE   2402         ADD       A,#0x2
   \   000100   F8           MOV       R0,A
   \   000101   5001         JNC       ??MT_ProcessDebugMsg_1
   \   000103   09           INC       R1
    213          
    214              *pBuf++ = LO_UINT16( msg->timestamp );
   \                     ??MT_ProcessDebugMsg_1:
   \   000104   E5..         MOV       A,?V0
   \   000106   240B         ADD       A,#0xb
   \   000108   12....       LCALL     ?Subroutine0 & 0xFFFF
    215              *pBuf++ = HI_UINT16( msg->timestamp );
    216          
    217          #ifdef MT_UART_DEFAULT_PORT
    218              /* Debug message is set to AREQ CMD 0x80 for now */
    219              /* Build and send back the response */
    220              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_DBG), 0x80, dataLen, buf);
   \                     ??CrossCallReturnLabel_1:
   \   00010B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00010B   AC..         MOV       R4,?XSP + 0
   \   00010D   AD..         MOV       R5,?XSP + 1
   \   00010F   EE           MOV       A,R6
   \   000110   FB           MOV       R3,A
   \   000111   7A80         MOV       R2,#-0x80
   \   000113   7948         MOV       R1,#0x48
   \   000115   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    221          #endif
    222              osal_msg_deallocate( msg_ptr );
   \   000118                ; Setup parameters for call to function osal_msg_deallocate
   \   000118   AA..         MOV       R2,?V2
   \   00011A   AB..         MOV       R3,?V3
   \   00011C   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    223            }
    224          }
   \                     ??MT_ProcessDebugMsg_0:
   \   00011F   740B         MOV       A,#0xb
   \   000121   12....       LCALL     ?DEALLOC_XSTACK8
   \   000124   7F06         MOV       R7,#0x6
   \   000126   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V1
   \   000004   F9           MOV       R1,A
   \   000005   8882         MOV       DPL,R0
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V1
   \   000004   FB           MOV       R3,A
   \   000005   8A82         MOV       DPL,R2
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   8882         MOV       DPL,R0
   \   00000C   8983         MOV       DPH,R1
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   8A82         MOV       DPL,R2
   \   000011   8B83         MOV       DPH,R3
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   8882         MOV       DPL,R0
   \   000017   8983         MOV       DPH,R1
   \   000019   A3           INC       DPTR
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   22           RET
    225          
    226          /***************************************************************************************************
    227           * @fn      MT_ProcessDebugStr
    228           *
    229           * @brief   Build and send a debug string.
    230           *
    231           * @param   byte *dstr - pointer to the data portion of the debug message
    232           *
    233           * @return  void
    234           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    235          void MT_ProcessDebugStr(mtDebugStr_t *dstr)
   \                     MT_ProcessDebugStr:
    236          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    237            byte *msg_ptr;
    238          
    239            /* Get a message buffer to build the debug message */
    240            msg_ptr = osal_mem_alloc( (byte)(SPI_0DATA_MSG_LEN + dstr->strLen) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   2405         ADD       A,#0x5
   \   000012   FA           MOV       R2,A
   \   000013   7B00         MOV       R3,#0x0
   \   000015   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000018   8A..         MOV       ?V2,R2
   \   00001A   8B..         MOV       ?V3,R3
   \   00001C   AF..         MOV       R7,?V3
    241            if ( msg_ptr )
   \   00001E   EA           MOV       A,R2
   \   00001F   4F           ORL       A,R7
   \   000020   6026         JZ        ??MT_ProcessDebugStr_0
    242            {
    243          #ifdef MT_UART_DEFAULT_PORT
    244              /* Debug message is set to AREQ CMD 0x80 for now */
    245              /* Build and send back the response */
    246              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_DBG), MT_DEBUG_MSG, dstr->strLen, dstr->pString);
   \   000022                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000022   85..82       MOV       DPL,?V0
   \   000025   85..83       MOV       DPH,?V1
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   FC           MOV       R4,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   FD           MOV       R5,A
   \   000030   85..82       MOV       DPL,?V0
   \   000033   85..83       MOV       DPH,?V1
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   FB           MOV       R3,A
   \   00003A   7A80         MOV       R2,#-0x80
   \   00003C   7948         MOV       R1,#0x48
   \   00003E   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    247          #endif
    248              osal_mem_free( msg_ptr );
   \   000041                ; Setup parameters for call to function osal_mem_free
   \   000041   AA..         MOV       R2,?V2
   \   000043   EF           MOV       A,R7
   \   000044   FB           MOV       R3,A
   \   000045   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    249            }
    250          }
   \                     ??MT_ProcessDebugStr_0:
   \   000048   7F04         MOV       R7,#0x4
   \   00004A   02....       LJMP      ?BANKED_LEAVE_XDATA
    251          
    252          /**************************************************************************************************
    253           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     25   MT_ProcessDebugMsg
        0     25   -> MT_BuildAndSendZToolResponse
        0     25   -> osal_msg_allocate
        0     25   -> osal_msg_deallocate
      0     12   MT_ProcessDebugStr
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      28  ?Subroutine0
      11  ?Subroutine1
     297  MT_ProcessDebugMsg
      77  MT_ProcessDebugStr
      12  -- Other

 
 413 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
 
  12 bytes of CODE     memory
 413 bytes of HUGECODE memory

Errors: none
Warnings: none
