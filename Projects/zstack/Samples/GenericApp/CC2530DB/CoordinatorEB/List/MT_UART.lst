###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               30/Aug/2019  09:21:30
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\ZStack-CC2530-2.5.1a\Components\mt\MT_UART.c
#    Command line       =  
#        -f C:\Users\Ð¡»ðÁú\AppData\Local\Temp\EW75A5.tmp
#        (D:\ZStack-CC2530-2.5.1a\Components\mt\MT_UART.c -D ZTOOL_P1 -D
#        MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x02000000 -DZDAPP_CONFIG_PAN_ID=0xFFF0
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\MT_UART.lst
#    Object file        =  
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\MT_UART.r51
#
###############################################################################

D:\ZStack-CC2530-2.5.1a\Components\mt\MT_UART.c
      1          /***************************************************************************************************
      2            Filename:       MT_UART.c
      3            Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19404 $
      5          
      6            Description:  This module handles anything dealing with the serial port.
      7          
      8            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38          ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "hal_uart.h"
     46          #include "MT.h"
     47          #include "MT_UART.h"
     48          #include "OSAL_Memory.h"
     49          
     50          
     51          /***************************************************************************************************
     52           * MACROS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           * CONSTANTS
     57           ***************************************************************************************************/
     58          /* State values for ZTool protocal */
     59          #define SOP_STATE      0x00
     60          #define CMD_STATE1     0x01
     61          #define CMD_STATE2     0x02
     62          #define LEN_STATE      0x03
     63          #define DATA_STATE     0x04
     64          #define FCS_STATE      0x05
     65          
     66          /***************************************************************************************************
     67           *                                         GLOBAL VARIABLES
     68           ***************************************************************************************************/
     69          /* Used to indentify the application ID for osal task */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     70          byte App_TaskID;
   \                     App_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     71          
     72          /* ZTool protocal parameters */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          uint8 state;
   \                     state:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     74          uint8  CMD_Token[2];
   \                     CMD_Token:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          uint8  LEN_Token;
   \                     LEN_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     76          uint8  FSC_Token;
   \                     FSC_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     77          mtOSALSerialData_t  *pMsg;
   \                     pMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     78          uint8  tempDataLen;
   \                     tempDataLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     79          
     80          #if defined (ZAPP_P1) || defined (ZAPP_P2)
     81          uint16  MT_UartMaxZAppBufLen;
     82          bool    MT_UartZAppRxStatus;
     83          #endif
     84          
     85          
     86          /***************************************************************************************************
     87           *                                          LOCAL FUNCTIONS
     88           ***************************************************************************************************/
     89          
     90          /***************************************************************************************************
     91           * @fn      MT_UartInit
     92           *
     93           * @brief   Initialize MT with UART support
     94           *
     95           * @param   None
     96           *
     97           * @return  None
     98          ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     99          void MT_UartInit ()
   \                     MT_UartInit:
    100          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV       A,#-0x1d
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    101            halUARTCfg_t uartConfig;
    102          
    103            /* Initialize APP ID */
    104            App_TaskID = 0;
   \   000009   90....       MOV       DPTR,#App_TaskID
   \   00000C   E4           CLR       A
   \   00000D   F0           MOVX      @DPTR,A
    105          
    106            /* UART Configuration */
    107            uartConfig.configured           = TRUE;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   04           INC       A
   \   000015   F0           MOVX      @DPTR,A
    108            uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   7404         MOV       A,#0x4
   \   00001B   F0           MOVX      @DPTR,A
    109            uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
   \   00001C   7402         MOV       A,#0x2
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   E4           CLR       A
   \   000022   F0           MOVX      @DPTR,A
    110            uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   000023   7403         MOV       A,#0x3
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   7440         MOV       A,#0x40
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   E4           CLR       A
   \   00002D   F0           MOVX      @DPTR,A
    111            uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \   00002E   740A         MOV       A,#0xa
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   7480         MOV       A,#-0x80
   \   000035   F0           MOVX      @DPTR,A
   \   000036   A3           INC       DPTR
   \   000037   E4           CLR       A
   \   000038   F0           MOVX      @DPTR,A
    112            uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \   000039   7412         MOV       A,#0x12
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   7480         MOV       A,#-0x80
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   E4           CLR       A
   \   000043   F0           MOVX      @DPTR,A
    113            uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \   000044   7405         MOV       A,#0x5
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   7406         MOV       A,#0x6
   \   00004B   F0           MOVX      @DPTR,A
    114            uartConfig.intEnable            = TRUE;
   \   00004C   7416         MOV       A,#0x16
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   7401         MOV       A,#0x1
   \   000053   F0           MOVX      @DPTR,A
    115          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    116            uartConfig.callBackFunc         = MT_UartProcessZToolData;
   \   000054   741B         MOV       A,#0x1b
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   74..         MOV       A,#`??MT_UartProcessZToolData::?relay` & 0xff
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   74..         MOV       A,#(`??MT_UartProcessZToolData::?relay` >> 8) & 0xff
   \   00005F   F0           MOVX      @DPTR,A
    117          #elif defined (ZAPP_P1) || defined (ZAPP_P2)
    118            uartConfig.callBackFunc         = MT_UartProcessZAppData;
    119          #else
    120            uartConfig.callBackFunc         = NULL;
    121          #endif
    122          
    123            /* Start UART */
    124          #if defined (MT_UART_DEFAULT_PORT)
    125            HalUARTOpen (MT_UART_DEFAULT_PORT, &uartConfig);
   \   000060                ; Setup parameters for call to function HalUARTOpen
   \   000060   AA..         MOV       R2,?XSP + 0
   \   000062   AB..         MOV       R3,?XSP + 1
   \   000064   7900         MOV       R1,#0x0
   \   000066   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    126          #else
    127            /* Silence IAR compiler warning */
    128            (void)uartConfig;
    129          #endif
    130          
    131            /* Initialize for ZApp */
    132          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    133            /* Default max bytes that ZAPP can take */
    134            MT_UartMaxZAppBufLen  = 1;
    135            MT_UartZAppRxStatus   = MT_UART_ZAPP_RX_READY;
    136          #endif
    137          
    138          }
   \   000069   741D         MOV       A,#0x1d
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006E                REQUIRE ?Subroutine0
   \   00006E                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    139          
    140          /***************************************************************************************************
    141           * @fn      MT_SerialRegisterTaskID
    142           *
    143           * @brief   This function registers the taskID of the application so it knows
    144           *          where to send the messages whent they come in.
    145           *
    146           * @param   void
    147           *
    148           * @return  void
    149           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          void MT_UartRegisterTaskID( byte taskID )
   \                     MT_UartRegisterTaskID:
    151          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    152            App_TaskID = taskID;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#App_TaskID
   \   000008   F0           MOVX      @DPTR,A
    153          }
   \   000009   80..         SJMP      ?Subroutine0
    154          
    155          /***************************************************************************************************
    156           * @fn      SPIMgr_CalcFCS
    157           *
    158           * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
    159           *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
    160           *
    161           * @param   byte *msg_ptr - message pointer
    162           * @param   byte len - length (in bytes) of message
    163           *
    164           * @return  result byte
    165           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    166          byte MT_UartCalcFCS( uint8 *msg_ptr, uint8 len )
   \                     MT_UartCalcFCS:
    167          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FC           MOV       R4,A
    168            byte x;
    169            byte xorResult;
    170          
    171            xorResult = 0;
   \   000006   7900         MOV       R1,#0x0
    172          
    173            for ( x = 0; x < len; x++, msg_ptr++ )
   \   000008   7800         MOV       R0,#0x0
   \   00000A   800E         SJMP      ??MT_UartCalcFCS_0
    174              xorResult = xorResult ^ *msg_ptr;
   \                     ??MT_UartCalcFCS_1:
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   E0           MOVX      A,@DPTR
   \   000011   C9           XCH       A,R1
   \   000012   69           XRL       A,R1
   \   000013   F9           MOV       R1,A
   \   000014   08           INC       R0
   \   000015   A3           INC       DPTR
   \   000016   AA82         MOV       R2,DPL
   \   000018   AB83         MOV       R3,DPH
   \                     ??MT_UartCalcFCS_0:
   \   00001A   E8           MOV       A,R0
   \   00001B   C3           CLR       C
   \   00001C   9C           SUBB      A,R4
   \   00001D   40ED         JC        ??MT_UartCalcFCS_1
    175          
    176            return ( xorResult );
   \   00001F   80..         SJMP      ?Subroutine0
    177          }
    178          
    179          
    180          /***************************************************************************************************
    181           * @fn      MT_UartProcessZToolData
    182           *
    183           * @brief   | SOP | Data Length  |   CMD   |   Data   |  FCS  |
    184           *          |  1  |     1        |    2    |  0-Len   |   1   |
    185           *
    186           *          Parses the data and determine either is SPI or just simply serial data
    187           *          then send the data to correct place (MT or APP)
    188           *
    189           * @param   port     - UART port
    190           *          event    - Event that causes the callback
    191           *
    192           *
    193           * @return  None
    194           ***************************************************************************************************/
    195          //void MT_UartProcessZToolData ( uint8 port, uint8 event )
    196          //{
    197          //  uint8  ch;
    198          //  uint8  bytesInRxBuffer;
    199          //
    200          //  (void)event;  // Intentionally unreferenced parameter
    201          //
    202          //  while (Hal_UART_RxBufLen(port))
    203          //  {
    204          //    HalUARTRead (port, &ch, 1);
    205          //
    206          //    switch (state)
    207          //    {
    208          //      case SOP_STATE:
    209          //        if (ch == MT_UART_SOF)
    210          //          state = LEN_STATE;
    211          //        break;
    212          //
    213          //      case LEN_STATE:
    214          //        LEN_Token = ch;
    215          //
    216          //        tempDataLen = 0;
    217          //
    218          //        /* Allocate memory for the data ·ÖÅäÄÚ´æ¿Õ¼ä*/
    219          //        pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof ( mtOSALSerialData_t ) +
    220          //                                                        MT_RPC_FRAME_HDR_SZ + LEN_Token );
    221          //
    222          //        if (pMsg)  //Èç¹û·ÖÅä³É¹¦
    223          //        {
    224          //          /* Fill up what we can */
    225          //          pMsg->hdr.event = CMD_SERIAL_MSG;  //×¢²áÊÂ¼þºÅ CMD_SERIAL_MSG
    226          //          pMsg->msg = (uint8*)(pMsg+1);  //¶¨Î»Êý¾ÝÎ»ÖÃ
    227          //          pMsg->msg[MT_RPC_POS_LEN] = LEN_Token;
    228          //          state = CMD_STATE1;
    229          //        }
    230          //        else
    231          //        {
    232          //          state = SOP_STATE;
    233          //          return;
    234          //        }
    235          //        break;
    236          //
    237          //      case CMD_STATE1:
    238          //        pMsg->msg[MT_RPC_POS_CMD0] = ch;
    239          //        state = CMD_STATE2;
    240          //        break;
    241          //
    242          //      case CMD_STATE2:
    243          //        pMsg->msg[MT_RPC_POS_CMD1] = ch;
    244          //        /* If there is no data, skip to FCS state */
    245          //        if (LEN_Token)
    246          //        {
    247          //          state = DATA_STATE;
    248          //        }
    249          //        else
    250          //        {
    251          //          state = FCS_STATE;
    252          //        }
    253          //        break;
    254          //
    255          //      case DATA_STATE:
    256          //
    257          //        /* Fill in the buffer the first byte of the data */
    258          //        pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen++] = ch;
    259          //
    260          //        /* Check number of bytes left in the Rx buffer */
    261          //        bytesInRxBuffer = Hal_UART_RxBufLen(port);
    262          //
    263          //        /* If the remain of the data is there, read them all, otherwise, just read enough */
    264          //        if (bytesInRxBuffer <= LEN_Token - tempDataLen)
    265          //        {
    266          //          HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], bytesInRxBuffer);
    267          //          tempDataLen += bytesInRxBuffer;
    268          //        }
    269          //        else
    270          //        {
    271          //          HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], LEN_Token - tempDataLen);
    272          //          tempDataLen += (LEN_Token - tempDataLen);
    273          //        }
    274          //
    275          //        /* If number of bytes read is equal to data length, time to move on to FCS */
    276          //        if ( tempDataLen == LEN_Token )
    277          //            state = FCS_STATE;
    278          //
    279          //        break;
    280          //
    281          //      case FCS_STATE:
    282          //
    283          //        FSC_Token = ch;
    284          //
    285          //        /* Make sure it's correct */
    286          //        if ((MT_UartCalcFCS ((uint8*)&pMsg->msg[0], MT_RPC_FRAME_HDR_SZ + LEN_Token) == FSC_Token))
    287          //        {
    288          //          osal_msg_send( App_TaskID, (byte *)pMsg ); //***°ÑÊý¾Ý°ü·¢ËÍµ½OSAL²ã
    289          //        }
    290          //        else
    291          //        {
    292          //          /* deallocate the msg */
    293          //          osal_msg_deallocate ( (uint8 *)pMsg );  //ÇåÀíÉêÇëµÄÄÚ´æ¿Õ¼ä
    294          //        }
    295          //
    296          //        /* Reset the state, send or discard the buffers at this point */
    297          //        state = SOP_STATE; //×´Ì¬»úÒ»ÖÜÆÚÍê³É
    298          //
    299          //        break;
    300          //
    301          //      default:
    302          //       break;
    303          //    }
    304          //  }
    305          //}
    306          
    307          
    308          
    309          
    310          
    311          //WeBee´úÂë(Êý¾ÝÍ¸´«)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    312          void MT_UartProcessZToolData ( uint8 port, uint8 event )
   \                     MT_UartProcessZToolData:
    313          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 128
   \   000005   7480         MOV       A,#-0x80
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
    314            uint8 flag=0,i,j=0; //flag  ÊÇÅÐ¶ÏÓÐÃ»ÓÐÊÕµ½Êý¾Ý£¬j  ¼ÇÂ¼Êý¾Ý³¤¶È
   \   00000C   7E00         MOV       R6,#0x0
   \   00000E   75..00       MOV       ?V0,#0x0
    315            uint8 buf[128]; // ´®¿Ú buffer  ×î´ó»º³åÄ¬ÈÏÊÇ 128 £¬ÎÒÃÇÕâÀïÓÃ 128.
    316            (void)event; // Intentionally unreferenced parameter
   \   000011   801D         SJMP      ??MT_UartProcessZToolData_0
    317            while (Hal_UART_RxBufLen(port)) // ¼ì²â´®¿ÚÊý¾ÝÊÇ·ñ½ÓÊÕÍê³É
    318            {
    319              HalUARTRead (port,&buf[j], 1); // °ÑÊý¾Ý½ÓÊÕ·Åµ½ buf  ÖÐ
   \                     ??MT_UartProcessZToolData_1:
   \   000013                ; Setup parameters for call to function HalUARTRead
   \   000013   7C01         MOV       R4,#0x1
   \   000015   7D00         MOV       R5,#0x0
   \   000017   A8..         MOV       R0,?V0
   \   000019   85..82       MOV       DPL,?XSP + 0
   \   00001C   85..83       MOV       DPH,?XSP + 1
   \   00001F   E582         MOV       A,DPL
   \   000021   28           ADD       A,R0
   \   000022   FA           MOV       R2,A
   \   000023   E4           CLR       A
   \   000024   3583         ADDC      A,DPH
   \   000026   FB           MOV       R3,A
   \   000027   EF           MOV       A,R7
   \   000028   F9           MOV       R1,A
   \   000029   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
    320              j++; // ¼ÇÂ¼×Ö·ûÊý
   \   00002C   05..         INC       ?V0
    321              flag=1; //ÒÑ¾­´Ó´®¿Ú½Ó ÒÑ¾­´Ó´®¿Ú½Ó ÊÕµ½ÐÅÏ¢
   \   00002E   7E01         MOV       R6,#0x1
    322            }
   \                     ??MT_UartProcessZToolData_0:
   \   000030                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000030   EF           MOV       A,R7
   \   000031   F9           MOV       R1,A
   \   000032   12....       LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   000035   EA           MOV       A,R2
   \   000036   4B           ORL       A,R3
   \   000037   70DA         JNZ       ??MT_UartProcessZToolData_1
    323            if(flag==1) // ÒÑ¾­´Ó´®¿Ú½ÓÊÕµ½ÐÅÏ¢
   \   000039   EE           MOV       A,R6
   \   00003A   7003         JNZ       $+5
   \   00003C   02....       LJMP      ??MT_UartProcessZToolData_2 & 0xFFFF
    324            {
    325              /* Allocate memory for the data */
    326              // ·ÖÅäÄÚ´æ¿Õ¼ä£¬Îª»ú¹¹ÌåÄÚÈÝ+ Êý¾ÝÄÚÈÝ+1  ¸ö¼ÇÂ¼³¤¶ÈµÄÊý¾Ý
    327              pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof
    328              ( mtOSALSerialData_t )+j+1);
   \   00003F                ; Setup parameters for call to function osal_msg_allocate
   \   00003F   E5..         MOV       A,?V0
   \   000041   2405         ADD       A,#0x5
   \   000043   FA           MOV       R2,A
   \   000044   E4           CLR       A
   \   000045   3400         ADDC      A,#0x0
   \   000047   FB           MOV       R3,A
   \   000048   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00004B   90....       MOV       DPTR,#pMsg
   \   00004E   EA           MOV       A,R2
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   EB           MOV       A,R3
   \   000052   F0           MOVX      @DPTR,A
    329              // ÊÂ¼þºÅÓÃÔ­À´µÄ CMD_SERIAL_MSG
    330              pMsg->hdr.event = CMD_SERIAL_MSG;
   \   000053   F583         MOV       DPH,A
   \   000055   8A82         MOV       DPL,R2
   \   000057   7401         MOV       A,#0x1
   \   000059   F0           MOVX      @DPTR,A
    331              pMsg->msg = (uint8*)(pMsg+1); //  °ÑÊý¾Ý¶¨Î»µ½½á¹¹ÌåÊý¾Ý²¿·Ö
   \   00005A   90....       MOV       DPTR,#pMsg
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   2404         ADD       A,#0x4
   \   000060   F8           MOV       R0,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   3400         ADDC      A,#0x0
   \   000065   F9           MOV       R1,A
   \   000066   90....       MOV       DPTR,#pMsg
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   FA           MOV       R2,A
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F583         MOV       DPH,A
   \   00006F   8A82         MOV       DPL,R2
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   E8           MOV       A,R0
   \   000074   F0           MOVX      @DPTR,A
   \   000075   A3           INC       DPTR
   \   000076   E9           MOV       A,R1
   \   000077   F0           MOVX      @DPTR,A
    332              pMsg->msg [0]= j; // ¸øÉÏ²ãµÄÊý¾ÝµÚÒ»¸öÊÇ³¤¶È
   \   000078   8882         MOV       DPL,R0
   \   00007A   8983         MOV       DPH,R1
   \   00007C   E5..         MOV       A,?V0
   \   00007E   F0           MOVX      @DPTR,A
    333              for(i=0;i<j;i++) // ´ÓµÚ¶þ¸ö¿ªÊ¼¼ÇÂ¼Êý¾Ý
   \   00007F   7A00         MOV       R2,#0x0
   \   000081   8032         SJMP      ??MT_UartProcessZToolData_3
    334              pMsg->msg [i+1]= buf[i];
   \                     ??MT_UartProcessZToolData_4:
   \   000083   EA           MOV       A,R2
   \   000084   F8           MOV       R0,A
   \   000085   85..82       MOV       DPL,?XSP + 0
   \   000088   85..83       MOV       DPH,?XSP + 1
   \   00008B   E582         MOV       A,DPL
   \   00008D   28           ADD       A,R0
   \   00008E   F582         MOV       DPL,A
   \   000090   E4           CLR       A
   \   000091   3583         ADDC      A,DPH
   \   000093   F583         MOV       DPH,A
   \   000095   E0           MOVX      A,@DPTR
   \   000096   C0E0         PUSH      A
   \   000098   90....       MOV       DPTR,#pMsg
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   FB           MOV       R3,A
   \   00009D   A3           INC       DPTR
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   F583         MOV       DPH,A
   \   0000A1   8B82         MOV       DPL,R3
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   28           ADD       A,R0
   \   0000A7   FB           MOV       R3,A
   \   0000A8   A3           INC       DPTR
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   3400         ADDC      A,#0x0
   \   0000AC   8B82         MOV       DPL,R3
   \   0000AE   F583         MOV       DPH,A
   \   0000B0   A3           INC       DPTR
   \   0000B1   D0E0         POP       A
   \   0000B3   F0           MOVX      @DPTR,A
   \   0000B4   0A           INC       R2
   \                     ??MT_UartProcessZToolData_3:
   \   0000B5   EA           MOV       A,R2
   \   0000B6   C3           CLR       C
   \   0000B7   95..         SUBB      A,?V0
   \   0000B9   40C8         JC        ??MT_UartProcessZToolData_4
    335              osal_msg_send( App_TaskID, (byte *)pMsg ); // µÇ¼ÇÈÎÎñ£¬·¢ÍùÉÏ²ã
   \   0000BB                ; Setup parameters for call to function osal_msg_send
   \   0000BB   90....       MOV       DPTR,#pMsg
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   FA           MOV       R2,A
   \   0000C0   A3           INC       DPTR
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   FB           MOV       R3,A
   \   0000C3   90....       MOV       DPTR,#App_TaskID
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   F9           MOV       R1,A
   \   0000C8   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    336              /* deallocate the msg */
    337              osal_msg_deallocate ( (uint8 *)pMsg ); // ÊÍ·ÅÄÚ´æ
   \   0000CB                ; Setup parameters for call to function osal_msg_deallocate
   \   0000CB   90....       MOV       DPTR,#pMsg
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   FA           MOV       R2,A
   \   0000D0   A3           INC       DPTR
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   FB           MOV       R3,A
   \   0000D3   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    338            }
    339          }
   \                     ??MT_UartProcessZToolData_2:
   \   0000D6   7480         MOV       A,#-0x80
   \   0000D8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DB   7F04         MOV       R7,#0x4
   \   0000DD   02....       LJMP      ?BANKED_LEAVE_XDATA
    340          
    341          
    342          
    343          
    344          
    345          
    346          
    347          
    348          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    349          /***************************************************************************************************
    350           * @fn      MT_UartProcessZAppData
    351           *
    352           * @brief   | SOP | CMD  |   Data Length   | FSC  |
    353           *          |  1  |  2   |       1         |  1   |
    354           *
    355           *          Parses the data and determine either is SPI or just simply serial data
    356           *          then send the data to correct place (MT or APP)
    357           *
    358           * @param   port    - UART port
    359           *          event   - Event that causes the callback
    360           *
    361           *
    362           * @return  None
    363           ***************************************************************************************************/
    364          void MT_UartProcessZAppData ( uint8 port, uint8 event )
    365          {
    366          
    367            osal_event_hdr_t  *msg_ptr;
    368            uint16 length = 0;
    369            uint16 rxBufLen  = Hal_UART_RxBufLen(MT_UART_DEFAULT_PORT);
    370          
    371            /*
    372               If maxZAppBufferLength is 0 or larger than current length
    373               the entire length of the current buffer is returned.
    374            */
    375            if ((MT_UartMaxZAppBufLen != 0) && (MT_UartMaxZAppBufLen <= rxBufLen))
    376            {
    377              length = MT_UartMaxZAppBufLen;
    378            }
    379            else
    380            {
    381              length = rxBufLen;
    382            }
    383          
    384            /* Verify events */
    385            if (event == HAL_UART_TX_FULL)
    386            {
    387              // Do something when TX if full
    388              return;
    389            }
    390          
    391            if (event & ( HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
    392            {
    393              if ( App_TaskID )
    394              {
    395                /*
    396                   If Application is ready to receive and there is something
    397                   in the Rx buffer then send it up
    398                */
    399                if ((MT_UartZAppRxStatus == MT_UART_ZAPP_RX_READY ) && (length != 0))
    400                {
    401                  /* Disable App flow control until it processes the current data */
    402                   MT_UartAppFlowControl (MT_UART_ZAPP_RX_NOT_READY);
    403          
    404                  /* 2 more bytes are added, 1 for CMD type, other for length */
    405                  msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( length + sizeof(osal_event_hdr_t) );
    406                  if ( msg_ptr )
    407                  {
    408                    msg_ptr->event = SPI_INCOMING_ZAPP_DATA;
    409                    msg_ptr->status = length;
    410          
    411                    /* Read the data of Rx buffer */
    412                    HalUARTRead( MT_UART_DEFAULT_PORT, (uint8 *)(msg_ptr + 1), length );
    413          
    414                    /* Send the raw data to application...or where ever */
    415                    osal_msg_send( App_TaskID, (uint8 *)msg_ptr );
    416                  }
    417                }
    418              }
    419            }
    420          }
    421          
    422          /***************************************************************************************************
    423           * @fn      SPIMgr_ZAppBufferLengthRegister
    424           *
    425           * @brief
    426           *
    427           * @param   maxLen - Max Length that the application wants at a time
    428           *
    429           * @return  None
    430           *
    431           ***************************************************************************************************/
    432          void MT_UartZAppBufferLengthRegister ( uint16 maxLen )
    433          {
    434            /* If the maxLen is larger than the RX buff, something is not right */
    435            if (maxLen <= MT_UART_DEFAULT_MAX_RX_BUFF)
    436              MT_UartMaxZAppBufLen = maxLen;
    437            else
    438              MT_UartMaxZAppBufLen = 1; /* default is 1 byte */
    439          }
    440          
    441          /***************************************************************************************************
    442           * @fn      SPIMgr_AppFlowControl
    443           *
    444           * @brief
    445           *
    446           * @param   status - ready to send or not
    447           *
    448           * @return  None
    449           *
    450           ***************************************************************************************************/
    451          void MT_UartAppFlowControl ( bool status )
    452          {
    453          
    454            /* Make sure only update if needed */
    455            if (status != MT_UartZAppRxStatus )
    456            {
    457              MT_UartZAppRxStatus = status;
    458            }
    459          
    460            /* App is ready to read again, ProcessZAppData have to be triggered too */
    461            if (status == MT_UART_ZAPP_RX_READY)
    462            {
    463              MT_UartProcessZAppData (MT_UART_DEFAULT_PORT, HAL_UART_RX_TIMEOUT );
    464            }
    465          
    466          }
    467          
    468          #endif //ZAPP
    469          
    470          /***************************************************************************************************
    471          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   MT_UartCalcFCS
      2     29   MT_UartInit
        2     29   -> HalUARTOpen
      1    140   MT_UartProcessZToolData
        0    140   -> HalUARTRead
        0    140   -> Hal_UART_RxBufLen
        0    140   -> osal_msg_allocate
        0    140   -> osal_msg_deallocate
        0    140   -> osal_msg_send
      2      0   MT_UartRegisterTaskID


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?Subroutine0
       1  App_TaskID
       2  CMD_Token
       1  FSC_Token
       1  LEN_Token
      33  MT_UartCalcFCS
     110  MT_UartInit
     224  MT_UartProcessZToolData
      11  MT_UartRegisterTaskID
       2  pMsg
       1  state
       1  tempDataLen
      24  -- Other

 
 385 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   9 bytes in segment XDATA_Z
 
  24 bytes of CODE     memory
 385 bytes of HUGECODE memory
   9 bytes of XDATA    memory

Errors: none
Warnings: none
