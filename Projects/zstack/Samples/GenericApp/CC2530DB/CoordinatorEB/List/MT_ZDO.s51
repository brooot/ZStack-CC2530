///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              30/Aug/2019  09:21:30
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  D:\ZStack-CC2530-2.5.1a\Components\mt\MT_ZDO.c
//    Command line       =  
//        -f C:\Users\Ð¡»ðÁú\AppData\Local\Temp\EW76E0.tmp
//        (D:\ZStack-CC2530-2.5.1a\Components\mt\MT_ZDO.c -D ZTOOL_P1 -D
//        MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List
//        -lA
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x02000000 -DZDAPP_CONFIG_PAN_ID=0xFFF0
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes --no_code_motion)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\MT_ZDO.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME MT_ZDO

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_Z

        PUBLIC `??MT_ZdoActiveEpRequest::?relay`
        FUNCTION `??MT_ZdoActiveEpRequest::?relay`,0203H
        PUBLIC `??MT_ZdoBeaconIndCB::?relay`
        FUNCTION `??MT_ZdoBeaconIndCB::?relay`,0203H
        PUBLIC `??MT_ZdoBindRequest::?relay`
        FUNCTION `??MT_ZdoBindRequest::?relay`,0203H
        PUBLIC `??MT_ZdoCommandProcessing::?relay`
        FUNCTION `??MT_ZdoCommandProcessing::?relay`,0203H
        PUBLIC `??MT_ZdoComplexDescRequest::?relay`
        FUNCTION `??MT_ZdoComplexDescRequest::?relay`,0203H
        PUBLIC `??MT_ZdoEndDevAnnce::?relay`
        FUNCTION `??MT_ZdoEndDevAnnce::?relay`,0203H
        PUBLIC `??MT_ZdoEndDevBindRequest::?relay`
        FUNCTION `??MT_ZdoEndDevBindRequest::?relay`,0203H
        PUBLIC `??MT_ZdoIEEEAddrRequest::?relay`
        FUNCTION `??MT_ZdoIEEEAddrRequest::?relay`,0203H
        PUBLIC `??MT_ZdoInit::?relay`
        FUNCTION `??MT_ZdoInit::?relay`,0203H
        PUBLIC `??MT_ZdoJoinCnfCB::?relay`
        FUNCTION `??MT_ZdoJoinCnfCB::?relay`,0203H
        PUBLIC `??MT_ZdoJoinReq::?relay`
        FUNCTION `??MT_ZdoJoinReq::?relay`,0203H
        PUBLIC `??MT_ZdoMatchDescRequest::?relay`
        FUNCTION `??MT_ZdoMatchDescRequest::?relay`,0203H
        PUBLIC `??MT_ZdoNWKAddressRequest::?relay`
        FUNCTION `??MT_ZdoNWKAddressRequest::?relay`,0203H
        PUBLIC `??MT_ZdoNetworkDiscoveryReq::?relay`
        FUNCTION `??MT_ZdoNetworkDiscoveryReq::?relay`,0203H
        PUBLIC `??MT_ZdoNodeDescRequest::?relay`
        FUNCTION `??MT_ZdoNodeDescRequest::?relay`,0203H
        PUBLIC `??MT_ZdoNwkDiscoveryCnfCB::?relay`
        FUNCTION `??MT_ZdoNwkDiscoveryCnfCB::?relay`,0203H
        PUBLIC `??MT_ZdoPowerDescRequest::?relay`
        FUNCTION `??MT_ZdoPowerDescRequest::?relay`,0203H
        PUBLIC `??MT_ZdoRegisterForZDOMsg::?relay`
        FUNCTION `??MT_ZdoRegisterForZDOMsg::?relay`,0203H
        PUBLIC `??MT_ZdoRemoveRegisteredCB::?relay`
        FUNCTION `??MT_ZdoRemoveRegisteredCB::?relay`,0203H
        PUBLIC `??MT_ZdoSendMsgCB::?relay`
        FUNCTION `??MT_ZdoSendMsgCB::?relay`,0203H
        PUBLIC `??MT_ZdoServiceDiscRequest::?relay`
        FUNCTION `??MT_ZdoServiceDiscRequest::?relay`,0203H
        PUBLIC `??MT_ZdoSimpleDescRequest::?relay`
        FUNCTION `??MT_ZdoSimpleDescRequest::?relay`,0203H
        PUBLIC `??MT_ZdoStartupFromApp::?relay`
        FUNCTION `??MT_ZdoStartupFromApp::?relay`,0203H
        PUBLIC `??MT_ZdoUnbindRequest::?relay`
        FUNCTION `??MT_ZdoUnbindRequest::?relay`,0203H
        PUBLIC `??MT_ZdoUserDescRequest::?relay`
        FUNCTION `??MT_ZdoUserDescRequest::?relay`,0203H
        PUBLIC `??MT_ZdoUserDescSet::?relay`
        FUNCTION `??MT_ZdoUserDescSet::?relay`,0203H
        PUBLIC MT_ZdoActiveEpRequest
        FUNCTION MT_ZdoActiveEpRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoBeaconIndCB
        FUNCTION MT_ZdoBeaconIndCB,0a1603H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC MT_ZdoBindRequest
        FUNCTION MT_ZdoBindRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC MT_ZdoCommandProcessing
        FUNCTION MT_ZdoCommandProcessing,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MT_ZdoComplexDescRequest
        FUNCTION MT_ZdoComplexDescRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoEndDevAnnce
        FUNCTION MT_ZdoEndDevAnnce,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC MT_ZdoEndDevBindRequest
        FUNCTION MT_ZdoEndDevBindRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 95, STACK
        PUBLIC MT_ZdoIEEEAddrRequest
        FUNCTION MT_ZdoIEEEAddrRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC MT_ZdoInit
        FUNCTION MT_ZdoInit,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC MT_ZdoJoinCnfCB
        FUNCTION MT_ZdoJoinCnfCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC MT_ZdoJoinReq
        FUNCTION MT_ZdoJoinReq,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC MT_ZdoMatchDescRequest
        FUNCTION MT_ZdoMatchDescRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 96, STACK
        PUBLIC MT_ZdoNWKAddressRequest
        FUNCTION MT_ZdoNWKAddressRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoNetworkDiscoveryReq
        FUNCTION MT_ZdoNetworkDiscoveryReq,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC MT_ZdoNodeDescRequest
        FUNCTION MT_ZdoNodeDescRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoNwkDiscoveryCnfCB
        FUNCTION MT_ZdoNwkDiscoveryCnfCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MT_ZdoPowerDescRequest
        FUNCTION MT_ZdoPowerDescRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoRegisterForZDOMsg
        FUNCTION MT_ZdoRegisterForZDOMsg,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoRemoveRegisteredCB
        FUNCTION MT_ZdoRemoveRegisteredCB,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoSendMsgCB
        FUNCTION MT_ZdoSendMsgCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC MT_ZdoServiceDiscRequest
        FUNCTION MT_ZdoServiceDiscRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoSimpleDescRequest
        FUNCTION MT_ZdoSimpleDescRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoStartupFromApp
        FUNCTION MT_ZdoStartupFromApp,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoUnbindRequest
        FUNCTION MT_ZdoUnbindRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC MT_ZdoUserDescRequest
        FUNCTION MT_ZdoUserDescRequest,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoUserDescSet
        FUNCTION MT_ZdoUserDescSet,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 45, STACK
        PUBLIC _zdoCallbackSub
        PUBLIC pBeaconIndBuf
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
`??MT_BuildAndSendZToolResponse::?relay` SYMBOL "?relay", MT_BuildAndSendZToolResponse
ZDApp_JoinReq       SYMBOL "ZDApp_JoinReq"
`??ZDApp_JoinReq::?relay` SYMBOL "?relay", ZDApp_JoinReq
ZDApp_NetworkDiscoveryReq SYMBOL "ZDApp_NetworkDiscoveryReq"
`??ZDApp_NetworkDiscoveryReq::?relay` SYMBOL "?relay", ZDApp_NetworkDiscoveryReq
ZDOInitDevice       SYMBOL "ZDOInitDevice"
`??ZDOInitDevice::?relay` SYMBOL "?relay", ZDOInitDevice
ZDO_DeregisterForZdoCB SYMBOL "ZDO_DeregisterForZdoCB"
`??ZDO_DeregisterForZdoCB::?relay` SYMBOL "?relay", ZDO_DeregisterForZdoCB
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDO_RegisterForZdoCB SYMBOL "ZDO_RegisterForZdoCB"
`??ZDO_RegisterForZdoCB::?relay` SYMBOL "?relay", ZDO_RegisterForZdoCB
ZDO_RemoveRegisteredCB SYMBOL "ZDO_RemoveRegisteredCB"
`??ZDO_RemoveRegisteredCB::?relay` SYMBOL "?relay", ZDO_RemoveRegisteredCB
ZDP_BindUnbindReq   SYMBOL "ZDP_BindUnbindReq"
`??ZDP_BindUnbindReq::?relay` SYMBOL "?relay", ZDP_BindUnbindReq
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
`??ZDP_DeviceAnnce::?relay` SYMBOL "?relay", ZDP_DeviceAnnce
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
`??ZDP_EndDeviceBindReq::?relay` SYMBOL "?relay", ZDP_EndDeviceBindReq
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
`??ZDP_IEEEAddrReq::?relay` SYMBOL "?relay", ZDP_IEEEAddrReq
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
`??ZDP_MatchDescReq::?relay` SYMBOL "?relay", ZDP_MatchDescReq
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
`??ZDP_NWKAddrOfInterestReq::?relay` SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
`??ZDP_NwkAddrReq::?relay` SYMBOL "?relay", ZDP_NwkAddrReq
ZDP_ServerDiscReq   SYMBOL "ZDP_ServerDiscReq"
`??ZDP_ServerDiscReq::?relay` SYMBOL "?relay", ZDP_ServerDiscReq
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
`??ZDP_SimpleDescReq::?relay` SYMBOL "?relay", ZDP_SimpleDescReq
ZDP_UserDescSet     SYMBOL "ZDP_UserDescSet"
`??ZDP_UserDescSet::?relay` SYMBOL "?relay", ZDP_UserDescSet
osal_build_uint32   SYMBOL "osal_build_uint32"
`??osal_build_uint32::?relay` SYMBOL "?relay", osal_build_uint32
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
MT_ZdoActiveEpRequest SYMBOL "MT_ZdoActiveEpRequest"
`??MT_ZdoActiveEpRequest::?relay` SYMBOL "?relay", MT_ZdoActiveEpRequest
MT_ZdoBeaconIndCB   SYMBOL "MT_ZdoBeaconIndCB"
`??MT_ZdoBeaconIndCB::?relay` SYMBOL "?relay", MT_ZdoBeaconIndCB
MT_ZdoBindRequest   SYMBOL "MT_ZdoBindRequest"
`??MT_ZdoBindRequest::?relay` SYMBOL "?relay", MT_ZdoBindRequest
MT_ZdoCommandProcessing SYMBOL "MT_ZdoCommandProcessing"
`??MT_ZdoCommandProcessing::?relay` SYMBOL "?relay", MT_ZdoCommandProcessing
MT_ZdoComplexDescRequest SYMBOL "MT_ZdoComplexDescRequest"
`??MT_ZdoComplexDescRequest::?relay` SYMBOL "?relay", MT_ZdoComplexDescRequest
MT_ZdoEndDevAnnce   SYMBOL "MT_ZdoEndDevAnnce"
`??MT_ZdoEndDevAnnce::?relay` SYMBOL "?relay", MT_ZdoEndDevAnnce
MT_ZdoEndDevBindRequest SYMBOL "MT_ZdoEndDevBindRequest"
`??MT_ZdoEndDevBindRequest::?relay` SYMBOL "?relay", MT_ZdoEndDevBindRequest
MT_ZdoIEEEAddrRequest SYMBOL "MT_ZdoIEEEAddrRequest"
`??MT_ZdoIEEEAddrRequest::?relay` SYMBOL "?relay", MT_ZdoIEEEAddrRequest
MT_ZdoInit          SYMBOL "MT_ZdoInit"
`??MT_ZdoInit::?relay` SYMBOL "?relay", MT_ZdoInit
MT_ZdoJoinCnfCB     SYMBOL "MT_ZdoJoinCnfCB"
`??MT_ZdoJoinCnfCB::?relay` SYMBOL "?relay", MT_ZdoJoinCnfCB
MT_ZdoJoinReq       SYMBOL "MT_ZdoJoinReq"
`??MT_ZdoJoinReq::?relay` SYMBOL "?relay", MT_ZdoJoinReq
MT_ZdoMatchDescRequest SYMBOL "MT_ZdoMatchDescRequest"
`??MT_ZdoMatchDescRequest::?relay` SYMBOL "?relay", MT_ZdoMatchDescRequest
MT_ZdoNWKAddressRequest SYMBOL "MT_ZdoNWKAddressRequest"
`??MT_ZdoNWKAddressRequest::?relay` SYMBOL "?relay", MT_ZdoNWKAddressRequest
MT_ZdoNetworkDiscoveryReq SYMBOL "MT_ZdoNetworkDiscoveryReq"
`??MT_ZdoNetworkDiscoveryReq::?relay` SYMBOL "?relay", MT_ZdoNetworkDiscoveryReq
MT_ZdoNodeDescRequest SYMBOL "MT_ZdoNodeDescRequest"
`??MT_ZdoNodeDescRequest::?relay` SYMBOL "?relay", MT_ZdoNodeDescRequest
MT_ZdoNwkDiscoveryCnfCB SYMBOL "MT_ZdoNwkDiscoveryCnfCB"
`??MT_ZdoNwkDiscoveryCnfCB::?relay` SYMBOL "?relay", MT_ZdoNwkDiscoveryCnfCB
MT_ZdoPowerDescRequest SYMBOL "MT_ZdoPowerDescRequest"
`??MT_ZdoPowerDescRequest::?relay` SYMBOL "?relay", MT_ZdoPowerDescRequest
MT_ZdoRegisterForZDOMsg SYMBOL "MT_ZdoRegisterForZDOMsg"
`??MT_ZdoRegisterForZDOMsg::?relay` SYMBOL "?relay", MT_ZdoRegisterForZDOMsg
MT_ZdoRemoveRegisteredCB SYMBOL "MT_ZdoRemoveRegisteredCB"
`??MT_ZdoRemoveRegisteredCB::?relay` SYMBOL "?relay", MT_ZdoRemoveRegisteredCB
MT_ZdoSendMsgCB     SYMBOL "MT_ZdoSendMsgCB"
`??MT_ZdoSendMsgCB::?relay` SYMBOL "?relay", MT_ZdoSendMsgCB
MT_ZdoServiceDiscRequest SYMBOL "MT_ZdoServiceDiscRequest"
`??MT_ZdoServiceDiscRequest::?relay` SYMBOL "?relay", MT_ZdoServiceDiscRequest
MT_ZdoSimpleDescRequest SYMBOL "MT_ZdoSimpleDescRequest"
`??MT_ZdoSimpleDescRequest::?relay` SYMBOL "?relay", MT_ZdoSimpleDescRequest
MT_ZdoStartupFromApp SYMBOL "MT_ZdoStartupFromApp"
`??MT_ZdoStartupFromApp::?relay` SYMBOL "?relay", MT_ZdoStartupFromApp
MT_ZdoUnbindRequest SYMBOL "MT_ZdoUnbindRequest"
`??MT_ZdoUnbindRequest::?relay` SYMBOL "?relay", MT_ZdoUnbindRequest
MT_ZdoUserDescRequest SYMBOL "MT_ZdoUserDescRequest"
`??MT_ZdoUserDescRequest::?relay` SYMBOL "?relay", MT_ZdoUserDescRequest
MT_ZdoUserDescSet   SYMBOL "MT_ZdoUserDescSet"
`??MT_ZdoUserDescSet::?relay` SYMBOL "?relay", MT_ZdoUserDescSet

        EXTERN `??MT_BuildAndSendZToolResponse::?relay`
        FUNCTION `??MT_BuildAndSendZToolResponse::?relay`,00H
        EXTERN `??ZDApp_JoinReq::?relay`
        FUNCTION `??ZDApp_JoinReq::?relay`,00H
        EXTERN `??ZDApp_NetworkDiscoveryReq::?relay`
        FUNCTION `??ZDApp_NetworkDiscoveryReq::?relay`,00H
        EXTERN `??ZDOInitDevice::?relay`
        FUNCTION `??ZDOInitDevice::?relay`,00H
        EXTERN `??ZDO_DeregisterForZdoCB::?relay`
        FUNCTION `??ZDO_DeregisterForZdoCB::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDO_RegisterForZdoCB::?relay`
        FUNCTION `??ZDO_RegisterForZdoCB::?relay`,00H
        EXTERN `??ZDO_RemoveRegisteredCB::?relay`
        FUNCTION `??ZDO_RemoveRegisteredCB::?relay`,00H
        EXTERN `??ZDP_BindUnbindReq::?relay`
        FUNCTION `??ZDP_BindUnbindReq::?relay`,00H
        EXTERN `??ZDP_DeviceAnnce::?relay`
        FUNCTION `??ZDP_DeviceAnnce::?relay`,00H
        EXTERN `??ZDP_EndDeviceBindReq::?relay`
        FUNCTION `??ZDP_EndDeviceBindReq::?relay`,00H
        EXTERN `??ZDP_IEEEAddrReq::?relay`
        FUNCTION `??ZDP_IEEEAddrReq::?relay`,00H
        EXTERN `??ZDP_MatchDescReq::?relay`
        FUNCTION `??ZDP_MatchDescReq::?relay`,00H
        EXTERN `??ZDP_NWKAddrOfInterestReq::?relay`
        FUNCTION `??ZDP_NWKAddrOfInterestReq::?relay`,00H
        EXTERN `??ZDP_NwkAddrReq::?relay`
        FUNCTION `??ZDP_NwkAddrReq::?relay`,00H
        EXTERN `??ZDP_ServerDiscReq::?relay`
        FUNCTION `??ZDP_ServerDiscReq::?relay`,00H
        EXTERN `??ZDP_SimpleDescReq::?relay`
        FUNCTION `??ZDP_SimpleDescReq::?relay`,00H
        EXTERN `??ZDP_UserDescSet::?relay`
        FUNCTION `??ZDP_UserDescSet::?relay`,00H
        EXTERN `??osal_build_uint32::?relay`
        FUNCTION `??osal_build_uint32::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 88, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_TaskID
        EXTERN ZDApp_JoinReq
        FUNCTION ZDApp_JoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NetworkDiscoveryReq
        FUNCTION ZDApp_NetworkDiscoveryReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDOInitDevice
        FUNCTION ZDOInitDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_DeregisterForZdoCB
        FUNCTION ZDO_DeregisterForZdoCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZdoCB
        FUNCTION ZDO_RegisterForZdoCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RemoveRegisteredCB
        FUNCTION ZDO_RemoveRegisteredCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_BindUnbindReq
        FUNCTION ZDP_BindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 95, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 96, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_ServerDiscReq
        FUNCTION ZDP_ServerDiscReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_UserDescSet
        FUNCTION ZDP_UserDescSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint32
        FUNCTION osal_build_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\ZStack-CC2530-2.5.1a\Components\mt\MT_ZDO.c
//    1 /**************************************************************************************************
//    2   Filename:       MT_ZDO.c
//    3   Revised:        $Date: 2012-02-16 16:04:32 -0800 (Thu, 16 Feb 2012) $
//    4   Revision:       $Revision: 29348 $
//    5 
//    6   Description:    MonitorTest functions for the ZDO layer.
//    7 
//    8 
//    9   Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 #ifdef MT_ZDO_FUNC
//   41 
//   42 /**************************************************************************************************
//   43  * INCLUDES
//   44  **************************************************************************************************/
//   45 #include "ZComDef.h"
//   46 #include "OSAL.h"
//   47 #include "OSAL_Nv.h"
//   48 #include "MT.h"
//   49 #include "MT_ZDO.h"
//   50 #include "APSMEDE.h"
//   51 #include "ZDConfig.h"
//   52 #include "ZDProfile.h"
//   53 #include "ZDObject.h"
//   54 #include "ZDApp.h"
//   55 
//   56 #if !defined( WIN32 )
//   57   #include "OnBoard.h"
//   58 #endif
//   59 
//   60 #if defined ( MT_SYS_KEY_MANAGEMENT )
//   61   #include "ZDSecMgr.h"
//   62 #endif
//   63 
//   64 #include "nwk_util.h"
//   65 
//   66 /**************************************************************************************************
//   67  * CONSTANTS
//   68  **************************************************************************************************/
//   69 #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
//   70 #define MT_ZDO_ADDR_RSP_LEN               0x0D
//   71 #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
//   72 #define MT_ZDO_BEACON_IND_LEN             21
//   73 #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
//   74 #define MT_ZDO_JOIN_CNF_LEN               5
//   75 
//   76 // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
//   77 // sizeof(zdoConcentratorInd_t) is not usable.
//   78 #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
//   79 
//   80 #define MTZDO_RESPONSE_BUFFER_LEN   100
//   81 
//   82 #define MTZDO_MAX_MATCH_CLUSTERS    16
//   83 #define MTZDO_MAX_ED_BIND_CLUSTERS  15
//   84 
//   85 // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
//   86 #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
//   87 
//   88 #define MT_ZDO_STATUS_LEN   1
//   89 
//   90 /**************************************************************************************************
//   91  * GLOBAL VARIABLES
//   92  **************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   93 uint32 _zdoCallbackSub;
_zdoCallbackSub:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   94 uint8 *pBeaconIndBuf = NULL;
pBeaconIndBuf:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   95 
//   96 /**************************************************************************************************
//   97  * LOCAL VARIABLES
//   98  **************************************************************************************************/
//   99 
//  100 /**************************************************************************************************
//  101  * LOCAL FUNCTIONS
//  102  **************************************************************************************************/
//  103 #if defined (MT_ZDO_FUNC)
//  104 void MT_ZdoNWKAddressRequest(uint8 *pBuf);
//  105 void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
//  106 void MT_ZdoNodeDescRequest(uint8 *pBuf);
//  107 void MT_ZdoPowerDescRequest(uint8 *pBuf);
//  108 void MT_ZdoSimpleDescRequest(uint8 *pBuf);
//  109 void MT_ZdoActiveEpRequest(uint8 *pBuf);
//  110 void MT_ZdoMatchDescRequest(uint8 *pBuf);
//  111 void MT_ZdoComplexDescRequest(uint8 *pBuf);
//  112 void MT_ZdoUserDescRequest(uint8 *pBuf);
//  113 void MT_ZdoEndDevAnnce(uint8 *pBuf);
//  114 void MT_ZdoUserDescSet(uint8 *pBuf);
//  115 void MT_ZdoServiceDiscRequest(uint8 *pBuf);
//  116 void MT_ZdoEndDevBindRequest(uint8 *pBuf);
//  117 void MT_ZdoBindRequest(uint8 *pBuf);
//  118 void MT_ZdoUnbindRequest(uint8 *pBuf);
//  119 void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
//  120 #if defined ( MT_SYS_KEY_MANAGEMENT )
//  121 void MT_ZdoSetLinkKey(uint8 *pBuf);
//  122 void MT_ZdoRemoveLinkKey(uint8 *pBuf);
//  123 void MT_ZdoGetLinkKey(uint8 *pBuf);
//  124 #endif /* MT_SYS_KEY_MANAGEMENT */
//  125 void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
//  126 void MT_ZdoJoinReq(uint8 *pBuf);
//  127 /* Call back function */
//  128 void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
//  129 void *MT_ZdoBeaconIndCB ( void *pStr );
//  130 void *MT_ZdoJoinCnfCB ( void *pStr );
//  131 #if defined (MT_ZDO_MGMT)
//  132 void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
//  133 void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
//  134 void MT_ZdoMgmtBindRequest(uint8 *pBuf);
//  135 void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
//  136 void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
//  137 void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
//  138 void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
//  139 #endif /* MT_ZDO_MGMT */
//  140 void MT_ZdoStartupFromApp(uint8 *pBuf);
//  141 void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
//  142 void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
//  143 #endif /* MT_ZDO_FUNC */
//  144 
//  145 #if defined (MT_ZDO_CB_FUNC)
//  146 uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
//  147 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
//  148 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
//  149 void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
//  150 void* MT_ZdoSrcRtgCB( void *pStr );
//  151 static void *MT_ZdoConcentratorIndCB(void *pStr);
//  152 static void *MT_ZdoLeaveInd(void *vPtr);
//  153 #endif /* MT_ZDO_CB_FUNC */
//  154 
//  155 #if defined (MT_ZDO_FUNC)
//  156 /***************************************************************************************************
//  157  * @fn      MT_ZdoInit
//  158  *
//  159  * @brief   MT ZDO initialization
//  160  *
//  161  * @param   none
//  162  *
//  163  * @return  none
//  164  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  165 void MT_ZdoInit(void)
MT_ZdoInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MT_ZdoInit
        CODE
//  166 {
        ; Saved register size: 0
        ; Auto size: 0
//  167 #ifdef MT_ZDO_CB_FUNC
//  168   /* Register with ZDO for indication callbacks */
//  169   ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
//  170   ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
//  171   ZDO_RegisterForZdoCB(ZDO_LEAVE_IND_CBID, &MT_ZdoLeaveInd);
//  172 #endif
//  173 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock0
//  174 
//  175 /***************************************************************************************************
//  176  * @fn      MT_ZdoCommandProcessing
//  177  *
//  178  * @brief
//  179  *
//  180  *   Process all the ZDO commands that are issued by test tool
//  181  *
//  182  * @param   pBuf - pointer to the msg buffer
//  183  *
//  184  *          | LEN  | CMD0  | CMD1  |  DATA  |
//  185  *          |  1   |   1   |   1   |  0-255 |
//  186  *
//  187  * @return  status
//  188  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  189 uint8 MT_ZdoCommandProcessing(uint8* pBuf)
MT_ZdoCommandProcessing:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
        CODE
//  190 {
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoNWKAddressRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoIEEEAddrRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoNodeDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoPowerDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoSimpleDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoActiveEpRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoMatchDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoComplexDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoUserDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoEndDevAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoUserDescSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoServiceDiscRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoEndDevBindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoBindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoUnbindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoNetworkDiscoveryReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoStartupFromApp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoRegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoRemoveRegisteredCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  191   uint8 status = MT_RPC_SUCCESS;
        MOV       R6,#0x0
//  192 
//  193   switch (pBuf[MT_RPC_POS_CMD1])
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??MT_ZdoCommandProcessing_0
        DEC       A
        JZ        ??MT_ZdoCommandProcessing_1
        DEC       A
        JZ        ??MT_ZdoCommandProcessing_2
        DEC       A
        JZ        ??MT_ZdoCommandProcessing_3
        DEC       A
        JZ        ??MT_ZdoCommandProcessing_4
        DEC       A
        JZ        ??MT_ZdoCommandProcessing_5
        DEC       A
        JZ        ??MT_ZdoCommandProcessing_6
        DEC       A
        JZ        ??MT_ZdoCommandProcessing_7
        DEC       A
        JZ        ??MT_ZdoCommandProcessing_8
        ADD       A,#-0x2
        JZ        ??MT_ZdoCommandProcessing_9
        DEC       A
        JZ        ??MT_ZdoCommandProcessing_10
        DEC       A
        JZ        ??MT_ZdoCommandProcessing_11
        ADD       A,#-0x14
        JZ        ??MT_ZdoCommandProcessing_12
        DEC       A
        JZ        ??MT_ZdoCommandProcessing_13
        DEC       A
        JZ        ??MT_ZdoCommandProcessing_14
        ADD       A,#-0x4
        JZ        ??MT_ZdoCommandProcessing_15
        DEC       A
        JZ        ??MT_ZdoCommandProcessing_16
        ADD       A,#-0x17
        JZ        ??MT_ZdoCommandProcessing_17
        DEC       A
        JZ        ??MT_ZdoCommandProcessing_18
        DEC       A
        JZ        ??MT_ZdoCommandProcessing_19
        SJMP      ??MT_ZdoCommandProcessing_20
//  194   {
//  195 #if defined ( ZDO_NWKADDR_REQUEST )
//  196     case MT_ZDO_NWK_ADDR_REQ:
//  197       MT_ZdoNWKAddressRequest(pBuf);
??MT_ZdoCommandProcessing_0:
        ; Setup parameters for call to function MT_ZdoNWKAddressRequest
        LCALL     `??MT_ZdoNWKAddressRequest::?relay`; Banked call to: MT_ZdoNWKAddressRequest
//  198       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  199 #endif
//  200 
//  201 #if defined ( ZDO_IEEEADDR_REQUEST )
//  202     case MT_ZDO_IEEE_ADDR_REQ:
//  203       MT_ZdoIEEEAddrRequest(pBuf);
??MT_ZdoCommandProcessing_1:
        ; Setup parameters for call to function MT_ZdoIEEEAddrRequest
        LCALL     `??MT_ZdoIEEEAddrRequest::?relay`; Banked call to: MT_ZdoIEEEAddrRequest
//  204       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  205 #endif
//  206 
//  207 #if defined ( ZDO_NODEDESC_REQUEST )
//  208     case MT_ZDO_NODE_DESC_REQ:
//  209       MT_ZdoNodeDescRequest(pBuf);
??MT_ZdoCommandProcessing_2:
        ; Setup parameters for call to function MT_ZdoNodeDescRequest
        LCALL     `??MT_ZdoNodeDescRequest::?relay`; Banked call to: MT_ZdoNodeDescRequest
//  210       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  211 #endif
//  212 
//  213 #if defined ( ZDO_POWERDESC_REQUEST )
//  214     case MT_ZDO_POWER_DESC_REQ:
//  215       MT_ZdoPowerDescRequest(pBuf);
??MT_ZdoCommandProcessing_3:
        ; Setup parameters for call to function MT_ZdoPowerDescRequest
        LCALL     `??MT_ZdoPowerDescRequest::?relay`; Banked call to: MT_ZdoPowerDescRequest
//  216       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  217 #endif
//  218 
//  219 #if defined ( ZDO_SIMPLEDESC_REQUEST )
//  220     case MT_ZDO_SIMPLE_DESC_REQ:
//  221       MT_ZdoSimpleDescRequest(pBuf);
??MT_ZdoCommandProcessing_4:
        ; Setup parameters for call to function MT_ZdoSimpleDescRequest
        LCALL     `??MT_ZdoSimpleDescRequest::?relay`; Banked call to: MT_ZdoSimpleDescRequest
//  222       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  223 #endif
//  224 
//  225 #if defined ( ZDO_ACTIVEEP_REQUEST )
//  226     case MT_ZDO_ACTIVE_EP_REQ:
//  227       MT_ZdoActiveEpRequest(pBuf);
??MT_ZdoCommandProcessing_5:
        ; Setup parameters for call to function MT_ZdoActiveEpRequest
        LCALL     `??MT_ZdoActiveEpRequest::?relay`; Banked call to: MT_ZdoActiveEpRequest
//  228       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  229 #endif
//  230 
//  231 #if defined ( ZDO_MATCH_REQUEST )
//  232     case MT_ZDO_MATCH_DESC_REQ:
//  233       MT_ZdoMatchDescRequest(pBuf);
??MT_ZdoCommandProcessing_6:
        ; Setup parameters for call to function MT_ZdoMatchDescRequest
        LCALL     `??MT_ZdoMatchDescRequest::?relay`; Banked call to: MT_ZdoMatchDescRequest
//  234       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  235 #endif
//  236 
//  237 #if defined ( ZDO_COMPLEXDESC_REQUEST )
//  238     case MT_ZDO_COMPLEX_DESC_REQ:
//  239       MT_ZdoComplexDescRequest(pBuf);
??MT_ZdoCommandProcessing_7:
        ; Setup parameters for call to function MT_ZdoComplexDescRequest
        LCALL     `??MT_ZdoComplexDescRequest::?relay`; Banked call to: MT_ZdoComplexDescRequest
//  240       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  241 #endif
//  242 
//  243 #if defined ( ZDO_USERDESC_REQUEST )
//  244     case MT_ZDO_USER_DESC_REQ:
//  245       MT_ZdoUserDescRequest(pBuf);
??MT_ZdoCommandProcessing_8:
        ; Setup parameters for call to function MT_ZdoUserDescRequest
        LCALL     `??MT_ZdoUserDescRequest::?relay`; Banked call to: MT_ZdoUserDescRequest
//  246       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  247 #endif
//  248 
//  249 #if defined ( ZDO_ENDDEVICE_ANNCE )
//  250     case MT_ZDO_END_DEV_ANNCE:
//  251       MT_ZdoEndDevAnnce(pBuf);
??MT_ZdoCommandProcessing_9:
        ; Setup parameters for call to function MT_ZdoEndDevAnnce
        LCALL     `??MT_ZdoEndDevAnnce::?relay`; Banked call to: MT_ZdoEndDevAnnce
//  252       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  253 #endif
//  254 
//  255 #if defined ( ZDO_USERDESCSET_REQUEST )
//  256     case MT_ZDO_USER_DESC_SET:
//  257       MT_ZdoUserDescSet(pBuf);
??MT_ZdoCommandProcessing_10:
        ; Setup parameters for call to function MT_ZdoUserDescSet
        LCALL     `??MT_ZdoUserDescSet::?relay`; Banked call to: MT_ZdoUserDescSet
//  258       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  259 #endif
//  260 
//  261 #if defined ( ZDO_SERVERDISC_REQUEST )
//  262     case MT_ZDO_SERVICE_DISC_REQ:
//  263       MT_ZdoServiceDiscRequest(pBuf);
??MT_ZdoCommandProcessing_11:
        ; Setup parameters for call to function MT_ZdoServiceDiscRequest
        LCALL     `??MT_ZdoServiceDiscRequest::?relay`; Banked call to: MT_ZdoServiceDiscRequest
//  264       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  265 #endif
//  266 
//  267 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
//  268     case MT_ZDO_END_DEV_BIND_REQ:
//  269       MT_ZdoEndDevBindRequest(pBuf);
??MT_ZdoCommandProcessing_12:
        ; Setup parameters for call to function MT_ZdoEndDevBindRequest
        LCALL     `??MT_ZdoEndDevBindRequest::?relay`; Banked call to: MT_ZdoEndDevBindRequest
//  270       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  271 #endif
//  272 
//  273 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  274     case MT_ZDO_BIND_REQ:
//  275       MT_ZdoBindRequest(pBuf);
??MT_ZdoCommandProcessing_13:
        ; Setup parameters for call to function MT_ZdoBindRequest
        LCALL     `??MT_ZdoBindRequest::?relay`; Banked call to: MT_ZdoBindRequest
//  276       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  277 #endif
//  278 
//  279 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  280     case MT_ZDO_UNBIND_REQ:
//  281       MT_ZdoUnbindRequest(pBuf);
??MT_ZdoCommandProcessing_14:
        ; Setup parameters for call to function MT_ZdoUnbindRequest
        LCALL     `??MT_ZdoUnbindRequest::?relay`; Banked call to: MT_ZdoUnbindRequest
//  282       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  283 #endif
//  284 
//  285 #if defined ( MT_SYS_KEY_MANAGEMENT )
//  286     case MT_ZDO_SET_LINK_KEY:
//  287       MT_ZdoSetLinkKey(pBuf);
//  288       break;
//  289 
//  290     case MT_ZDO_REMOVE_LINK_KEY:
//  291       MT_ZdoRemoveLinkKey(pBuf);
//  292       break;
//  293 
//  294     case MT_ZDO_GET_LINK_KEY:
//  295       MT_ZdoGetLinkKey(pBuf);
//  296       break;
//  297 #endif // MT_SYS_KEY_MANAGEMENT
//  298 
//  299 #if defined ( ZDO_MANUAL_JOIN )
//  300     case MT_ZDO_NWK_DISCOVERY_REQ:
//  301       MT_ZdoNetworkDiscoveryReq(pBuf);
??MT_ZdoCommandProcessing_15:
        ; Setup parameters for call to function MT_ZdoNetworkDiscoveryReq
        LCALL     `??MT_ZdoNetworkDiscoveryReq::?relay`; Banked call to: MT_ZdoNetworkDiscoveryReq
//  302       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  303 
//  304     case MT_ZDO_JOIN_REQ:
//  305       MT_ZdoJoinReq(pBuf);
??MT_ZdoCommandProcessing_16:
        ; Setup parameters for call to function MT_ZdoJoinReq
        LCALL     `??MT_ZdoJoinReq::?relay`; Banked call to: MT_ZdoJoinReq
//  306       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  307 #endif
//  308 
//  309 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
//  310     case MT_ZDO_MGMT_NWKDISC_REQ:
//  311       MT_ZdoMgmtNwkDiscRequest(pBuf);
//  312       break;
//  313 #endif
//  314 
//  315 #if defined ( ZDO_MGMT_LQI_REQUEST )
//  316     case MT_ZDO_MGMT_LQI_REQ:
//  317       MT_ZdoMgmtLqiRequest(pBuf);
//  318       break;
//  319 #endif
//  320 
//  321 #if defined ( ZDO_MGMT_RTG_REQUEST )
//  322     case MT_ZDO_MGMT_RTG_REQ:
//  323       MT_ZdoMgmtRtgRequest(pBuf);
//  324       break;
//  325 #endif
//  326 
//  327 #if defined ( ZDO_MGMT_BIND_REQUEST )
//  328     case MT_ZDO_MGMT_BIND_REQ:
//  329       MT_ZdoMgmtBindRequest(pBuf);
//  330       break;
//  331 #endif
//  332 
//  333 #if defined ( ZDO_MGMT_LEAVE_REQUEST )
//  334     case MT_ZDO_MGMT_LEAVE_REQ:
//  335       MT_ZdoMgmtLeaveRequest(pBuf);
//  336       break;
//  337 #endif
//  338 
//  339 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
//  340     case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
//  341       MT_ZdoMgmtDirectJoinRequest(pBuf);
//  342       break;
//  343 #endif
//  344 
//  345 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
//  346     case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
//  347       MT_ZdoMgmtPermitJoinRequest(pBuf);
//  348       break;
//  349 #endif
//  350 
//  351 #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
//  352     case MT_ZDO_MGMT_NWK_UPDATE_REQ:
//  353       MT_ZdoMgmtNwkUpdateRequest(pBuf);
//  354       break;
//  355 #endif
//  356 
//  357 #if defined ( ZDO_NETWORKSTART_REQUEST )
//  358     case MT_ZDO_STARTUP_FROM_APP:
//  359       MT_ZdoStartupFromApp(pBuf);
??MT_ZdoCommandProcessing_19:
        ; Setup parameters for call to function MT_ZdoStartupFromApp
        LCALL     `??MT_ZdoStartupFromApp::?relay`; Banked call to: MT_ZdoStartupFromApp
//  360       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  361 #endif
//  362 
//  363     case MT_ZDO_MSG_CB_REGISTER:
//  364       MT_ZdoRegisterForZDOMsg(pBuf);
??MT_ZdoCommandProcessing_17:
        ; Setup parameters for call to function MT_ZdoRegisterForZDOMsg
        LCALL     `??MT_ZdoRegisterForZDOMsg::?relay`; Banked call to: MT_ZdoRegisterForZDOMsg
//  365       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  366 
//  367     case MT_ZDO_MSG_CB_REMOVE:
//  368       MT_ZdoRemoveRegisteredCB(pBuf);
??MT_ZdoCommandProcessing_18:
        ; Setup parameters for call to function MT_ZdoRemoveRegisteredCB
        LCALL     `??MT_ZdoRemoveRegisteredCB::?relay`; Banked call to: MT_ZdoRemoveRegisteredCB
//  369       break;
        SJMP      ??MT_ZdoCommandProcessing_21
//  370 
//  371     default:
//  372       status = MT_RPC_ERR_COMMAND_ID;
??MT_ZdoCommandProcessing_20:
        MOV       R6,#0x2
//  373       break;
//  374   }
//  375 
//  376   return status;
??MT_ZdoCommandProcessing_21:
        MOV       A,R6
        MOV       R1,A
        LJMP      ??Subroutine56_0 & 0xFFFF
//  377 }
          CFI EndBlock cfiBlock1
//  378 
//  379 /***************************************************************************************************
//  380  * @fn      MT_ZdoNwkAddrReq
//  381  *
//  382  * @brief   Handle a nwk address request.
//  383  *
//  384  * @param   pData  - MT message data
//  385  *
//  386  * @return  void
//  387  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  388 void MT_ZdoNWKAddressRequest(uint8 *pBuf)
MT_ZdoNWKAddressRequest:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function MT_ZdoNWKAddressRequest
        CODE
//  389 {
        FUNCALL MT_ZdoNWKAddressRequest, ZDP_NwkAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNWKAddressRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  390   uint8 cmdId;
//  391   uint8 retValue;
//  392   uint8 reqType;
//  393   uint8 startIndex;
//  394   uint8 *pExtAddr;
//  395 
//  396   /* parse header */
//  397   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL     ??Subroutine50_0 & 0xFFFF
//  398   pBuf += MT_RPC_FRAME_HDR_SZ;
//  399 
//  400   /* parse parameters */
//  401   pExtAddr = pBuf;
??CrossCallReturnLabel_107:
        CLR       A
        ADDC      A,R3
        MOV       R7,A
//  402   pBuf += Z_EXTADDR_LEN;
        MOV       A,R6
        ADD       A,#0x8
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
//  403 
//  404   /* Request type */
//  405   reqType = *pBuf++;
//  406 
//  407   /* Start index */
//  408   startIndex = *pBuf;
//  409 
//  410   retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
        ; Setup parameters for call to function ZDP_NwkAddrReq
        MOV       R5,#0x0
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
        LCALL     ?Subroutine43 & 0xFFFF
//  411 
//  412   /* Build and send back the response */
//  413   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??CrossCallReturnLabel_89:
        LJMP      ??Subroutine59_0 & 0xFFFF
//  414 }
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function MT_ZdoNetworkDiscoveryReq
          CFI Conditional ??CrossCallReturnLabel_105
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function MT_ZdoJoinReq
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV       A,R3
        MOV       R7,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine50_0:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function MT_ZdoNWKAddressRequest
          CFI Conditional ??CrossCallReturnLabel_107
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function MT_ZdoNetworkDiscoveryReq
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function MT_ZdoJoinReq
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        MOV       DPL,R2
        MOV       DPH,R3
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine51_0:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_108
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function MT_ZdoUnbindRequest
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function MT_ZdoNWKAddressRequest
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function MT_ZdoNetworkDiscoveryReq
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function MT_ZdoJoinReq
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       A,R2
        ADD       A,#0x3
        MOV       R6,A
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15
//  415 
//  416 /***************************************************************************************************
//  417  * @fn      MT_ZdoIEEEAddrRequest
//  418  *
//  419  * @brief   Handle a IEEE address request.
//  420  *
//  421  * @param   pData  - MT message data
//  422  *
//  423  * @return  void
//  424  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  425 void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
MT_ZdoIEEEAddrRequest:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function MT_ZdoIEEEAddrRequest
        CODE
//  426 {
        FUNCALL MT_ZdoIEEEAddrRequest, ZDP_IEEEAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoIEEEAddrRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  427   uint8 cmdId;
//  428   uint8 retValue;
//  429   uint16 shortAddr;
//  430   uint8 reqType;
//  431   uint8 startIndex;
//  432 
//  433   /* parse header */
//  434   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL     ??Subroutine52_0 & 0xFFFF
//  435   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_112:
        JNC       ??MT_ZdoIEEEAddrRequest_0
        INC       R3
//  436 
//  437   /* Dev address */
//  438   shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
//  439   pBuf += 2;
//  440 
//  441   /* request type */
//  442   reqType = *pBuf++;
//  443 
//  444   /* start index */
//  445   startIndex = *pBuf;
//  446 
//  447   retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
??MT_ZdoIEEEAddrRequest_0:
        ; Setup parameters for call to function ZDP_IEEEAddrReq
        MOV       R5,#0x0
        MOV       DPL,A
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       R2,?V0
        LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
        LCALL     ?Subroutine31 & 0xFFFF
//  448 
//  449   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  450 }
??CrossCallReturnLabel_119:
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock16
//  451 
//  452 /***************************************************************************************************
//  453  * @fn      MT_ZdoNodeDescRequest
//  454  *
//  455  * @brief   Handle a Node Descriptor request.
//  456  *
//  457  * @param   pData  - MT message data
//  458  *
//  459  * @return  void
//  460  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  461 void MT_ZdoNodeDescRequest (uint8 *pBuf)
MT_ZdoNodeDescRequest:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function MT_ZdoNodeDescRequest
        CODE
//  462 {
        FUNCALL MT_ZdoNodeDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNodeDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  463   uint8 cmdId;
//  464   uint8 retValue;
//  465   zAddrType_t destAddr;
//  466   uint16 shortAddr;
//  467 
//  468   /* parse header */
//  469   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL     ??Subroutine52_0 & 0xFFFF
//  470   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_113:
        JNC       ??MT_ZdoNodeDescRequest_0
        INC       R3
//  471 
//  472   /* Destination address */
//  473   destAddr.addrMode = Addr16Bit;
??MT_ZdoNodeDescRequest_0:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  474   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_3:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
//  475   pBuf += 2;
??CrossCallReturnLabel_52:
        JNC       ??MT_ZdoNodeDescRequest_1
        INC       R3
//  476 
//  477   /* Network address of interest */
//  478   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  479   pBuf += 2;
//  480 
//  481   retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
??MT_ZdoNodeDescRequest_1:
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R1,#0x2
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV       A,R1
        LJMP      ??Subroutine53_0 & 0xFFFF
//  482 
//  483   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  484 }
          CFI EndBlock cfiBlock17
//  485 
//  486 /***************************************************************************************************
//  487  * @fn      MT_ZdoPowerDescRequest
//  488  *
//  489  * @brief   Handle a Power Descriptor request.
//  490  *
//  491  * @param   pData  - MT message data
//  492  *
//  493  * @return  void
//  494  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  495 void MT_ZdoPowerDescRequest(uint8 *pBuf)
MT_ZdoPowerDescRequest:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function MT_ZdoPowerDescRequest
        CODE
//  496 {
        FUNCALL MT_ZdoPowerDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoPowerDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  497   uint8 cmdId;
//  498   uint8 retValue;
//  499   zAddrType_t destAddr;
//  500   uint16 shortAddr;
//  501 
//  502   /* parse header */
//  503   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL     ??Subroutine52_0 & 0xFFFF
//  504   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_114:
        JNC       ??MT_ZdoPowerDescRequest_0
        INC       R3
//  505 
//  506   /* Dev address */
//  507   destAddr.addrMode = Addr16Bit;
??MT_ZdoPowerDescRequest_0:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  508   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_4:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
//  509   pBuf += 2;
??CrossCallReturnLabel_53:
        JNC       ??MT_ZdoPowerDescRequest_1
        INC       R3
//  510 
//  511   /* Network address of interest */
//  512   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  513   pBuf += 2;
//  514 
//  515   retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
??MT_ZdoPowerDescRequest_1:
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R1,#0x3
        LJMP      ?Subroutine0 & 0xFFFF
//  516 
//  517   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  518 }
          CFI EndBlock cfiBlock18
//  519 
//  520 /***************************************************************************************************
//  521  * @fn      MT_ZdoSimpleDescRequest
//  522  *
//  523  * @brief   Handle a Simple Descriptor request.
//  524  *
//  525  * @param   pBuf  - MT message data
//  526  *
//  527  * @return  void
//  528  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  529 void MT_ZdoSimpleDescRequest(uint8 *pBuf)
MT_ZdoSimpleDescRequest:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function MT_ZdoSimpleDescRequest
        CODE
//  530 {
        FUNCALL MT_ZdoSimpleDescRequest, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSimpleDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  531   uint8 cmdId;
//  532   uint8 retValue;
//  533   uint8 epInt;
//  534   zAddrType_t destAddr;
//  535   uint16 shortAddr;
//  536 
//  537   /* parse header */
//  538   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL     ??Subroutine52_0 & 0xFFFF
//  539   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_115:
        JNC       ??MT_ZdoSimpleDescRequest_0
        INC       R3
//  540 
//  541   /* Dev address */
//  542   destAddr.addrMode = Addr16Bit;
??MT_ZdoSimpleDescRequest_0:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  543   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_5:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
//  544   pBuf += 2;
??CrossCallReturnLabel_54:
        JNC       ??MT_ZdoSimpleDescRequest_1
        INC       R3
//  545 
//  546   /* Network address of interest */
//  547   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  548   pBuf += 2;
//  549 
//  550   /* endpoint/interface */
//  551   epInt = *pBuf++;
//  552 
//  553   retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
??MT_ZdoSimpleDescRequest_1:
        ; Setup parameters for call to function ZDP_SimpleDescReq
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
        LJMP      ??Subroutine54_0 & 0xFFFF
//  554 
//  555   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  556 }
          CFI EndBlock cfiBlock19
//  557 
//  558 /***************************************************************************************************
//  559  * @fn      MT_ZdoActiveEpRequest
//  560  *
//  561  * @brief   Handle a Active EP request.
//  562  *
//  563  * @param   pBuf  - MT message data
//  564  *
//  565  * @return  void
//  566  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  567 void MT_ZdoActiveEpRequest(uint8 *pBuf)
MT_ZdoActiveEpRequest:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function MT_ZdoActiveEpRequest
        CODE
//  568 {
        FUNCALL MT_ZdoActiveEpRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoActiveEpRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  569   uint8 cmdId;
//  570   uint8 retValue;
//  571   zAddrType_t destAddr;
//  572   uint16 shortAddr;
//  573 
//  574   /* parse header */
//  575   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL     ??Subroutine52_0 & 0xFFFF
//  576   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_116:
        JNC       ??MT_ZdoActiveEpRequest_0
        INC       R3
//  577 
//  578   /* Dev address */
//  579   destAddr.addrMode = Addr16Bit;
??MT_ZdoActiveEpRequest_0:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  580   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_6:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
//  581   pBuf += 2;
??CrossCallReturnLabel_55:
        JNC       ??MT_ZdoActiveEpRequest_1
        INC       R3
//  582 
//  583   /* Network address of interest */
//  584   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  585   pBuf += 2;
//  586 
//  587   retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
??MT_ZdoActiveEpRequest_1:
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R1,#0x5
        LJMP      ?Subroutine0 & 0xFFFF
//  588 
//  589   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  590 }
          CFI EndBlock cfiBlock20
//  591 
//  592 /***************************************************************************************************
//  593  * @fn      MT_ZdoMatchDescRequest
//  594  *
//  595  * @brief   Handle a Match Descriptor request.
//  596  *
//  597  * @param   pBuf  - MT message data
//  598  *
//  599  * @return  void
//  600  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_110
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine52_0:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function MT_ZdoIEEEAddrRequest
          CFI Conditional ??CrossCallReturnLabel_112
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function MT_ZdoNodeDescRequest
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function MT_ZdoPowerDescRequest
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function MT_ZdoActiveEpRequest
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function MT_ZdoComplexDescRequest
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function MT_ZdoUserDescRequest
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function MT_ZdoMatchDescRequest
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       A,R2
        ADD       A,#0x3
        MOV       R2,A
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  601 void MT_ZdoMatchDescRequest(uint8 *pBuf)
MT_ZdoMatchDescRequest:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
        CODE
//  602 {
        FUNCALL MT_ZdoMatchDescRequest, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 96, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 96, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMatchDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 88, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 88, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 74
        MOV       A,#-0x4a
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 88)
//  603   uint8 cmdId;
//  604   uint8 retValue = 0;
        LCALL     ?Subroutine8 & 0xFFFF
//  605   uint8 i, numInClusters, numOutClusters;
//  606   uint16 profileId;
//  607   zAddrType_t destAddr;
//  608   uint16 shortAddr;
//  609   uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
//  610 
//  611   /* parse header */
//  612   cmdId = pBuf[MT_RPC_POS_CMD1];
//  613   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_110:
        JNC       ??MT_ZdoMatchDescRequest_0
        INC       R3
//  614 
//  615   /* Dev address */
//  616   destAddr.addrMode = Addr16Bit;
??MT_ZdoMatchDescRequest_0:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  617   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_7:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
//  618   pBuf += 2;
??CrossCallReturnLabel_56:
        JNC       ??MT_ZdoMatchDescRequest_1
        INC       R3
//  619 
//  620   /* Network address of interest */
//  621   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoMatchDescRequest_1:
        LCALL     ?Subroutine14 & 0xFFFF
//  622   pBuf += 2;
??CrossCallReturnLabel_24:
        MOV       A,R2
        ADD       A,#0x2
        MOV       R2,A
        JNC       ??MT_ZdoMatchDescRequest_2
        INC       R3
//  623 
//  624   /* Profile ID */
//  625   profileId = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoMatchDescRequest_2:
        MOV       DPL,A
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       ?V0,A
        LCALL     ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_97:
        MOV       A,?V0
        ADD       A,R0
        CLR       A
        ADDC      A,R1
        MOV       ?V1,A
//  626   pBuf += 2;
//  627 
//  628   /* NumInClusters */
//  629   numInClusters = *pBuf++;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R2
        ADD       A,#0x3
        MOV       R2,A
        JNC       ??MT_ZdoMatchDescRequest_3
        INC       R3
//  630   if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
??MT_ZdoMatchDescRequest_3:
        MOV       A,R1
        CLR       C
        SUBB      A,#0x11
        JNC       ??MT_ZdoMatchDescRequest_4
//  631   {
//  632     /* IN clusters */
//  633     for ( i = 0; i < numInClusters; i++ )
        MOV       R0,#0x0
??MT_ZdoMatchDescRequest_5:
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JNC       ??MT_ZdoMatchDescRequest_6
//  634     {
//  635       inClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
        LCALL     ?Subroutine4 & 0xFFFF
//  636       pBuf += 2;
//  637     }
??CrossCallReturnLabel_0:
        MOV       A,#0x2a
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_63:
        JNC       ??MT_ZdoMatchDescRequest_7
        INC       R3
??MT_ZdoMatchDescRequest_7:
        INC       R0
        SJMP      ??MT_ZdoMatchDescRequest_5
//  638   }
//  639   else
//  640   {
//  641     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoMatchDescRequest_4:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x80
        MOVX      @DPTR,A
//  642   }
//  643 
//  644   /* NumOutClusters */
//  645   numOutClusters = *pBuf++;
??MT_ZdoMatchDescRequest_6:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R7,A
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
//  646   if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
        CLR       C
        SUBB      A,#0x11
        JNC       ??MT_ZdoMatchDescRequest_8
//  647   {
//  648     /* OUT Clusters */
//  649     for ( i = 0; i < numOutClusters; i++ )
        MOV       R0,#0x0
??MT_ZdoMatchDescRequest_9:
        MOV       A,R0
        CLR       C
        SUBB      A,R7
        JNC       ??MT_ZdoMatchDescRequest_10
//  650     {
//  651       outClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
        LCALL     ?Subroutine4 & 0xFFFF
//  652       pBuf += 2;
//  653     }
??CrossCallReturnLabel_1:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_64:
        JNC       ??MT_ZdoMatchDescRequest_11
        INC       R3
??MT_ZdoMatchDescRequest_11:
        INC       R0
        SJMP      ??MT_ZdoMatchDescRequest_9
//  654   }
//  655   else
//  656   {
//  657     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoMatchDescRequest_8:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x80
        SJMP      ??MT_ZdoMatchDescRequest_12
//  658   }
//  659 
//  660   if ( retValue == 0 )
??MT_ZdoMatchDescRequest_10:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JNZ       ??MT_ZdoMatchDescRequest_13
//  661   {
//  662     retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
//  663                                        inClusters, numOutClusters, outClusters, 0);
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 89)
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP101_8
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 91)
        MOV       A,R7
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 92)
        MOV       A,#0x2e
        LCALL     ?XSTACK_DISP101_8
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 96)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 88)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
??MT_ZdoMatchDescRequest_12:
        MOVX      @DPTR,A
//  664   }
//  665 
//  666   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoMatchDescRequest_13:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       A,R6
        MOV       R2,A
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  667 }
        MOV       A,#0x4a
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock34

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond35 Using cfiCommon0
          CFI Function MT_ZdoNodeDescRequest
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function MT_ZdoPowerDescRequest
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function MT_ZdoActiveEpRequest
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function MT_ZdoMatchDescRequest
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function MT_ZdoComplexDescRequest
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function MT_ZdoUserDescRequest
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function MT_ZdoUserDescSet
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       A,R2
        ADD       A,#0x2
        MOV       R2,A
        RET
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function MT_ZdoNodeDescRequest
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function MT_ZdoPowerDescRequest
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function MT_ZdoActiveEpRequest
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function MT_ZdoMatchDescRequest
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function MT_ZdoComplexDescRequest
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function MT_ZdoUserDescRequest
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function MT_ZdoUserDescSet
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        MOV       A,#0x2
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x1
        RET
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54
//  668 
//  669 /***************************************************************************************************
//  670  * @fn      MT_ZdoComplexDescRequest
//  671  *
//  672  * @brief   Handle a Complex Descriptor request.
//  673  *
//  674  * @param   pBuf  - MT message data
//  675  *
//  676  * @return  void
//  677  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  678 void MT_ZdoComplexDescRequest(uint8 *pBuf)
MT_ZdoComplexDescRequest:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function MT_ZdoComplexDescRequest
        CODE
//  679 {
        FUNCALL MT_ZdoComplexDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoComplexDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  680   uint8 cmdId;
//  681   uint8 retValue;
//  682   zAddrType_t destAddr;
//  683   uint16 shortAddr;
//  684 
//  685   /* parse header */
//  686   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL     ??Subroutine52_0 & 0xFFFF
//  687   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_117:
        JNC       ??MT_ZdoComplexDescRequest_0
        INC       R3
//  688 
//  689   /* Dev address */
//  690   destAddr.addrMode = Addr16Bit;
??MT_ZdoComplexDescRequest_0:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  691   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_8:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
//  692   pBuf += 2;
??CrossCallReturnLabel_57:
        JNC       ??MT_ZdoComplexDescRequest_1
        INC       R3
//  693 
//  694   /* Network address of interest */
//  695   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  696   pBuf += 2;
//  697 
//  698   retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
??MT_ZdoComplexDescRequest_1:
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R1,#0x10
        SJMP      ?Subroutine0
//  699 
//  700   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  701 }
          CFI EndBlock cfiBlock55
//  702 
//  703 /***************************************************************************************************
//  704  * @fn      MT_ZdoUserDescRequest
//  705  *
//  706  * @brief   Handle a User Descriptor request.
//  707  *
//  708  * @param   pBuf  - MT message data
//  709  *
//  710  * @return  void
//  711  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  712 void MT_ZdoUserDescRequest(uint8 *pBuf)
MT_ZdoUserDescRequest:
          CFI Block cfiBlock56 Using cfiCommon0
          CFI Function MT_ZdoUserDescRequest
        CODE
//  713 {
        FUNCALL MT_ZdoUserDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUserDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  714   uint8 cmdId;
//  715   uint8 retValue;
//  716   zAddrType_t destAddr;
//  717   uint16 shortAddr;
//  718 
//  719   /* parse header */
//  720   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL     ??Subroutine52_0 & 0xFFFF
//  721   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_118:
        JNC       ??MT_ZdoUserDescRequest_0
        INC       R3
//  722 
//  723   /* Dev address */
//  724   destAddr.addrMode = Addr16Bit;
??MT_ZdoUserDescRequest_0:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  725   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
??CrossCallReturnLabel_9:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
//  726   pBuf += 2;
??CrossCallReturnLabel_58:
        JNC       ??MT_ZdoUserDescRequest_1
        INC       R3
//  727 
//  728   /* Network address of interest */
//  729   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
//  730   pBuf += 2;
//  731 
//  732   retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
??MT_ZdoUserDescRequest_1:
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R1,#0x11
        SJMP      ?Subroutine0
//  733 
//  734   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  735 }
          CFI EndBlock cfiBlock56
//  736 
//  737 /***************************************************************************************************
//  738  * @fn      MT_ZdoEndDevAnnce
//  739  *
//  740  * @brief   Handle a End Device Announce Descriptor request.
//  741  *
//  742  * @param   pBuf  - MT message data
//  743  *
//  744  * @return  void
//  745  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  746 void MT_ZdoEndDevAnnce(uint8 *pBuf)
MT_ZdoEndDevAnnce:
          CFI Block cfiBlock57 Using cfiCommon0
          CFI Function MT_ZdoEndDevAnnce
        CODE
//  747 {
        FUNCALL MT_ZdoEndDevAnnce, ZDP_DeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevAnnce, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R3
        MOV       R5,A
//  748   uint8 cmdId;
//  749   uint8 retValue;
//  750   uint16 shortAddr;
//  751   uint8 *pIEEEAddr;
//  752 
//  753   /* parse header */
//  754   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
//  755   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV       A,R2
        ADD       A,#0x3
        MOV       R4,A
        JNC       ??MT_ZdoEndDevAnnce_0
        INC       R5
//  756 
//  757   /* network address */
//  758   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoEndDevAnnce_0:
        MOV       DPL,A
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       R2,A
        LCALL     ?Subroutine20 & 0xFFFF
//  759   pBuf += 2;
??CrossCallReturnLabel_36:
        MOV       A,R4
        ADD       A,#0x2
        MOV       R4,A
        JNC       ??MT_ZdoEndDevAnnce_1
        INC       R5
//  760 
//  761   /* extended address */
//  762   pIEEEAddr = pBuf;
//  763   pBuf += Z_EXTADDR_LEN;
//  764 
//  765   retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
??MT_ZdoEndDevAnnce_1:
        ; Setup parameters for call to function ZDP_DeviceAnnce
        MOV       ?V0,R0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LJMP      ?Subroutine3 & 0xFFFF
//  766 
//  767   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  768 }
          CFI EndBlock cfiBlock57

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock58 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_19:
          CFI EndBlock cfiBlock58
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine53_0:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
          CFI EndBlock cfiBlock59
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine54_0:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_120:
        MOV       A,#0xa
          CFI EndBlock cfiBlock60
        REQUIRE ??Subroutine55_0
        ; // Fall through to label ??Subroutine55_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine55_0:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock61
        REQUIRE ??Subroutine56_0
        ; // Fall through to label ??Subroutine56_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine56_0:
          CFI Block cfiBlock62 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock62

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function MT_ZdoIEEEAddrRequest
          CFI Conditional ??CrossCallReturnLabel_119
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function MT_ZdoPowerDescRequest
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function MT_ZdoActiveEpRequest
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function MT_ZdoComplexDescRequest
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-2
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function MT_ZdoUserDescRequest
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function MT_ZdoNodeDescRequest
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker70 Using cfiCommon1
          CFI (cfiPicker70) NoFunction
          CFI (cfiPicker70) Picker
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_121:
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        RET
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiPicker70

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond71 Using cfiCommon0
          CFI Function MT_ZdoSimpleDescRequest
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function MT_ZdoPowerDescRequest
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function MT_ZdoActiveEpRequest
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-2
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function MT_ZdoComplexDescRequest
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function MT_ZdoUserDescRequest
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker76 Using cfiCommon1
          CFI (cfiPicker76) NoFunction
          CFI (cfiPicker76) Picker
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_75:
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiPicker76

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond77 Using cfiCommon0
          CFI Function MT_ZdoNodeDescRequest
          CFI Conditional ??CrossCallReturnLabel_74
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_18
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-4
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function MT_ZdoPowerDescRequest
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_19
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-4
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function MT_ZdoActiveEpRequest
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_19
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-4
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function MT_ZdoComplexDescRequest
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_19
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-4
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function MT_ZdoUserDescRequest
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_19
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-4
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker83 Using cfiCommon1
          CFI (cfiPicker83) NoFunction
          CFI (cfiPicker83) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        CLR       A
        XCH       A,R2
        MOV       R3,A
        MOV       A,R4
        ADD       A,R2
        CLR       A
        ADDC      A,R3
        MOV       R5,A
        RET
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiPicker83
//  769 
//  770 /***************************************************************************************************
//  771  * @fn      MT_ZdoUserDescSet
//  772  *
//  773  * @brief   Handle a User Descriptor Set.
//  774  *
//  775  * @param   pBuf  - MT message data
//  776  *
//  777  * @return  void
//  778  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  779 void MT_ZdoUserDescSet(uint8 *pBuf)
MT_ZdoUserDescSet:
          CFI Block cfiBlock84 Using cfiCommon0
          CFI Function MT_ZdoUserDescSet
        CODE
//  780 {
        FUNCALL MT_ZdoUserDescSet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUserDescSet, ZDP_UserDescSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUserDescSet, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 27
        MOV       A,#-0x1b
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
//  781   uint8 cmdId;
//  782   uint8 retValue;
//  783   zAddrType_t destAddr;
//  784   uint16 shortAddr;
//  785   UserDescriptorFormat_t userDesc;
//  786 
//  787   /* parse header */
//  788   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
//  789   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV       A,R2
        ADD       A,#0x3
        MOV       R2,A
        JNC       ??MT_ZdoUserDescSet_0
        INC       R3
//  790 
//  791   /* Dev address */
//  792   destAddr.addrMode = Addr16Bit;
??MT_ZdoUserDescSet_0:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  793   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_10:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
//  794   pBuf += 2;
??CrossCallReturnLabel_59:
        JNC       ??MT_ZdoUserDescSet_1
        INC       R3
//  795 
//  796   /* Network address of interest */
//  797   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoUserDescSet_1:
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_71:
        MOV       R6,A
        CLR       A
        ADDC      A,R1
        MOV       R7,A
//  798   pBuf += 2;
//  799 
//  800   /* User descriptor */
//  801   userDesc.len = *pBuf++;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  802   osal_memcpy( userDesc.desc, pBuf, userDesc.len );
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,R0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 45)
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
//  803   pBuf += 16;
//  804 
//  805   retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
        ; Setup parameters for call to function ZDP_UserDescSet
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV       R1,#0x0
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_UserDescSet::?relay`; Banked call to: ZDP_UserDescSet
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
        LCALL     ?Subroutine30 & 0xFFFF
//  806 
//  807   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  808 }
??CrossCallReturnLabel_61:
        MOV       A,#0x1b
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock84
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock85 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock85
//  809 
//  810 /***************************************************************************************************
//  811  * @fn      MT_ZdoServiceDiscRequest
//  812  *
//  813  * @brief   Handle a Server Discovery request.
//  814  *
//  815  * @param   pBuf  - MT message data
//  816  *
//  817  * @return  void
//  818  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  819 void MT_ZdoServiceDiscRequest(uint8 *pBuf)
MT_ZdoServiceDiscRequest:
          CFI Block cfiBlock86 Using cfiCommon0
          CFI Function MT_ZdoServiceDiscRequest
        CODE
//  820 {
        FUNCALL MT_ZdoServiceDiscRequest, ZDP_ServerDiscReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoServiceDiscRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  821   uint8 cmdId;
//  822   uint8 retValue;
//  823   uint16 serviceMask;
//  824 
//  825   /* parse header */
//  826   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
//  827   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV       A,R2
        ADD       A,#0x3
        JNC       ??MT_ZdoServiceDiscRequest_0
        INC       R3
//  828 
//  829   /* Service Mask */
//  830   serviceMask = BUILD_UINT16( pBuf[0], pBuf[1]);
//  831   pBuf += 2;
//  832 
//  833   retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
??MT_ZdoServiceDiscRequest_0:
        ; Setup parameters for call to function ZDP_ServerDiscReq
        MOV       R1,#0x0
        MOV       DPL,A
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R4
        MOV       R2,A
        LCALL     `??ZDP_ServerDiscReq::?relay`; Banked call to: ZDP_ServerDiscReq
        LJMP      ?Subroutine3 & 0xFFFF
//  834 
//  835   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  836 }
          CFI EndBlock cfiBlock86
//  837 
//  838 /***************************************************************************************************
//  839  * @fn      MT_ZdoEndDevBindRequest
//  840  *
//  841  * @brief   Handle a End Device Bind request.
//  842  *
//  843  * @param   pBuf  - MT message data
//  844  *
//  845  * @return  void
//  846  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  847 void MT_ZdoEndDevBindRequest(uint8 *pBuf)
MT_ZdoEndDevBindRequest:
          CFI Block cfiBlock87 Using cfiCommon0
          CFI Function MT_ZdoEndDevBindRequest
        CODE
//  848 {
        FUNCALL MT_ZdoEndDevBindRequest, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 95, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 95, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevBindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 86, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 86, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 70
        MOV       A,#-0x46
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
//  849   uint8 cmdId;
//  850   uint8 retValue = 0;
        LCALL     ?Subroutine8 & 0xFFFF
//  851   uint8 i, epInt, numInClusters, numOutClusters;
//  852   zAddrType_t destAddr;
//  853   uint16 shortAddr;
//  854   uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
//  855 
//  856   /* parse header */
//  857   cmdId = pBuf[MT_RPC_POS_CMD1];
//  858   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_111:
        JNC       ??MT_ZdoEndDevBindRequest_0
        INC       R3
//  859 
//  860   /* Dev address */
//  861   destAddr.addrMode = Addr16Bit;
??MT_ZdoEndDevBindRequest_0:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
//  862   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_11:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
//  863   pBuf += 2;
??CrossCallReturnLabel_60:
        JNC       ??MT_ZdoEndDevBindRequest_1
        INC       R3
//  864 
//  865   /* Local coordinator of the binding */
//  866   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoEndDevBindRequest_1:
        LCALL     ?Subroutine14 & 0xFFFF
//  867   pBuf += 2;
//  868 
//  869   /* For now, skip past the extended address */
//  870   pBuf += Z_EXTADDR_LEN;
//  871 
//  872   /* Endpoint */
//  873   epInt = *pBuf++;
??CrossCallReturnLabel_25:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R2
        ADD       A,#0xb
        MOV       R2,A
        JNC       ??MT_ZdoEndDevBindRequest_2
        INC       R3
//  874 
//  875   /* Profile ID */
//  876   profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoEndDevBindRequest_2:
        MOV       DPL,A
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,?V2
        MOV       ?V0,A
//  877   pBuf += 2;
//  878 
//  879   /* NumInClusters */
//  880   numInClusters = *pBuf++;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        MOV       A,R2
        ADD       A,#0x3
        MOV       R2,A
        JNC       ??MT_ZdoEndDevBindRequest_3
        INC       R3
//  881   if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
??MT_ZdoEndDevBindRequest_3:
        MOV       A,R7
        CLR       C
        SUBB      A,#0x10
        JNC       ??MT_ZdoEndDevBindRequest_4
//  882   {
//  883     for ( i = 0; i < numInClusters; i++ )
        MOV       R0,#0x0
??MT_ZdoEndDevBindRequest_5:
        MOV       A,R0
        CLR       C
        SUBB      A,R7
        JNC       ??MT_ZdoEndDevBindRequest_6
//  884     {
//  885       inClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
        LCALL     ?Subroutine4 & 0xFFFF
//  886       pBuf += 2;
//  887     }
??CrossCallReturnLabel_2:
        MOV       A,#0x28
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_65:
        JNC       ??MT_ZdoEndDevBindRequest_7
        INC       R3
??MT_ZdoEndDevBindRequest_7:
        INC       R0
        SJMP      ??MT_ZdoEndDevBindRequest_5
//  888   }
//  889   else
//  890   {
//  891     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoEndDevBindRequest_4:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x80
        MOVX      @DPTR,A
//  892   }
//  893 
//  894   /* NumOutClusters */
//  895   numOutClusters = *pBuf++;
??MT_ZdoEndDevBindRequest_6:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
//  896   if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
        CLR       C
        SUBB      A,#0x10
        JNC       ??MT_ZdoEndDevBindRequest_8
//  897   {
//  898     for ( i = 0; i < numOutClusters; i++ )
        MOV       R0,#0x0
??MT_ZdoEndDevBindRequest_9:
        MOV       A,R0
        CLR       C
        SUBB      A,?V4
        JNC       ??MT_ZdoEndDevBindRequest_10
//  899     {
//  900       outClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,?V6
        ADD       A,#0x0
        CLR       A
        ADDC      A,?V3
        MOV       ?V7,A
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_91:
        MOV       A,?V6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V7
        MOVX      @DPTR,A
//  901       pBuf += 2;
        MOV       A,R2
        ADD       A,#0x2
        MOV       R2,A
        JNC       ??MT_ZdoEndDevBindRequest_11
        INC       R3
//  902     }
??MT_ZdoEndDevBindRequest_11:
        INC       R0
        SJMP      ??MT_ZdoEndDevBindRequest_9
//  903   }
//  904   else
//  905   {
//  906     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoEndDevBindRequest_8:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x80
        SJMP      ??MT_ZdoEndDevBindRequest_12
//  907   }
//  908 
//  909   if ( retValue == 0 )
??MT_ZdoEndDevBindRequest_10:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JNZ       ??MT_ZdoEndDevBindRequest_13
//  910   {
//  911     retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
//  912                                           numInClusters, inClusters, numOutClusters, outClusters, 0);
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 87)
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP101_8
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 89)
        MOV       A,?V4
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 90)
        MOV       A,#0x2c
        LCALL     ?XSTACK_DISP101_8
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 92)
        MOV       A,R7
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 93)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 95)
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
??MT_ZdoEndDevBindRequest_12:
        MOVX      @DPTR,A
//  913   }
//  914 
//  915   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoEndDevBindRequest_13:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       A,R6
        MOV       R2,A
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  916 }
        MOV       A,#0x46
        SJMP      ??Subroutine57_0
          CFI EndBlock cfiBlock87

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond88 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_63
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function MT_ZdoMatchDescRequest
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker91 Using cfiCommon1
          CFI (cfiPicker91) NoFunction
          CFI (cfiPicker91) Picker
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_92:
        MOV       A,?V4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V5
        MOVX      @DPTR,A
        MOV       A,R2
        ADD       A,#0x2
        MOV       R2,A
        RET
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiPicker91

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine45:
          CFI Block cfiCond92 Using cfiCommon0
          CFI Function MT_ZdoEndDevBindRequest
          CFI Conditional ??CrossCallReturnLabel_91
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function MT_ZdoMatchDescRequest
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_63
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-4
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function MT_ZdoMatchDescRequest
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_64
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-4
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_65
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-4
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker96 Using cfiCommon1
          CFI (cfiPicker96) NoFunction
          CFI (cfiPicker96) Picker
        MOV       A,DPL
        ADD       A,?V2
        MOV       DPL,A
        MOV       A,DPH
        ADDC      A,?V3
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiPicker96

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond97 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker99 Using cfiCommon1
          CFI (cfiPicker99) NoFunction
          CFI (cfiPicker99) Picker
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_73:
        CLR       A
        ADDC      A,R1
        MOV       R5,A
        RET
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiPicker99

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond100 Using cfiCommon0
          CFI Function MT_ZdoUserDescSet
          CFI Conditional ??CrossCallReturnLabel_71
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function MT_ZdoMatchDescRequest
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_24
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-4
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_25
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-4
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function MT_ZdoRegisterForZDOMsg
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_16
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-4
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_17
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-4
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker105 Using cfiCommon1
          CFI (cfiPicker105) NoFunction
          CFI (cfiPicker105) Picker
        MOV       DPL,A
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        LCALL     ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_100:
        MOV       A,R4
        ADD       A,R0
        RET
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiPicker105

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond106 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function MT_ZdoMatchDescRequest
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker109 Using cfiCommon1
          CFI (cfiPicker109) NoFunction
          CFI (cfiPicker109) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,?V4
        ADD       A,#0x0
        CLR       A
        ADDC      A,?V3
        MOV       ?V5,A
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_94:
        RET
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiPicker109

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine46:
          CFI Block cfiCond110 Using cfiCommon0
          CFI Function MT_ZdoEndDevBindRequest
          CFI Conditional ??CrossCallReturnLabel_93
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function MT_ZdoMatchDescRequest
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_0
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-4
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function MT_ZdoMatchDescRequest
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_1
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-4
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_2
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-4
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker114 Using cfiCommon1
          CFI (cfiPicker114) NoFunction
          CFI (cfiPicker114) Picker
        MOV       A,R0
        ADD       A,0xE0 /* A   */
        MOV       ?V2,A
        CLR       A
        RLC       A
        MOV       ?V3,A
        RET
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiPicker114
//  917 
//  918 /***************************************************************************************************
//  919  * @fn      MT_ZdoBindRequest
//  920  *
//  921  * @brief   Handle a Bind request.
//  922  *
//  923  * @param   pBuf  - MT message data
//  924  *
//  925  * @return  void
//  926  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock115 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 43)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R3,#0x0
        LCALL     `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV       A,#0x13
          CFI EndBlock cfiBlock115
        REQUIRE ??Subroutine57_0
        ; // Fall through to label ??Subroutine57_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine57_0:
          CFI Block cfiBlock116 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 86)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Valid
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock116

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond117 Using cfiCommon0
          CFI Function MT_ZdoUserDescSet
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function MT_ZdoBindRequest
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function MT_ZdoUnbindRequest
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker120 Using cfiCommon1
          CFI (cfiPicker120) NoFunction
          CFI (cfiPicker120) Picker
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_90:
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        RET
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiPicker120

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond121 Using cfiCommon0
          CFI Function MT_ZdoNWKAddressRequest
          CFI Conditional ??CrossCallReturnLabel_89
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function MT_ZdoUserDescSet
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_61
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-4
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function MT_ZdoBindRequest
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_62
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-4
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function MT_ZdoUnbindRequest
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_62
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-4
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker125 Using cfiCommon1
          CFI (cfiPicker125) NoFunction
          CFI (cfiPicker125) Picker
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,?V0
        RET
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiPicker125

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  927 void MT_ZdoBindRequest(uint8 *pBuf)
MT_ZdoBindRequest:
          CFI Block cfiBlock126 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
        CODE
//  928 {
        FUNCALL MT_ZdoBindRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 19
        MOV       A,#-0x13
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       A,R3
        MOV       R7,A
//  929   uint8 cmdId;
//  930   uint8 retValue;
//  931   zAddrType_t destAddr, devAddr;
//  932   uint8 *pSrcAddr, *ptr;
//  933   uint8 srcEPInt, dstEPInt;
//  934   uint16 clusterID;
//  935 
//  936   /* parse header */
//  937   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV       DPL,R2
        MOV       DPH,A
        LCALL     ??Subroutine51_0 & 0xFFFF
//  938   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_108:
        JNC       ??MT_ZdoBindRequest_0
        INC       R7
//  939 
//  940   /* Dev address */
//  941   destAddr.addrMode = Addr16Bit;
??MT_ZdoBindRequest_0:
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine22 & 0xFFFF
//  942   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_123:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
//  943   pBuf += 2;
//  944 
//  945   /* SrcAddress */
//  946   pSrcAddr = pBuf;
//  947   pBuf += Z_EXTADDR_LEN;
//  948 
//  949   /* SrcEPInt */
//  950   srcEPInt = *pBuf++;
//  951 
//  952   /* ClusterID */
//  953   clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
//  954   pBuf += 2;
//  955 
//  956   /* Destination Address mode */
//  957   devAddr.addrMode = *pBuf++;
??CrossCallReturnLabel_12:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??MT_ZdoBindRequest_1
        INC       R7
//  958 
//  959   /* Destination Address */
//  960   if ( devAddr.addrMode == Addr64Bit )
??MT_ZdoBindRequest_1:
        MOV       A,#0x3
        XRL       A,R0
        JNZ       ??MT_ZdoBindRequest_2
//  961   {
//  962     ptr = pBuf;
//  963     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP      ??MT_ZdoBindRequest_3
//  964   }
//  965   else
//  966   {
//  967     devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoBindRequest_2:
        LCALL     ??Subroutine58_0 & 0xFFFF
//  968   }
??CrossCallReturnLabel_125:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  969   /* The short address occupies LSB two bytes */
//  970   pBuf += Z_EXTADDR_LEN;
//  971 
//  972   /* DstEPInt */
//  973   dstEPInt = *pBuf;
//  974 
//  975   retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
??MT_ZdoBindRequest_3:
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV       ?V6,#0x0
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V6,A
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V6,R0
        MOV       ?V7,R1
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       R1,?V1
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#0x21
        LJMP      ?Subroutine2 & 0xFFFF
//  976 
//  977   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  978 }
          CFI EndBlock cfiBlock126
//  979 
//  980 /***************************************************************************************************
//  981  * @fn      MT_ZdoUnbindRequest
//  982  *
//  983  * @brief   Handle a Unbind request.
//  984  *
//  985  * @param   pBuf  - MT message data
//  986  *
//  987  * @return  void
//  988  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  989 void MT_ZdoUnbindRequest(uint8 *pBuf)
MT_ZdoUnbindRequest:
          CFI Block cfiBlock127 Using cfiCommon0
          CFI Function MT_ZdoUnbindRequest
        CODE
//  990 {
        FUNCALL MT_ZdoUnbindRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 19
        MOV       A,#-0x13
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       A,R3
        MOV       R7,A
//  991   uint8 cmdId;
//  992   uint8 retValue;
//  993   zAddrType_t destAddr, devAddr;
//  994   uint8 *pSrcAddr, *ptr;
//  995   uint8 srcEPInt, dstEPInt;
//  996   uint16 clusterID;
//  997 
//  998   /* parse header */
//  999   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV       DPL,R2
        MOV       DPH,A
        LCALL     ??Subroutine51_0 & 0xFFFF
// 1000   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_109:
        JNC       ??MT_ZdoUnbindRequest_0
        INC       R7
// 1001 
// 1002   /* dev address */
// 1003   destAddr.addrMode = Addr16Bit;
??MT_ZdoUnbindRequest_0:
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine22 & 0xFFFF
// 1004   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_124:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
// 1005   pBuf += 2;
// 1006 
// 1007   /* SrcAddress */
// 1008   pSrcAddr = pBuf;
// 1009   pBuf += Z_EXTADDR_LEN;
// 1010 
// 1011   /* SrcEPInt */
// 1012   srcEPInt = *pBuf++;
// 1013 
// 1014   /* ClusterID */
// 1015   clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
// 1016   pBuf += 2;
// 1017 
// 1018   /* Destination Address mode */
// 1019   devAddr.addrMode = *pBuf++;
??CrossCallReturnLabel_13:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??MT_ZdoUnbindRequest_1
        INC       R7
// 1020 
// 1021   /* Destination Address */
// 1022   if ( devAddr.addrMode == Addr64Bit )
??MT_ZdoUnbindRequest_1:
        MOV       A,#0x3
        XRL       A,R0
        JNZ       ??MT_ZdoUnbindRequest_2
// 1023   {
// 1024     ptr = pBuf;
// 1025     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP      ??MT_ZdoUnbindRequest_3
// 1026   }
// 1027   else
// 1028   {
// 1029     devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoUnbindRequest_2:
        LCALL     ??Subroutine58_0 & 0xFFFF
// 1030   }
??CrossCallReturnLabel_126:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1031   /* The short address occupies LSB two bytes */
// 1032   pBuf += Z_EXTADDR_LEN;
// 1033 
// 1034   /* dstEPInt */
// 1035   dstEPInt = *pBuf;
// 1036 
// 1037   retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
??MT_ZdoUnbindRequest_3:
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV       ?V6,#0x0
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V6,A
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V6,R0
        MOV       ?V7,R1
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       R1,?V1
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#0x22
        LJMP      ?Subroutine2 & 0xFFFF
// 1038 
// 1039   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1040 }
          CFI EndBlock cfiBlock127

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond128 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_123
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function MT_ZdoUnbindRequest
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker130 Using cfiCommon1
          CFI (cfiPicker130) NoFunction
          CFI (cfiPicker130) Picker
        MOV       A,#0x2
        MOVX      @DPTR,A
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiPicker130
        REQUIRE ??Subroutine58_0
        ; // Fall through to label ??Subroutine58_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine58_0:
          CFI Block cfiCond131 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_125
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function MT_ZdoUnbindRequest
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function MT_ZdoBindRequest
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function MT_ZdoUnbindRequest
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker135 Using cfiCommon1
          CFI (cfiPicker135) NoFunction
          CFI (cfiPicker135) Picker
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiPicker135

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond136 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function MT_ZdoUnbindRequest
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker138 Using cfiCommon1
          CFI (cfiPicker138) NoFunction
          CFI (cfiPicker138) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x2
        MOV       ?V2,A
        CLR       A
        ADDC      A,R7
        MOV       ?V3,A
        MOV       A,?V2
        ADD       A,#0x8
        MOV       R6,A
        CLR       A
        ADDC      A,?V3
        MOV       DPL,R6
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V1,A
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
        MOVX      A,@DPTR
        MOV       R2,A
        LCALL     ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_98:
        MOV       A,R2
        ADD       A,R0
        MOV       ?V4,A
        CLR       A
        ADDC      A,R1
        MOV       ?V5,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x9
        RET
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiPicker138

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine48:
          CFI Block cfiCond139 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_97
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function MT_ZdoUserDescSet
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_71
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-4
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function MT_ZdoMatchDescRequest
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_24
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-6
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 88)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_25
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-6
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function MT_ZdoRegisterForZDOMsg
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_16
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-6
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_17
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-6
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function MT_ZdoBindRequest
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_12
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-4
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function MT_ZdoUnbindRequest
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_13
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-4
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function MT_ZdoEndDevAnnce
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_36
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-4
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function MT_ZdoJoinReq
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_37
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-4
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker149 Using cfiCommon1
          CFI (cfiPicker149) NoFunction
          CFI (cfiPicker149) Picker
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        CLR       A
        XCH       A,R0
        MOV       R1,A
        RET
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiPicker149
// 1041 
// 1042 #if defined (MT_SYS_KEY_MANAGEMENT)
// 1043 /***************************************************************************************************
// 1044  * @fn      MT_ZdoSetLinkKey
// 1045  *
// 1046  * @brief   Set an application or trust center link key.
// 1047  *
// 1048  * @param   pBuf  - MT message data
// 1049  *
// 1050  * @return  void
// 1051  ***************************************************************************************************/
// 1052 void MT_ZdoSetLinkKey(uint8 *pBuf)
// 1053 {
// 1054   uint8 cmdId;
// 1055   uint8 retValue;
// 1056   uint8 *pExtAddr;
// 1057   uint8 *pKey;
// 1058   uint16 shortAddr;
// 1059 
// 1060   /* parse header */
// 1061   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1062   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1063 
// 1064   /* ShortAddr */
// 1065   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1066   pBuf += 2;
// 1067 
// 1068   /* Extended Addr */
// 1069   pExtAddr = pBuf;
// 1070   pBuf += Z_EXTADDR_LEN;
// 1071 
// 1072   /* Key data */
// 1073   pKey = pBuf;
// 1074 
// 1075   retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
// 1076 
// 1077   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1078 }
// 1079 
// 1080 /***************************************************************************************************
// 1081  * @fn      MT_ZdoRemoveLinkKey
// 1082  *
// 1083  * @brief   Remove an application or trust center link key.
// 1084  *
// 1085  * @param   pBuf  - MT message data
// 1086  *
// 1087  * @return  void
// 1088  ***************************************************************************************************/
// 1089 void MT_ZdoRemoveLinkKey(uint8 *pBuf)
// 1090 {
// 1091   uint8 cmdId;
// 1092   uint8 retValue;
// 1093   uint8 *pExtAddr;
// 1094 
// 1095   /* parse header */
// 1096   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1097   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1098 
// 1099   /* ShortAddr */
// 1100   pExtAddr = pBuf;
// 1101 
// 1102   retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
// 1103 
// 1104   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1105 }
// 1106 
// 1107 /***************************************************************************************************
// 1108  * @fn      MT_ZdoGetLinkKey
// 1109  *
// 1110  * @brief   Get the application link key.
// 1111  *
// 1112  * @param   pBuf  - MT message data
// 1113  *
// 1114  * @return  void
// 1115  ***************************************************************************************************/
// 1116 void MT_ZdoGetLinkKey(uint8 *pBuf)
// 1117 {
// 1118   uint8 cmdId;
// 1119   uint8 retValue;
// 1120   uint8 *pExtAddr;
// 1121   uint8 *retBuf = NULL;
// 1122   uint8 len;
// 1123   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 1124   uint16 apsLinkKeyNvId;
// 1125 
// 1126   // parse header
// 1127   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1128   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1129 
// 1130   // Extended Address
// 1131   pExtAddr = pBuf;
// 1132 
// 1133   // Fetch the key NV ID
// 1134   retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
// 1135 
// 1136   if (retValue == ZSuccess)
// 1137   {
// 1138     if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
// 1139     {
// 1140       // retrieve key from NV
// 1141       if (osal_nv_read( apsLinkKeyNvId, 0,
// 1142                        sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
// 1143       {
// 1144         retValue = ZNwkUnknownDevice;
// 1145       }
// 1146     }
// 1147     else
// 1148     {
// 1149       retValue = ZNwkUnknownDevice;
// 1150     }
// 1151   }
// 1152 
// 1153   // Construct the response message
// 1154   len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
// 1155   if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
// 1156   {
// 1157     if (retValue == ZSuccess)
// 1158     {
// 1159       // Extended Address
// 1160       osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
// 1161 
// 1162       // Key data
// 1163       osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
// 1164     }
// 1165     else
// 1166     {
// 1167       // Failed case - set the rest fields to all FF
// 1168       osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
// 1169     }
// 1170 
// 1171     retBuf[0] = retValue;  // Status
// 1172 
// 1173     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
// 1174 
// 1175     // clear retBuf because it contains key data and free allocated memory
// 1176     osal_memset(retBuf, 0x00, len);
// 1177 
// 1178     osal_mem_free(retBuf);
// 1179   }
// 1180 
// 1181   // clear copy of key in RAM
// 1182   if (pApsLinkKey != NULL)
// 1183   {
// 1184     osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
// 1185 
// 1186     osal_mem_free(pApsLinkKey);
// 1187   }
// 1188 
// 1189   return;
// 1190 }
// 1191 #endif // MT_SYS_KEY_MANAGEMENT
// 1192 
// 1193 #if defined (MT_ZDO_MGMT)
// 1194 /***************************************************************************************************
// 1195  * @fn      MT_ZdoMgmtNwkDiscRequest
// 1196  *
// 1197  * @brief   Handle a Mgmt Nwk Discovery request.
// 1198  *
// 1199  * @param   pBuf  - MT message data
// 1200  *
// 1201  * @return  void
// 1202  ***************************************************************************************************/
// 1203 void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
// 1204 {
// 1205   uint8 cmdId;
// 1206   uint8 retValue;
// 1207   zAddrType_t destAddr;
// 1208   uint32 scanChannels;
// 1209   uint8 scanDuration, startIndex;
// 1210 
// 1211   /* parse header */
// 1212   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1213   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1214 
// 1215   /* Dev address */
// 1216   destAddr.addrMode = Addr16Bit;
// 1217   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1218   pBuf += 2;
// 1219 
// 1220   /* Scan Channels */
// 1221   scanChannels = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
// 1222   pBuf += 4;
// 1223 
// 1224   /* Scan Duration */
// 1225   scanDuration = *pBuf++;
// 1226 
// 1227   /* Start Index */
// 1228   startIndex = *pBuf;
// 1229 
// 1230   retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
// 1231 
// 1232   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1233 }
// 1234 
// 1235 /***************************************************************************************************
// 1236  * @fn      MT_ZdoMgmtLqiRequest
// 1237  *
// 1238  * @brief   Handle a Mgmt Lqi request.
// 1239  *
// 1240  * @param   pBuf  - MT message data
// 1241  *
// 1242  * @return  void
// 1243  ***************************************************************************************************/
// 1244 void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
// 1245 {
// 1246   uint8 cmdId;
// 1247   uint8 retValue;
// 1248   zAddrType_t destAddr;
// 1249   uint8 startIndex;
// 1250 
// 1251   /* parse header */
// 1252   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1253   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1254 
// 1255   /* Dev address */
// 1256   destAddr.addrMode = Addr16Bit;
// 1257   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1258   pBuf += 2;
// 1259 
// 1260   /* Start Index */
// 1261   startIndex = *pBuf;
// 1262 
// 1263   retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
// 1264 
// 1265   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1266 }
// 1267 
// 1268 /***************************************************************************************************
// 1269  * @fn      MT_ZdoMgmtRtgRequest
// 1270  *
// 1271  * @brief   Handle a Mgmt Rtg request.
// 1272  *
// 1273  * @param   pBuf  - MT message data
// 1274  *
// 1275  * @return  void
// 1276  ***************************************************************************************************/
// 1277 void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
// 1278 {
// 1279   uint8 cmdId;
// 1280   uint8 retValue;
// 1281   zAddrType_t destAddr;
// 1282   uint8 startIndex;
// 1283 
// 1284   /* parse header */
// 1285   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1286   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1287 
// 1288   /* Dev Address */
// 1289   destAddr.addrMode = Addr16Bit;
// 1290   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
// 1291   pBuf += 2;
// 1292 
// 1293   /* Start Index */
// 1294   startIndex = *pBuf;
// 1295 
// 1296   retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
// 1297 
// 1298   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1299 }
// 1300 
// 1301 /***************************************************************************************************
// 1302  * @fn      MT_ZdoMgmtBindRequest
// 1303  *
// 1304  * @brief   Handle a Mgmt Bind request.
// 1305  *
// 1306  * @param   pBuf  - MT message data
// 1307  *
// 1308  * @return  void
// 1309  ***************************************************************************************************/
// 1310 void MT_ZdoMgmtBindRequest(uint8 *pBuf)
// 1311 {
// 1312   uint8 cmdId;
// 1313   uint8 retValue;
// 1314   zAddrType_t destAddr;
// 1315   uint8 startIndex;
// 1316 
// 1317   /* parse header */
// 1318   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1319   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1320 
// 1321   /* Dev Address */
// 1322   destAddr.addrMode = Addr16Bit;
// 1323   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1324   pBuf += 2;
// 1325 
// 1326   /* Start Index */
// 1327   startIndex = *pBuf;
// 1328 
// 1329   retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
// 1330 
// 1331   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1332 }
// 1333 
// 1334 /***************************************************************************************************
// 1335  * @fn      MT_ZdoMgmtLeaveRequest
// 1336  *
// 1337  * @brief   Handle a Mgmt Leave request.
// 1338  *
// 1339  * @param   pBuf  - MT message data
// 1340  *
// 1341  * @return  void
// 1342  ***************************************************************************************************/
// 1343 void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
// 1344 {
// 1345   uint8 cmdId;
// 1346   uint8 retValue;
// 1347   zAddrType_t destAddr;
// 1348   uint8 *pIEEEAddr;
// 1349   uint8 removeChildren, rejoin;
// 1350 
// 1351   /* parse header */
// 1352   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1353   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1354 
// 1355   /* Destination Address */
// 1356   destAddr.addrMode = Addr16Bit;
// 1357   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1358   pBuf += 2;
// 1359 
// 1360   /* IEEE address */
// 1361   pIEEEAddr = pBuf;
// 1362   pBuf += Z_EXTADDR_LEN;
// 1363 
// 1364   /* Remove Children */
// 1365   removeChildren = *pBuf++;
// 1366 
// 1367   /* Rejoin */
// 1368   rejoin = *pBuf;
// 1369 
// 1370   retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
// 1371 
// 1372   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1373 }
// 1374 
// 1375 
// 1376 /***************************************************************************************************
// 1377  * @fn      MT_ZdoMgmtDirectJoinRequest
// 1378  *
// 1379  * @brief   Handle a Mgmt Direct Join request.
// 1380  *
// 1381  * @param   pBuf  - MT message data
// 1382  *
// 1383  * @return  void
// 1384  ***************************************************************************************************/
// 1385 void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
// 1386 {
// 1387   uint8 cmdId;
// 1388   uint8 retValue;
// 1389   zAddrType_t destAddr;
// 1390   uint8 *deviceAddr;
// 1391   uint8 capInfo;
// 1392 
// 1393   /* parse header */
// 1394   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1395   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1396 
// 1397   /* Destination Address */
// 1398   destAddr.addrMode = Addr16Bit;
// 1399   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1400   pBuf += 2;
// 1401 
// 1402   /* Device Address */
// 1403   deviceAddr = pBuf;
// 1404   pBuf += Z_EXTADDR_LEN;
// 1405 
// 1406   /* Capability information */
// 1407   capInfo = *pBuf;
// 1408 
// 1409   retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
// 1410 
// 1411   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1412 }
// 1413 
// 1414 /***************************************************************************************************
// 1415  * @fn      MT_ZdoMgmtPermitJoinRequest
// 1416  *
// 1417  * @brief   Handle a Mgmt Permit Join request.
// 1418  *
// 1419  * @param   pBuf  - MT message data
// 1420  *
// 1421  * @return  void
// 1422  ***************************************************************************************************/
// 1423 void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
// 1424 {
// 1425   uint8 cmdId;
// 1426   uint8 retValue;
// 1427   zAddrType_t destAddr;
// 1428   uint8 duration, tcSignificance;
// 1429 
// 1430   /* parse header */
// 1431   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1432   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1433 
// 1434   /* Destination Address */
// 1435   destAddr.addrMode = Addr16Bit;
// 1436   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1437   pBuf += 2;
// 1438 
// 1439   /* Duration */
// 1440   duration = *pBuf++;
// 1441 
// 1442   /* Trust center significance */
// 1443   tcSignificance = *pBuf;
// 1444 
// 1445   retValue = (byte)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
// 1446 
// 1447   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1448 }
// 1449 
// 1450 /***************************************************************************************************
// 1451  * @fn      MT_ZdoMgmtNwkUpdateRequest
// 1452  *
// 1453  * @brief   Handle a Mgmt Nwk Update request.
// 1454  *
// 1455  * @param   pBuf  - MT message data
// 1456  *
// 1457  * @return  void
// 1458  ***************************************************************************************************/
// 1459 void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
// 1460 {
// 1461   uint8 cmdId;
// 1462   uint8 retValue;
// 1463   zAddrType_t destAddr;
// 1464   uint32 channelMask;
// 1465   uint8 scanDuration, scanCount;
// 1466   uint16 nwkManagerAddr;
// 1467 
// 1468     /* parse header */
// 1469   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1470   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1471 
// 1472   /* Destination address */
// 1473   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1474   pBuf += 2;
// 1475 
// 1476   /* Destination address mode */
// 1477   destAddr.addrMode = *pBuf++;
// 1478 
// 1479   channelMask = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
// 1480   pBuf += 4;
// 1481 
// 1482   /* Scan duration */
// 1483   scanDuration = *pBuf++;
// 1484 
// 1485   /* Scan count */
// 1486   scanCount = *pBuf++;
// 1487 
// 1488   /* NWK manager address */
// 1489   nwkManagerAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1490 
// 1491   /* Send the Management Network Update request */
// 1492   retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1493                                           scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
// 1494 
// 1495   /*
// 1496     Since we don't recevied our own broadcast messages, we should
// 1497     send a unicast copy of the message to ourself.
// 1498   */
// 1499   if ( destAddr.addrMode == AddrBroadcast )
// 1500   {
// 1501     destAddr.addrMode = Addr16Bit;
// 1502     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
// 1503     retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1504                                              scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
// 1505   }
// 1506 
// 1507   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1508 }
// 1509 #endif /* MT_ZDO_MGMT */
// 1510 
// 1511 /***************************************************************************************************
// 1512  * @fn      MT_ZdoStartupFromApp
// 1513  *
// 1514  * @brief   Handle a Startup from App request.
// 1515  *
// 1516  * @param   pBuf  - MT message data
// 1517  *
// 1518  * @return  void
// 1519  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1520 void MT_ZdoStartupFromApp(uint8 *pBuf)
MT_ZdoStartupFromApp:
          CFI Block cfiBlock150 Using cfiCommon0
          CFI Function MT_ZdoStartupFromApp
        CODE
// 1521 {
        FUNCALL MT_ZdoStartupFromApp, ZDOInitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoStartupFromApp, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1522   uint8 cmd0, cmd1, retValue;
// 1523 
// 1524   /* parse header */
// 1525   cmd0 = pBuf[MT_RPC_POS_CMD0];
        LCALL     ?Subroutine39 & 0xFFFF
// 1526   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 1527   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1528 
// 1529   retValue = ZDOInitDevice(100);
??CrossCallReturnLabel_80:
        ; Setup parameters for call to function ZDOInitDevice
        MOV       R2,#0x64
        MOV       R3,#0x0
        LCALL     `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
        LCALL     ?Subroutine33 & 0xFFFF
// 1530 
// 1531   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
??CrossCallReturnLabel_66:
        JNZ       ??MT_ZdoStartupFromApp_0
// 1532   {
// 1533     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       A,R6
        MOV       R2,A
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1534   }
// 1535 }
??MT_ZdoStartupFromApp_0:
        SJMP      ??Subroutine60_0
          CFI EndBlock cfiBlock150

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock151 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_122:
          CFI EndBlock cfiBlock151
        REQUIRE ??Subroutine59_0
        ; // Fall through to label ??Subroutine59_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine59_0:
          CFI Block cfiBlock152 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
          CFI EndBlock cfiBlock152
        REQUIRE ??Subroutine60_0
        ; // Fall through to label ??Subroutine60_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine60_0:
          CFI Block cfiBlock153 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x1
        LJMP      ??Subroutine55_0 & 0xFFFF
          CFI EndBlock cfiBlock153

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond154 Using cfiCommon0
          CFI Function MT_ZdoIEEEAddrRequest
          CFI Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_119
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function MT_ZdoPowerDescRequest
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_120
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-4
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function MT_ZdoActiveEpRequest
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_120
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-4
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function MT_ZdoComplexDescRequest
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_120
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-4
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function MT_ZdoUserDescRequest
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_120
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-4
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function MT_ZdoNodeDescRequest
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_120
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-4
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_120
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-4
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function MT_ZdoEndDevAnnce
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-2
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function MT_ZdoServiceDiscRequest
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-2
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker163 Using cfiCommon1
          CFI (cfiPicker163) NoFunction
          CFI (cfiPicker163) Picker
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       A,R6
        MOV       R2,A
        RET
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiPicker163
// 1536 
// 1537 
// 1538 /***************************************************************************************************
// 1539  * @fn      MT_ZdoNetworkDiscoveryReq
// 1540  *
// 1541  * @brief   Handle a ZDO Network Discovery request.
// 1542  *
// 1543  * @param   pBuf  - MT message data
// 1544  *
// 1545  * @return  void
// 1546  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1547 void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
MT_ZdoNetworkDiscoveryReq:
          CFI Block cfiBlock164 Using cfiCommon0
          CFI Function MT_ZdoNetworkDiscoveryReq
        CODE
// 1548 {
        FUNCALL MT_ZdoNetworkDiscoveryReq, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNetworkDiscoveryReq, ZDApp_NetworkDiscoveryReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNetworkDiscoveryReq, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNetworkDiscoveryReq, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNetworkDiscoveryReq, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        LCALL     ?Subroutine9 & 0xFFFF
// 1549   uint8  retValue = ZFailure;
// 1550   uint8  cmdId;
// 1551   uint32 scanChannels;
// 1552 
// 1553   /* parse header */
// 1554   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1555   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_105:
        JNC       ??MT_ZdoNetworkDiscoveryReq_0
        INC       R7
// 1556 
// 1557   /* Packet format */
// 1558   /* scan channels (4) | scan duration (1) */
// 1559 
// 1560   /* Scan channels */
// 1561   scanChannels = osal_build_uint32(pBuf, 4);
??MT_ZdoNetworkDiscoveryReq_0:
        ; Setup parameters for call to function osal_build_uint32
        MOV       R1,#0x4
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
// 1562   pBuf += 4;
// 1563 
// 1564   retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
        ; Setup parameters for call to function ZDApp_NetworkDiscoveryReq
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDApp_NetworkDiscoveryReq::?relay`; Banked call to: ZDApp_NetworkDiscoveryReq
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 1565 
// 1566   // Register ZDO callback for MT to handle the network discovery confirm
// 1567   // and beacon notification confirm
// 1568   ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV       R2,#`??MT_ZdoNwkDiscoveryCnfCB::?relay` & 0xff
        MOV       R3,#(`??MT_ZdoNwkDiscoveryCnfCB::?relay` >> 8) & 0xff
        MOV       R1,#0x2
        LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
// 1569   ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV       R2,#`??MT_ZdoBeaconIndCB::?relay` & 0xff
        MOV       R3,#(`??MT_ZdoBeaconIndCB::?relay` >> 8) & 0xff
        MOV       R1,#0x3
        LCALL     ?Subroutine34 & 0xFFFF
// 1570 
// 1571   /* Build and send back the response */
// 1572   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
// 1573 }
??CrossCallReturnLabel_69:
        LJMP      ??Subroutine57_0 & 0xFFFF
          CFI EndBlock cfiBlock164
// 1574 
// 1575 
// 1576 /***************************************************************************************************
// 1577  * @fn      MT_ZdoJoinReq
// 1578  *
// 1579  * @brief   Handle a ZDO Join request.
// 1580  *
// 1581  * @param   pBuf  - MT message data
// 1582  *
// 1583  * @return  void
// 1584  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1585 void MT_ZdoJoinReq(uint8 *pBuf)
MT_ZdoJoinReq:
          CFI Block cfiBlock165 Using cfiCommon0
          CFI Function MT_ZdoJoinReq
        CODE
// 1586 {
        FUNCALL MT_ZdoJoinReq, ZDApp_JoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoJoinReq, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoJoinReq, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        LCALL     ?Subroutine9 & 0xFFFF
// 1587   uint8  retValue = ZFailure;
// 1588   uint8  cmdId;
// 1589   uint16 panId;
// 1590   uint16 chosenParent;
// 1591 
// 1592   /* parse header */
// 1593   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1594   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_106:
        JNC       ??MT_ZdoJoinReq_0
        INC       R7
// 1595 
// 1596   /* Packet format */
// 1597   /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
// 1598    * parentDepth (1) | stackProfile  (1)
// 1599    */
// 1600 
// 1601   panId        = BUILD_UINT16(pBuf[1], pBuf[2]);
// 1602   chosenParent = BUILD_UINT16(pBuf[11], pBuf[12]);
// 1603 
// 1604   retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
??MT_ZdoJoinReq_0:
        ; Setup parameters for call to function ZDApp_JoinReq
        ADD       A,#0xe
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R6
        ADD       A,#0xd
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 15)
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_132:
        MOV       R2,A
        MOV       A,R6
        ADD       A,#0xc
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_127:
        MOV       R0,A
        CLR       A
        XCH       A,R0
        MOV       R1,A
        MOV       A,R2
        ADD       A,R0
        MOV       ?V2,A
        CLR       A
        ADDC      A,R1
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,R6
        ADD       A,#0x3
        MOV       R4,A
        CLR       A
        ADDC      A,R7
        MOV       R5,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_37:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDApp_JoinReq::?relay`; Banked call to: ZDApp_JoinReq
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 1605 
// 1606   /* Register for MT to receive Join Confirm */
// 1607   ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV       R2,#`??MT_ZdoJoinCnfCB::?relay` & 0xff
        MOV       R3,#(`??MT_ZdoJoinCnfCB::?relay` >> 8) & 0xff
        MOV       R1,#0x4
        LCALL     ?Subroutine34 & 0xFFFF
// 1608 
// 1609   /* Build and send back the response */
// 1610   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
// 1611 
// 1612 }
??CrossCallReturnLabel_70:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock165

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond166 Using cfiCommon0
          CFI Function MT_ZdoNetworkDiscoveryReq
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function MT_ZdoJoinReq
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-2
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker168 Using cfiCommon1
          CFI (cfiPicker168) NoFunction
          CFI (cfiPicker168) Picker
        LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,?V0
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        MOV       A,#0x1
        RET
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiPicker168

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond169 Using cfiCommon0
          CFI Function MT_ZdoJoinReq
          CFI Conditional ??CrossCallReturnLabel_50
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function MT_ZdoJoinReq
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-2
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker171 Using cfiCommon1
          CFI (cfiPicker171) NoFunction
          CFI (cfiPicker171) Picker
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V1
        RET
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiPicker171

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond172 Using cfiCommon0
          CFI Function MT_ZdoEndDevAnnce
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function MT_ZdoJoinReq
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-2
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker174 Using cfiCommon1
          CFI (cfiPicker174) NoFunction
          CFI (cfiPicker174) Picker
        LCALL     ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_99:
        MOV       A,R2
        ADD       A,R0
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        RET
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiPicker174
// 1613 
// 1614 /***************************************************************************************************
// 1615  * @fn          MT_ZdoNwkDiscoveryCnfCB
// 1616  *
// 1617  * @brief       Send an indication to inform host device the completion of
// 1618  *              network discovery scan
// 1619  *
// 1620  * @param       pStr - pointer to a parameter and a structure of parameters
// 1621  *
// 1622  * @return      void
// 1623  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1624 void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
MT_ZdoNwkDiscoveryCnfCB:
          CFI Block cfiBlock175 Using cfiCommon0
          CFI Function MT_ZdoNwkDiscoveryCnfCB
        CODE
// 1625 {
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, ZDO_DeregisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, ZDO_DeregisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, MT_ZdoBeaconIndCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1626   /* pStr: status (uint8) */
// 1627   /* Packet Format */
// 1628   /* Status (1) */
// 1629 
// 1630   // Scan completed. De-register the callback with ZDO
// 1631   ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
        ; Setup parameters for call to function ZDO_DeregisterForZdoCB
        MOV       R1,#0x2
        LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
// 1632   ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
        ; Setup parameters for call to function ZDO_DeregisterForZdoCB
        MOV       R1,#0x3
        LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
// 1633 
// 1634   // Send the buffered beacon indication
// 1635   MT_ZdoBeaconIndCB ( NULL );
        ; Setup parameters for call to function MT_ZdoBeaconIndCB
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??MT_ZdoBeaconIndCB::?relay`; Banked call to: MT_ZdoBeaconIndCB
// 1636 
// 1637   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1638                                          MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R3,#0x1
        MOV       R2,#-0x39
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1639   return NULL;
        MOV       R2,#0x0
        MOV       R3,#0x0
        LJMP      ??Subroutine56_0 & 0xFFFF
// 1640 }
          CFI EndBlock cfiBlock175
// 1641 
// 1642 
// 1643 
// 1644 /***************************************************************************************************
// 1645  * @fn          MT_ZdoBeaconIndCB
// 1646  *
// 1647  * @brief       Send an indication to host device of a beacon notification
// 1648  *
// 1649  * @param       pStr -  pointer to a parameter and a structure of parameters
// 1650  *
// 1651  * @return      void
// 1652  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1653 void *MT_ZdoBeaconIndCB ( void *pStr )
MT_ZdoBeaconIndCB:
          CFI Block cfiBlock176 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
        CODE
// 1654 {
        FUNCALL MT_ZdoBeaconIndCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1655   zdoBeaconInd_t *pBeacon = pStr;
// 1656   uint8 *pTmp;
// 1657 
// 1658   /* Packet Format */
// 1659   /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
// 1660 
// 1661   if( pStr != NULL)
        MOV       A,R2
        ORL       A,R7
        MOV       DPTR,#pBeaconIndBuf
        JNZ       $+5
        LJMP      ??MT_ZdoBeaconIndCB_0 & 0xFFFF
// 1662   {
// 1663     if( pBeaconIndBuf == NULL )
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??MT_ZdoBeaconIndCB_1
// 1664     {
// 1665       // If pBeaconIndBuf has not been allocated yet
// 1666       // allocate memory now with MAX_UART_TX_BUFF
// 1667       if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x7b
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       DPTR,#pBeaconIndBuf
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       R1,A
        MOV       A,R2
        ORL       A,R1
        JNZ       $+5
        LJMP      ??MT_ZdoBeaconIndCB_2 & 0xFFFF
// 1668       {
// 1669         // Memory failure
// 1670         return NULL;
// 1671       }
// 1672       pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R2
        CLR       A
        MOVX      @DPTR,A
// 1673     }
// 1674 
// 1675     // Fill in the buffer with the beacon indication
// 1676     pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
??MT_ZdoBeaconIndCB_1:
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#pBeaconIndBuf
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
// 1677     *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_101:
        MOVX      @DPTR,A
// 1678     *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine24 & 0xFFFF
// 1679     *pTmp++ = LO_UINT16(pBeacon->panID);
??CrossCallReturnLabel_42:
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       DPL,R0
        LCALL     ?Subroutine25 & 0xFFFF
// 1680     *pTmp++ = HI_UINT16(pBeacon->panID);
??CrossCallReturnLabel_44:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        LCALL     ?Subroutine23 & 0xFFFF
// 1681     *pTmp++ = pBeacon->logicalChannel;
??CrossCallReturnLabel_40:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine21 & 0xFFFF
// 1682     *pTmp++ = pBeacon->permitJoining;
??CrossCallReturnLabel_38:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine19 & 0xFFFF
// 1683     *pTmp++ = pBeacon->routerCapacity;
??CrossCallReturnLabel_34:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine18 & 0xFFFF
// 1684     *pTmp++ = pBeacon->deviceCapacity;
??CrossCallReturnLabel_32:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine17 & 0xFFFF
// 1685     *pTmp++ = pBeacon->protocolVersion;
??CrossCallReturnLabel_30:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine12 & 0xFFFF
// 1686     *pTmp++ = pBeacon->stackProfile;
??CrossCallReturnLabel_20:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_22:
        MOVX      @DPTR,A
// 1687     *pTmp++ = pBeacon->LQI;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_23:
        INC       DPTR
        MOVX      @DPTR,A
// 1688     *pTmp++ = pBeacon->depth;
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_133:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R2
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1689     *pTmp++ = pBeacon->updateID;
        MOV       A,R6
        ADD       A,#0xc
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_128:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R2
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1690     osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       A,R6
        ADD       A,#0xd
        MOV       ?V0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,R2
        ADD       A,#0xd
        MOV       R2,A
        JNC       ??MT_ZdoBeaconIndCB_3
        INC       R3
??MT_ZdoBeaconIndCB_3:
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1691 
// 1692     pBeaconIndBuf[0] += 1; // Increment the devCnt
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_82:
        INC       A
        MOVX      @DPTR,A
// 1693 
// 1694     // Check if the buffer can fit in another beacon
// 1695     if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV       R1,B
        ADD       A,#0x16
        JNC       ??MT_ZdoBeaconIndCB_4
        INC       R1
??MT_ZdoBeaconIndCB_4:
        CLR       C
        SUBB      A,#0x7c
        MOV       A,R1
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JC        ??MT_ZdoBeaconIndCB_2
// 1696     {
// 1697       // Packet full, send the packet over MT
// 1698       MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1699                                    MT_ZDO_BEACON_NOTIFY_IND,
// 1700                                    (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LCALL     ?Subroutine7 & 0xFFFF
// 1701       pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
// 1702     }
// 1703   }
??CrossCallReturnLabel_14:
        MOV       DPH,A
        MOV       DPL,R0
        CLR       A
        SJMP      ??MT_ZdoBeaconIndCB_5
// 1704   else
// 1705   {
// 1706     if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
??MT_ZdoBeaconIndCB_0:
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??MT_ZdoBeaconIndCB_2
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        JZ        ??MT_ZdoBeaconIndCB_6
// 1707     {
// 1708       // End of beacon indication, send the packet over MT
// 1709       MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1710                                    MT_ZDO_BEACON_NOTIFY_IND,
// 1711                                    (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LCALL     ?Subroutine7 & 0xFFFF
// 1712     }
// 1713     // Free the allocated memory
// 1714     if(pBeaconIndBuf != NULL)
??CrossCallReturnLabel_15:
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??MT_ZdoBeaconIndCB_2
// 1715     {
// 1716       osal_mem_free(pBeaconIndBuf);
??MT_ZdoBeaconIndCB_6:
        ; Setup parameters for call to function osal_mem_free
        MOV       DPTR,#pBeaconIndBuf
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1717       pBeaconIndBuf = NULL;
        MOV       DPTR,#pBeaconIndBuf
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
??MT_ZdoBeaconIndCB_5:
        MOVX      @DPTR,A
// 1718     }
// 1719   }
// 1720 
// 1721   return NULL;
??MT_ZdoBeaconIndCB_2:
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
// 1722 }
          CFI EndBlock cfiBlock176

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond177 Using cfiCommon0
          CFI Function MT_ZdoJoinReq
          CFI Conditional ??CrossCallReturnLabel_132
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function MT_ZdoBeaconIndCB
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-2
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker179 Using cfiCommon1
          CFI (cfiPicker179) NoFunction
          CFI (cfiPicker179) Picker
        MOV       A,R6
        ADD       A,#0xb
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiPicker179
        REQUIRE ??Subroutine61_0
        ; // Fall through to label ??Subroutine61_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine61_0:
          CFI Block cfiCond180 Using cfiCommon0
          CFI Function MT_ZdoJoinReq
          CFI Conditional ??CrossCallReturnLabel_127
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function MT_ZdoBeaconIndCB
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function MT_ZdoSendMsgCB
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-2
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function MT_ZdoSendMsgCB
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-2
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function MT_ZdoSendMsgCB
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-2
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function MT_ZdoJoinReq
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-2
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function MT_ZdoBeaconIndCB
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-2
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker187 Using cfiCommon1
          CFI (cfiPicker187) NoFunction
          CFI (cfiPicker187) Picker
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiPicker187

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond188 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function MT_ZdoBeaconIndCB
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-2
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker190 Using cfiCommon1
          CFI (cfiPicker190) NoFunction
          CFI (cfiPicker190) Picker
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV       B,#0x15
        MUL       AB
        RET
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiPicker190

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond191 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function MT_ZdoBeaconIndCB
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_26
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-4
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function MT_ZdoBeaconIndCB
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_27
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-4
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker194 Using cfiCommon1
          CFI (cfiPicker194) NoFunction
          CFI (cfiPicker194) Picker
        MOV       DPTR,#pBeaconIndBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiPicker194

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond195 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function MT_ZdoBeaconIndCB
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-2
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker197 Using cfiCommon1
          CFI (cfiPicker197) NoFunction
          CFI (cfiPicker197) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_77:
        INC       DPTR
        RET
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiPicker197

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond198 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function MT_ZdoBeaconIndCB
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-2
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker200 Using cfiCommon1
          CFI (cfiPicker200) NoFunction
          CFI (cfiPicker200) Picker
        MOV       DPTR,#pBeaconIndBuf
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       B,#0x15
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MUL       AB
        INC       A
        MOV       R3,A
        MOV       R2,#-0x3b
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        MOV       DPTR,#pBeaconIndBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiPicker200
// 1723 
// 1724 
// 1725 
// 1726 /***************************************************************************************************
// 1727  * @fn          MT_ZdoJoinCnfCB
// 1728  *
// 1729  * @brief       Handle the ZDO Join Confirm from ZDO
// 1730  *
// 1731  * @param       pStr - pointer to a parameter and a structure of parameters
// 1732  *
// 1733  * @return      void
// 1734  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1735 void *MT_ZdoJoinCnfCB ( void *pStr )
MT_ZdoJoinCnfCB:
          CFI Block cfiBlock201 Using cfiCommon0
          CFI Function MT_ZdoJoinCnfCB
        CODE
// 1736 {
        FUNCALL MT_ZdoJoinCnfCB, ZDO_DeregisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoJoinCnfCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1737   /* pStr: zdoJoinCnf_t* */
// 1738   /* Packet Format */
// 1739   /* Status (1) | device addr (2) | parent addr (2) */
// 1740 
// 1741   uint8 buf[MT_ZDO_JOIN_CNF_LEN];
// 1742   zdoJoinCnf_t *joinCnf = pStr;
// 1743 
// 1744   /* Join Complete. De-register the callback with ZDO */
// 1745   ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
        ; Setup parameters for call to function ZDO_DeregisterForZdoCB
        MOV       R1,#0x4
        LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
// 1746 
// 1747   buf[0] = joinCnf->status;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 1748   buf[1] = LO_UINT16( joinCnf->deviceAddr );
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1749   buf[2] = HI_UINT16( joinCnf->deviceAddr );
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1750   buf[3] = LO_UINT16( joinCnf->parentAddr );
        MOV       A,R6
        ADD       A,#0x3
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_46:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1751   buf[4] = HI_UINT16( joinCnf->parentAddr );
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1752 
// 1753   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1754                                MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x5
        MOV       R2,#-0x3a
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1755 
// 1756   return NULL;
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       A,#0x5
        LJMP      ??Subroutine55_0 & 0xFFFF
// 1757 }
          CFI EndBlock cfiBlock201
// 1758 
// 1759 /*************************************************************************************************
// 1760  * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
// 1761  *
// 1762  * @brief   MT proxy for ZDO_RegisterForZDOMsg.
// 1763  *
// 1764  * @param   pBuf  - MT message data
// 1765  *
// 1766  * @return  void
// 1767  *************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1768 void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
MT_ZdoRegisterForZDOMsg:
          CFI Block cfiBlock202 Using cfiCommon0
          CFI Function MT_ZdoRegisterForZDOMsg
        CODE
// 1769 {
        FUNCALL MT_ZdoRegisterForZDOMsg, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoRegisterForZDOMsg, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1770   uint8 cmd0, cmd1, tmp;
// 1771   uint16 cId;
// 1772 
// 1773   /* parse header */
// 1774   cmd0 = pBuf[MT_RPC_POS_CMD0];
        LCALL     ?Subroutine16 & 0xFFFF
// 1775   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 1776   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_28:
        JNC       ??MT_ZdoRegisterForZDOMsg_0
        INC       R3
// 1777 
// 1778   cId = BUILD_UINT16(pBuf[0], pBuf[1]);
// 1779   tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
??MT_ZdoRegisterForZDOMsg_0:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
        LCALL     ?Subroutine33 & 0xFFFF
// 1780 
// 1781   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
??CrossCallReturnLabel_67:
        JNZ       ??MT_ZdoRegisterForZDOMsg_1
// 1782   {
// 1783     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       A,R6
        MOV       R2,A
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1784   }
// 1785 }
??MT_ZdoRegisterForZDOMsg_1:
        LJMP      ??Subroutine60_0 & 0xFFFF
          CFI EndBlock cfiBlock202

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond203 Using cfiCommon0
          CFI Function MT_ZdoStartupFromApp
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function MT_ZdoRegisterForZDOMsg
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-2
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-2
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker206 Using cfiCommon1
          CFI (cfiPicker206) NoFunction
          CFI (cfiPicker206) Picker
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       A,#-0x20
        ANL       A,R7
        XRL       A,#0x20
        RET
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiPicker206
// 1786 
// 1787 /*************************************************************************************************
// 1788  * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
// 1789  *
// 1790  * @brief   MT proxy for ZDO_RemoveRegisteredCB.
// 1791  *
// 1792  * @param   pBuf  - MT message data
// 1793  *
// 1794  * @return  void
// 1795  *************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1796 void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
MT_ZdoRemoveRegisteredCB:
          CFI Block cfiBlock207 Using cfiCommon0
          CFI Function MT_ZdoRemoveRegisteredCB
        CODE
// 1797 {
        FUNCALL MT_ZdoRemoveRegisteredCB, ZDO_RemoveRegisteredCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoRemoveRegisteredCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1798   uint8 cmd0, cmd1, tmp;
// 1799   uint16 cId;
// 1800 
// 1801   /* parse header */
// 1802   cmd0 = pBuf[MT_RPC_POS_CMD0];
        LCALL     ?Subroutine16 & 0xFFFF
// 1803   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 1804   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_29:
        JNC       ??MT_ZdoRemoveRegisteredCB_0
        INC       R3
// 1805 
// 1806   cId = BUILD_UINT16(pBuf[0], pBuf[1]);
// 1807   tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
??MT_ZdoRemoveRegisteredCB_0:
        ; Setup parameters for call to function ZDO_RemoveRegisteredCB
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL     `??ZDO_RemoveRegisteredCB::?relay`; Banked call to: ZDO_RemoveRegisteredCB
        LCALL     ?Subroutine33 & 0xFFFF
// 1808 
// 1809   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
??CrossCallReturnLabel_68:
        JNZ       ??MT_ZdoRemoveRegisteredCB_1
// 1810   {
// 1811     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       A,R6
        MOV       R2,A
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1812   }
// 1813 }
??MT_ZdoRemoveRegisteredCB_1:
        LJMP      ??Subroutine60_0 & 0xFFFF
          CFI EndBlock cfiBlock207

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond208 Using cfiCommon0
          CFI Function MT_ZdoRegisterForZDOMsg
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond209) CFA_SP SP+-2
          CFI (cfiCond209) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker210 Using cfiCommon1
          CFI (cfiPicker210) NoFunction
          CFI (cfiPicker210) Picker
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_81:
        MOV       A,R2
        ADD       A,#0x3
        RET
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiPicker210

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond211 Using cfiCommon0
          CFI Function MT_ZdoStartupFromApp
          CFI Conditional ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function MT_ZdoRegisterForZDOMsg
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_28
          CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond212) CFA_SP SP+-4
          CFI (cfiCond212) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_29
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-4
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker214 Using cfiCommon1
          CFI (cfiPicker214) NoFunction
          CFI (cfiPicker214) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        RET
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiPicker214

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond215 Using cfiCommon0
          CFI Function MT_ZdoRegisterForZDOMsg
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker217 Using cfiCommon1
          CFI (cfiPicker217) NoFunction
          CFI (cfiPicker217) Picker
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        MOV       DPTR,#MT_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiPicker217
// 1814 
// 1815 #endif /* MT_ZDO_FUNC */
// 1816 
// 1817 
// 1818 /***************************************************************************************************
// 1819  * Callback handling function
// 1820  ***************************************************************************************************/
// 1821 
// 1822 #if defined (MT_ZDO_CB_FUNC)
// 1823 
// 1824 /***************************************************************************************************
// 1825  * @fn      MT_ZdoStateChangeCB
// 1826  *
// 1827  * @brief   Handle state change OSAL message from ZDO.
// 1828  *
// 1829  * @param   pMsg  - Message data
// 1830  *
// 1831  * @return  void
// 1832  */
// 1833 void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
// 1834 {
// 1835   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1836                                        MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
// 1837 }
// 1838 
// 1839 /***************************************************************************************************
// 1840  * @fn     MT_ZdoDirectCB()
// 1841  *
// 1842  * @brief  ZDO direct callback.  Build an MT message directly from the
// 1843  *         over-the-air ZDO message.
// 1844  *
// 1845  * @param  pData - Incoming AF frame.
// 1846  *
// 1847  * @return  none
// 1848  ***************************************************************************************************/
// 1849 void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
// 1850 {
// 1851   uint8 len, *pBuf;
// 1852   uint16 origClusterId;
// 1853 
// 1854   // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
// 1855   origClusterId = pData->clusterId;
// 1856 
// 1857   // Is the message an exception or not a response?
// 1858   if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
// 1859   {
// 1860     return;  // Handled somewhere else or not needed.
// 1861   }
// 1862 
// 1863   /* ZDO data starts after one-byte sequence number and the msg buffer length includes
// 1864    * two bytes for srcAddr.
// 1865    */
// 1866   len = pData->cmd.DataLength - 1 + sizeof(uint16);
// 1867 
// 1868   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 1869   {
// 1870     uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
// 1871 
// 1872     pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
// 1873     pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
// 1874 
// 1875     /* copy ZDO data, skipping one-byte sequence number */
// 1876     osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
// 1877 
// 1878     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
// 1879     osal_mem_free(pBuf);
// 1880   }
// 1881 }
// 1882 
// 1883 /***************************************************************************************************
// 1884  * @fn     MT_ZdoHandleExceptions()
// 1885  *
// 1886  * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
// 1887  *
// 1888  * @param  pData - Incoming AF frame.
// 1889  *
// 1890  * @return  TRUE if handled by this function, FALSE if not
// 1891  ***************************************************************************************************/
// 1892 uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
// 1893 {
// 1894   uint8 ret = TRUE;
// 1895   ZDO_NwkIEEEAddrResp_t *nwkRsp;
// 1896   ZDO_DeviceAnnce_t devAnnce;
// 1897   uint8 doDefault = FALSE;
// 1898 
// 1899   switch ( inMsg->clusterID )
// 1900   {
// 1901     case NWK_addr_rsp:
// 1902     case IEEE_addr_rsp:
// 1903       if ( NULL != (nwkRsp = ZDO_ParseAddrRsp(inMsg)) )
// 1904       {
// 1905         if ( nwkRsp->status == ZDO_SUCCESS )
// 1906         {
// 1907           MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
// 1908         }
// 1909         osal_mem_free( nwkRsp );
// 1910       }
// 1911       break;
// 1912 
// 1913     case Device_annce:
// 1914       ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
// 1915       MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
// 1916       break;
// 1917 
// 1918     case Simple_Desc_rsp:
// 1919       if ( pData->cmd.DataLength > 5 )
// 1920       {
// 1921         ret = FALSE;
// 1922       }
// 1923       else
// 1924       {
// 1925         doDefault = TRUE;
// 1926       }
// 1927       break;
// 1928 
// 1929     default:
// 1930       ret = FALSE;
// 1931       break;
// 1932   }
// 1933 
// 1934   if ( doDefault )
// 1935   {
// 1936     ret = FALSE;
// 1937     pData->clusterId = MtZdoDef_rsp;
// 1938     pData->cmd.DataLength = 2;
// 1939   }
// 1940 
// 1941   return ( ret );
// 1942 }
// 1943 
// 1944 /***************************************************************************************************
// 1945  * @fn      MT_ZdoAddrRspCB
// 1946  *
// 1947  * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
// 1948  *
// 1949  * @param   pMsg  - Message data
// 1950  *
// 1951  * @return  void
// 1952  */
// 1953 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
// 1954 {
// 1955   uint8   listLen, len, *pBuf;
// 1956 
// 1957   /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
// 1958 
// 1959   /* get length, sanity check length */
// 1960   listLen = pMsg->numAssocDevs;
// 1961 
// 1962   /* calculate msg length */
// 1963   len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
// 1964 
// 1965   /* get buffer */
// 1966   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 1967   {
// 1968     uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
// 1969     uint8 *pTmp = pBuf;
// 1970 
// 1971     *pTmp++ = pMsg->status;
// 1972 
// 1973     osal_cpyExtAddr(pTmp, pMsg->extAddr);
// 1974     pTmp += Z_EXTADDR_LEN;
// 1975 
// 1976     *pTmp++ = LO_UINT16(pMsg->nwkAddr);
// 1977     *pTmp++ = HI_UINT16(pMsg->nwkAddr);
// 1978 
// 1979     *pTmp++ = pMsg->startIndex;
// 1980     *pTmp++ = listLen;
// 1981 
// 1982     MT_Word2Buf(pTmp, pMsg->devList, listLen);
// 1983 
// 1984     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
// 1985     osal_mem_free(pBuf);
// 1986   }
// 1987 }
// 1988 
// 1989 /***************************************************************************************************
// 1990  * @fn      MT_ZdoEndDevAnnceCB
// 1991  *
// 1992  * @brief   Handle end device announce OSAL message from ZDO.
// 1993  *
// 1994  * @param   pMsg  - Message data
// 1995  *
// 1996  * @return  void
// 1997  */
// 1998 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
// 1999 {
// 2000   uint8 *pBuf;
// 2001 
// 2002   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
// 2003   {
// 2004     uint8 *pTmp = pBuf;
// 2005 
// 2006     *pTmp++ = LO_UINT16(srcAddr);
// 2007     *pTmp++ = HI_UINT16(srcAddr);
// 2008 
// 2009     *pTmp++ = LO_UINT16(pMsg->nwkAddr);
// 2010     *pTmp++ = HI_UINT16(pMsg->nwkAddr);
// 2011 
// 2012     osal_cpyExtAddr(pTmp, pMsg->extAddr);
// 2013     pTmp += Z_EXTADDR_LEN;
// 2014 
// 2015     *pTmp = pMsg->capabilities;
// 2016 
// 2017     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2018                                          MT_ZDO_END_DEVICE_ANNCE_IND,
// 2019                                          MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
// 2020     osal_mem_free(pBuf);
// 2021   }
// 2022 }
// 2023 
// 2024 /***************************************************************************************************
// 2025  * @fn      MT_ZdoSrcRtgCB
// 2026  *
// 2027  * @brief   Handle Src Route from ZDO.
// 2028  *
// 2029  * @param   pStr  - pointer to the data structure for the src route
// 2030  *
// 2031  * @return  void*
// 2032  */
// 2033 void* MT_ZdoSrcRtgCB( void *pStr )
// 2034 {
// 2035   uint8 len, *pBuf;
// 2036   zdoSrcRtg_t *pSrcRtg = pStr;
// 2037 
// 2038   // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
// 2039   len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
// 2040 
// 2041   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 2042   {
// 2043     uint8 idx, *pTmp = pBuf;
// 2044     uint16 *pRelay;
// 2045 
// 2046     // Packet payload
// 2047     *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
// 2048     *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
// 2049     *pTmp++ = pSrcRtg->relayCnt;
// 2050 
// 2051     // Relay List
// 2052     if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
// 2053     {
// 2054       for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
// 2055       {
// 2056         *pTmp++ = LO_UINT16(*pRelay);
// 2057         *pTmp++ = HI_UINT16(*pRelay);
// 2058         pRelay++;
// 2059       }
// 2060     }
// 2061     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2062                                          MT_ZDO_SRC_RTG_IND, len, pBuf);
// 2063     osal_mem_free(pBuf);
// 2064   }
// 2065 
// 2066   return NULL;
// 2067 }
// 2068 
// 2069 /***************************************************************************************************
// 2070  * @fn          MT_ZdoConcentratorIndCB
// 2071  *
// 2072  * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
// 2073  *
// 2074  * @param       pStr - pointer to a parameter and a structure of parameters
// 2075  *
// 2076  * @return      NULL
// 2077  ***************************************************************************************************/
// 2078 static void *MT_ZdoConcentratorIndCB(void *pStr)
// 2079 {
// 2080   uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
// 2081   zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
// 2082 
// 2083   *pTmp++ = LO_UINT16(pInd->nwkAddr);
// 2084   *pTmp++ = HI_UINT16(pInd->nwkAddr);
// 2085   pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
// 2086   *pTmp = pInd->pktCost;
// 2087 
// 2088   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2089                                     MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
// 2090   return NULL;
// 2091 }
// 2092 
// 2093 /***************************************************************************************************
// 2094  * @fn          MT_ZdoLeaveInd
// 2095  *
// 2096  * @brief       Handle the ZDO Leave Indication callback from the ZDO.
// 2097  *
// 2098  * @param       vPtr - Pointer to the received Leave Indication message.
// 2099  *
// 2100  * @return      NULL
// 2101  ***************************************************************************************************/
// 2102 static void *MT_ZdoLeaveInd(void *vPtr)
// 2103 {
// 2104   NLME_LeaveInd_t *pInd = (NLME_LeaveInd_t *)vPtr;
// 2105   uint8 buf[sizeof(NLME_LeaveInd_t)];
// 2106 
// 2107   buf[0] = LO_UINT16(pInd->srcAddr);
// 2108   buf[1] = HI_UINT16(pInd->srcAddr);
// 2109   (void)osal_memcpy(buf+2, pInd->extAddr, Z_EXTADDR_LEN);
// 2110   buf[2+Z_EXTADDR_LEN] = pInd->request;
// 2111   buf[3+Z_EXTADDR_LEN] = pInd->removeChildren;
// 2112   buf[4+Z_EXTADDR_LEN] = pInd->rejoin;
// 2113 
// 2114   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2115                                        MT_ZDO_LEAVE_IND, 5+Z_EXTADDR_LEN, buf);
// 2116   return NULL;
// 2117 }
// 2118 #endif // MT_ZDO_CB_FUNC
// 2119 
// 2120 /***************************************************************************************************
// 2121  * @fn      MT_ZdoSendMsgCB
// 2122  *
// 2123  * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
// 2124  *
// 2125  * @param   pMsg  - Message data
// 2126  *
// 2127  * @return  void
// 2128  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2129 void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
MT_ZdoSendMsgCB:
          CFI Block cfiBlock218 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
        CODE
// 2130 {
        FUNCALL MT_ZdoSendMsgCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2131   uint8 len = pMsg->asduLen + 9;
        MOV       A,R2
        ADD       A,#0x10
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_129:
        ADD       A,#0x9
        MOV       ?V2,A
// 2132   uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2133 
// 2134   if (pBuf != NULL)
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??MT_ZdoSendMsgCB_0 & 0xFFFF
// 2135   {
// 2136     uint8 *pTmp = pBuf;
// 2137 
// 2138     // Assuming exclusive use of network short addresses.
// 2139     *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
        MOV       A,R6
        ADD       A,#0x2
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL     ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_102:
        MOVX      @DPTR,A
// 2140     *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine24 & 0xFFFF
// 2141     *pTmp++ = pMsg->wasBroadcast;
??CrossCallReturnLabel_43:
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        LCALL     ?Subroutine25 & 0xFFFF
// 2142     *pTmp++ = LO_UINT16(pMsg->clusterID);
??CrossCallReturnLabel_45:
        MOV       A,R6
        ADD       A,#0xc
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL     ?Subroutine23 & 0xFFFF
// 2143     *pTmp++ = HI_UINT16(pMsg->clusterID);
??CrossCallReturnLabel_41:
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine21 & 0xFFFF
// 2144     *pTmp++ = pMsg->SecurityUse;
??CrossCallReturnLabel_39:
        MOV       A,R6
        ADD       A,#0xe
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        LCALL     ?Subroutine19 & 0xFFFF
// 2145     *pTmp++ = pMsg->TransSeq;
??CrossCallReturnLabel_35:
        MOV       A,R6
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        LCALL     ?Subroutine18 & 0xFFFF
// 2146     // Skipping asduLen since it can be deduced from the RPC packet length.
// 2147     *pTmp++ = LO_UINT16(pMsg->macDestAddr);
??CrossCallReturnLabel_33:
        MOV       A,R6
        ADD       A,#0x11
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL     ?Subroutine17 & 0xFFFF
// 2148     *pTmp++ = HI_UINT16(pMsg->macDestAddr);
??CrossCallReturnLabel_31:
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine12 & 0xFFFF
// 2149     (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
??CrossCallReturnLabel_21:
        ; Setup parameters for call to function osal_memcpy
        MOV       A,R6
        ADD       A,#0x13
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_130:
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,R6
        ADD       A,#0x10
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_131:
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,R2
        ADD       A,#0x9
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 2150 
// 2151     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2152                                          MT_ZDO_MSG_CB_INCOMING, len, pBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R3,?V2
        MOV       R2,#-0x1
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2153 
// 2154     osal_mem_free(pBuf);
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2155   }
// 2156 }
??MT_ZdoSendMsgCB_0:
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock218

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond219 Using cfiCommon0
          CFI Function MT_ZdoJoinCnfCB
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function MT_ZdoSendMsgCB
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-2
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function MT_ZdoSendMsgCB
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-2
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function MT_ZdoSendMsgCB
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-2
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker223 Using cfiCommon1
          CFI (cfiPicker223) NoFunction
          CFI (cfiPicker223) Picker
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiPicker223

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond224 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond225 Using cfiCommon0
          CFI (cfiCond225) Function MT_ZdoSendMsgCB
          CFI (cfiCond225) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond225) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond225) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond225) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond225) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond225) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond225) CFA_SP SP+-2
          CFI (cfiCond225) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker226 Using cfiCommon1
          CFI (cfiPicker226) NoFunction
          CFI (cfiPicker226) Picker
        MOV       DPH,A
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_88:
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond224
          CFI EndBlock cfiCond225
          CFI EndBlock cfiPicker226

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond227 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond228 Using cfiCommon0
          CFI (cfiCond228) Function MT_ZdoSendMsgCB
          CFI (cfiCond228) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond228) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond228) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond228) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond228) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond228) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond228) CFA_SP SP+-2
          CFI (cfiCond228) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker229 Using cfiCommon1
          CFI (cfiPicker229) NoFunction
          CFI (cfiPicker229) Picker
        INC       DPTR
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_87:
        MOVX      @DPTR,A
        MOV       A,R6
        RET
          CFI EndBlock cfiCond227
          CFI EndBlock cfiCond228
          CFI EndBlock cfiPicker229

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond230 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function MT_ZdoSendMsgCB
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_45
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-4
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond232 Using cfiCommon0
          CFI (cfiCond232) Function MT_ZdoBeaconIndCB
          CFI (cfiCond232) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_42
          CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond232) CFA_SP SP+-4
          CFI (cfiCond232) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function MT_ZdoSendMsgCB
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_43
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-4
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function MT_ZdoBeaconIndCB
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_40
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-4
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function MT_ZdoSendMsgCB
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_41
          CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond235) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond235) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond235) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond235) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond235) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond235) CFA_SP SP+-4
          CFI (cfiCond235) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker236 Using cfiCommon1
          CFI (cfiPicker236) NoFunction
          CFI (cfiPicker236) Picker
        LCALL     ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_104:
        INC       DPTR
        RET
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiPicker236

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine49:
          CFI Block cfiCond237 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_101
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function MT_ZdoSendMsgCB
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+-2
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond239 Using cfiCommon0
          CFI (cfiCond239) Function MT_ZdoBeaconIndCB
          CFI (cfiCond239) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_44
          CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond239) CFA_SP SP+-6
          CFI (cfiCond239) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function MT_ZdoSendMsgCB
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_45
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond240) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+-6
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function MT_ZdoBeaconIndCB
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_42
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-6
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function MT_ZdoSendMsgCB
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_43
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond242) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-6
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function MT_ZdoBeaconIndCB
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_40
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+-6
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function MT_ZdoSendMsgCB
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_41
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond244) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond244) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+-6
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function MT_ZdoBeaconIndCB
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_38
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+-6
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond246 Using cfiCommon0
          CFI (cfiCond246) Function MT_ZdoSendMsgCB
          CFI (cfiCond246) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_39
          CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond246) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond246) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond246) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond246) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond246) CFA_SP SP+-6
          CFI (cfiCond246) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond247 Using cfiCommon0
          CFI (cfiCond247) Function MT_ZdoBeaconIndCB
          CFI (cfiCond247) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_34
          CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond247) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond247) CFA_SP SP+-6
          CFI (cfiCond247) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond248 Using cfiCommon0
          CFI (cfiCond248) Function MT_ZdoSendMsgCB
          CFI (cfiCond248) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_35
          CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond248) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond248) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond248) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond248) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond248) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond248) CFA_SP SP+-6
          CFI (cfiCond248) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker249 Using cfiCommon1
          CFI (cfiPicker249) NoFunction
          CFI (cfiPicker249) Picker
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        RET
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiCond246
          CFI EndBlock cfiCond247
          CFI EndBlock cfiCond248
          CFI EndBlock cfiPicker249

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond250 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function MT_ZdoSendMsgCB
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-2
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker252 Using cfiCommon1
          CFI (cfiPicker252) NoFunction
          CFI (cfiPicker252) Picker
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_86:
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiPicker252

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond253 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function MT_ZdoSendMsgCB
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond254) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+-2
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker255 Using cfiCommon1
          CFI (cfiPicker255) NoFunction
          CFI (cfiPicker255) Picker
        INC       DPTR
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_85:
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiPicker255

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond256 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond257 Using cfiCommon0
          CFI (cfiCond257) Function MT_ZdoSendMsgCB
          CFI (cfiCond257) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond257) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond257) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond257) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond257) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond257) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond257) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond257) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond257) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond257) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond257) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond257) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond257) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond257) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond257) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond257) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond257) CFA_SP SP+-2
          CFI (cfiCond257) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker258 Using cfiCommon1
          CFI (cfiPicker258) NoFunction
          CFI (cfiPicker258) Picker
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_84:
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond256
          CFI EndBlock cfiCond257
          CFI EndBlock cfiPicker258

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond259 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond260 Using cfiCommon0
          CFI (cfiCond260) Function MT_ZdoSendMsgCB
          CFI (cfiCond260) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_39
          CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond260) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond260) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond260) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond260) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond260) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond260) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond260) CFA_SP SP+-4
          CFI (cfiCond260) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond261 Using cfiCommon0
          CFI (cfiCond261) Function MT_ZdoBeaconIndCB
          CFI (cfiCond261) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_34
          CFI (cfiCond261) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond261) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond261) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond261) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond261) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond261) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond261) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond261) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond261) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond261) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond261) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond261) CFA_SP SP+-4
          CFI (cfiCond261) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond262 Using cfiCommon0
          CFI (cfiCond262) Function MT_ZdoSendMsgCB
          CFI (cfiCond262) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_35
          CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond262) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond262) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond262) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond262) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond262) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond262) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond262) CFA_SP SP+-4
          CFI (cfiCond262) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker263 Using cfiCommon1
          CFI (cfiPicker263) NoFunction
          CFI (cfiPicker263) Picker
        LCALL     ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_103:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond259
          CFI EndBlock cfiCond260
          CFI EndBlock cfiCond261
          CFI EndBlock cfiCond262
          CFI EndBlock cfiPicker263

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond264 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function MT_ZdoSendMsgCB
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond265) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond265) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond265) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond265) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond265) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond265) CFA_SP SP+-2
          CFI (cfiCond265) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker266 Using cfiCommon1
          CFI (cfiPicker266) NoFunction
          CFI (cfiPicker266) Picker
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_79:
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiPicker266

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond267 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond268 Using cfiCommon0
          CFI (cfiCond268) Function MT_ZdoSendMsgCB
          CFI (cfiCond268) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond268) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond268) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond268) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond268) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond268) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond268) CFA_SP SP+-2
          CFI (cfiCond268) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker269 Using cfiCommon1
          CFI (cfiPicker269) NoFunction
          CFI (cfiPicker269) Picker
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_78:
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond267
          CFI EndBlock cfiCond268
          CFI EndBlock cfiPicker269

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond270 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond271 Using cfiCommon0
          CFI (cfiCond271) Function MT_ZdoSendMsgCB
          CFI (cfiCond271) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_33
          CFI (cfiCond271) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond271) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond271) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond271) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond271) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond271) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond271) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond271) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond271) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond271) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond271) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond271) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond271) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond271) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond271) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond271) CFA_SP SP+-4
          CFI (cfiCond271) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond272 Using cfiCommon0
          CFI (cfiCond272) Function MT_ZdoBeaconIndCB
          CFI (cfiCond272) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_30
          CFI (cfiCond272) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond272) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond272) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond272) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond272) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond272) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond272) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond272) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond272) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond272) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond272) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond272) CFA_SP SP+-4
          CFI (cfiCond272) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond273 Using cfiCommon0
          CFI (cfiCond273) Function MT_ZdoSendMsgCB
          CFI (cfiCond273) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_31
          CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond273) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond273) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond273) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond273) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond273) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond273) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond273) CFA_SP SP+-4
          CFI (cfiCond273) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker274 Using cfiCommon1
          CFI (cfiPicker274) NoFunction
          CFI (cfiPicker274) Picker
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_96:
        RET
          CFI EndBlock cfiCond270
          CFI EndBlock cfiCond271
          CFI EndBlock cfiCond272
          CFI EndBlock cfiCond273
          CFI EndBlock cfiPicker274

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine47:
          CFI Block cfiCond275 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond276 Using cfiCommon0
          CFI (cfiCond276) Function MT_ZdoSendMsgCB
          CFI (cfiCond276) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_33
          CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond276) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond276) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond276) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond276) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond276) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond276) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond276) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond276) CFA_SP SP+-6
          CFI (cfiCond276) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond277 Using cfiCommon0
          CFI (cfiCond277) Function MT_ZdoBeaconIndCB
          CFI (cfiCond277) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_30
          CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond277) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond277) CFA_SP SP+-6
          CFI (cfiCond277) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond278 Using cfiCommon0
          CFI (cfiCond278) Function MT_ZdoSendMsgCB
          CFI (cfiCond278) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_31
          CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond278) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond278) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond278) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond278) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond278) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond278) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond278) CFA_SP SP+-6
          CFI (cfiCond278) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond279 Using cfiCommon0
          CFI (cfiCond279) Function MT_ZdoBeaconIndCB
          CFI (cfiCond279) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_22
          CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond279) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond279) CFA_SP SP+-6
          CFI (cfiCond279) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond280 Using cfiCommon0
          CFI (cfiCond280) Function MT_ZdoBeaconIndCB
          CFI (cfiCond280) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_23
          CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond280) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond280) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond280) CFA_SP SP+-6
          CFI (cfiCond280) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function MT_ZdoBeaconIndCB
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_20
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+-6
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function MT_ZdoSendMsgCB
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_21
          CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond282) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond282) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond282) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond282) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond282) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond282) CFA_SP SP+-6
          CFI (cfiCond282) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker283 Using cfiCommon1
          CFI (cfiPicker283) NoFunction
          CFI (cfiPicker283) Picker
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond275
          CFI EndBlock cfiCond276
          CFI EndBlock cfiCond277
          CFI EndBlock cfiCond278
          CFI EndBlock cfiCond279
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiPicker283

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond284 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond285 Using cfiCommon0
          CFI (cfiCond285) Function MT_ZdoSendMsgCB
          CFI (cfiCond285) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond285) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond285) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond285) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond285) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond285) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond285) CFA_SP SP+-2
          CFI (cfiCond285) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker286 Using cfiCommon1
          CFI (cfiPicker286) NoFunction
          CFI (cfiPicker286) Picker
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_76:
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond284
          CFI EndBlock cfiCond285
          CFI EndBlock cfiPicker286

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond287 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond288 Using cfiCommon0
          CFI (cfiCond288) Function MT_ZdoBeaconIndCB
          CFI (cfiCond288) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_23
          CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond288) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond288) CFA_SP SP+-4
          CFI (cfiCond288) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond289 Using cfiCommon0
          CFI (cfiCond289) Function MT_ZdoBeaconIndCB
          CFI (cfiCond289) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_20
          CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond289) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond289) CFA_SP SP+-4
          CFI (cfiCond289) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond290 Using cfiCommon0
          CFI (cfiCond290) Function MT_ZdoSendMsgCB
          CFI (cfiCond290) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_21
          CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond290) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond290) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond290) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond290) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond290) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond290) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond290) CFA_SP SP+-4
          CFI (cfiCond290) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker291 Using cfiCommon1
          CFI (cfiPicker291) NoFunction
          CFI (cfiPicker291) Picker
        INC       DPTR
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_95:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond287
          CFI EndBlock cfiCond288
          CFI EndBlock cfiCond289
          CFI EndBlock cfiCond290
          CFI EndBlock cfiPicker291

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoCommandProcessing::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoCommandProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoNWKAddressRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNWKAddressRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoIEEEAddrRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoIEEEAddrRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoNodeDescRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNodeDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoPowerDescRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoPowerDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoSimpleDescRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoSimpleDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoActiveEpRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoActiveEpRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoMatchDescRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoMatchDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoComplexDescRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoComplexDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoUserDescRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoUserDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoEndDevAnnce::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoEndDevAnnce

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoUserDescSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoUserDescSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoServiceDiscRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoServiceDiscRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoEndDevBindRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoEndDevBindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoBindRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoBindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoUnbindRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoUnbindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoStartupFromApp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoStartupFromApp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoNetworkDiscoveryReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNetworkDiscoveryReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoJoinReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoJoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoNwkDiscoveryCnfCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNwkDiscoveryCnfCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoBeaconIndCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoBeaconIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoJoinCnfCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoJoinCnfCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoRegisterForZDOMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoRegisterForZDOMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoRemoveRegisteredCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoRemoveRegisteredCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoSendMsgCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoSendMsgCB

        END
// 2157 
// 2158 #endif   /*ZDO Command Processing in MT*/
// 2159 /***************************************************************************************************
// 2160 ***************************************************************************************************/
// 
// 3 415 bytes in segment BANKED_CODE
//   156 bytes in segment BANK_RELAYS
//     6 bytes in segment XDATA_Z
// 
//   156 bytes of CODE     memory
// 3 415 bytes of HUGECODE memory
//     6 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
