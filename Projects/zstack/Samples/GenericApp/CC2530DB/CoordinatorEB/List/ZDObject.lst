###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               30/Aug/2019  09:21:33
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\ZStack-CC2530-2.5.1a\Components\stack\zdo\ZDObject.c
#    Command line       =  
#        -f C:\Users\Ð¡»ðÁú\AppData\Local\Temp\EW7C00.tmp
#        (D:\ZStack-CC2530-2.5.1a\Components\stack\zdo\ZDObject.c -D ZTOOL_P1
#        -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x02000000 -DZDAPP_CONFIG_PAN_ID=0xFFF0
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\ZDObject.lst
#    Object file        =  
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\ZDObject.r51
#
###############################################################################

D:\ZStack-CC2530-2.5.1a\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2011-07-13 10:55:53 -0700 (Wed, 13 Jul 2011) $
      4            Revision:       $Revision: 26766 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          // NLME Stub Implementations
     81          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     82          
     83          // Status fields used by ZDO_ProcessMgmtRtgReq
     84          #define ZDO_MGMT_RTG_ENTRY_ACTIVE             0x00
     85          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY 0x01
     86          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED   0x02
     87          #define ZDO_MGMT_RTG_ENTRY_INACTIVE           0x03
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          #if defined ( REFLECTOR )
     93          typedef struct
     94          {
     95            byte SrcTransSeq;
     96            zAddrType_t SrcAddr;
     97            uint16 LocalCoordinator;
     98            byte epIntf;
     99            uint16 ProfileID;
    100            byte numInClusters;
    101            uint16 *inClusters;
    102            byte numOutClusters;
    103            uint16 *outClusters;
    104            byte SecurityUse;
    105            byte status;
    106          } ZDO_EDBind_t;
    107          #endif // defined ( REFLECTOR )
    108          
    109          enum
    110          {
    111            ZDMATCH_INIT,           // Initialized
    112            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    113            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    114          };
    115          
    116          enum
    117          {
    118            ZDMATCH_SENDING_NOT,
    119            ZDMATCH_SENDING_UNBIND,
    120            ZDMATCH_SENDING_BIND
    121          };
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          
    127          /*********************************************************************
    128           * EXTERNAL VARIABLES
    129           */
    130          
    131          /*********************************************************************
    132           * EXTERNAL FUNCTIONS
    133           */
    134          
    135          /*********************************************************************
    136           * LOCAL VARIABLES
    137           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    139          
    140          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    142          #endif
    143          
    144          #if defined ( MANAGED_SCAN )
    145            uint32 managedScanNextChannel = 0;
    146            uint32 managedScanChannelMask = 0;
    147            uint8  managedScanTimesPerChannel = 0;
    148          #endif
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    153          
    154          /*********************************************************************
    155           * LOCAL FUNCTIONS
    156           */
    157          static void ZDODeviceSetup( void );
    158          #if defined ( MANAGED_SCAN )
    159            static void ZDOManagedScan_Next( void );
    160          #endif
    161          #if defined ( REFLECTOR )
    162            static void ZDO_RemoveEndDeviceBind( void );
    163            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    164          #endif
    165          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    166                                          byte numList2, uint16 *list2, uint16 *pMatches );
    167          static void ZDO_RemoveMatchMemory( void );
    168          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    169          static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    170          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    171          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    172          
    173          /*********************************************************************
    174           * @fn          ZDO_Init
    175           *
    176           * @brief       ZDObject and ZDProfile initialization.
    177           *
    178           * @param       none
    179           *
    180           * @return      none
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          void ZDO_Init( void )
   \                     ZDO_Init:
    183          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    184            // Initialize ZD items
    185            #if defined ( REFLECTOR )
    186            ZDO_EDBind = NULL;
   \   000004   90....       MOV       DPTR,#ZDO_EDBind
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
    187            #endif
    188          
    189            // Initialize default ZDO_UseExtendedPANID to the APS one.
    190            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV       R4,#AIB_apsUseExtendedPANID & 0xff
   \   00000D   7D..         MOV       R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00000F   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000011   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000013   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    191          
    192            // Setup the device - type of device to create.
    193            ZDODeviceSetup();
   \   000016                ; Setup parameters for call to function NLME_CoordinatorInit
   \   000016   12....       LCALL     `??NLME_CoordinatorInit::?relay`; Banked call to: NLME_CoordinatorInit
   \   000019                ; Setup parameters for call to function APS_ReflectorInit
   \   000019   7900         MOV       R1,#0x0
   \   00001B   12....       LCALL     `??APS_ReflectorInit::?relay`; Banked call to: APS_ReflectorInit
    194          }
   \   00001E   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    195          
    196          #if defined ( MANAGED_SCAN )
    197          /*********************************************************************
    198           * @fn      ZDOManagedScan_Next()
    199           *
    200           * @brief   Setup a managed scan.
    201           *
    202           * @param   none
    203           *
    204           * @return  none
    205           */
    206          static void ZDOManagedScan_Next( void )
    207          {
    208            // Is it the first time
    209            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    210            {
    211              // Setup the defaults
    212              managedScanNextChannel  = 1;
    213          
    214              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    215                managedScanNextChannel <<= 1;
    216          
    217              managedScanChannelMask = managedScanNextChannel;
    218              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    219            }
    220            else
    221            {
    222              // Do we need to go to the next channel
    223              if ( managedScanTimesPerChannel == 0 )
    224              {
    225                // Find next active channel
    226                managedScanChannelMask  = managedScanNextChannel;
    227                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    228              }
    229              else
    230              {
    231                managedScanTimesPerChannel--;
    232          
    233                if ( managedScanTimesPerChannel == 0 )
    234                {
    235                  managedScanNextChannel  <<= 1;
    236                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    237                    managedScanNextChannel <<= 1;
    238          
    239                  if ( managedScanNextChannel == 0 )
    240                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    241                }
    242              }
    243            }
    244          }
    245          #endif // MANAGED_SCAN
    246          
    247          /*********************************************************************
    248           * @fn      ZDODeviceSetup()
    249           *
    250           * @brief   Call set functions depending on the type of device compiled.
    251           *
    252           * @param   none
    253           *
    254           * @return  none
    255           */
    256          static void ZDODeviceSetup( void )
    257          {
    258            if ( ZG_BUILD_COORDINATOR_TYPE )
    259            {
    260              NLME_CoordinatorInit();
    261            }
    262          
    263          #if defined ( REFLECTOR )
    264            APS_ReflectorInit( (ZG_DEVICE_COORDINATOR_TYPE) ? APS_REFLECTOR_PUBLIC :  APS_REFLECTOR_PRIVATE );
    265          #endif
    266          
    267            if ( ZG_BUILD_JOINING_TYPE )
    268            {
    269              NLME_DeviceJoiningInit();
    270            }
    271          }
    272          
    273          /*********************************************************************
    274           * @fn          ZDO_StartDevice
    275           *
    276           * @brief       This function starts a device in a network.
    277           *
    278           * @param       logicalType     - Device type to start
    279           *              startMode       - indicates mode of device startup
    280           *              beaconOrder     - indicates time betwen beacons
    281           *              superframeOrder - indicates length of active superframe
    282           *
    283           * @return      none
    284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    285          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    286          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EB           MOV       A,R3
   \   000006   FE           MOV       R6,A
    287            ZStatus_t ret;
    288          #if defined ( ZIGBEE_FREQ_AGILITY )
    289            static uint8 discRetries = 0;
    290          #endif
    291          #if defined ( ZIGBEE_COMMISSIONING )
    292            static uint8 scanCnt = 0;
    293          #endif
    294          
    295            ret = ZUnsupportedMode;
    296          
    297            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
   \   000007   E9           MOV       A,R1
   \   000008   7065         JNZ       ??ZDO_StartDevice_0
    298            {
    299              if ( startMode == MODE_HARD )
   \   00000A   7402         MOV       A,#0x2
   \   00000C   6A           XRL       A,R2
   \   00000D   703D         JNZ       ??ZDO_StartDevice_1
    300              {
    301                devState = DEV_COORD_STARTING;
   \   00000F   90....       MOV       DPTR,#devState
   \   000012   7408         MOV       A,#0x8
   \   000014   F0           MOVX      @DPTR,A
    302                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    303                                                    zgDefaultStartingScanDuration, beaconOrder,
    304                                                    superframeOrder, false );
   \   000015                ; Setup parameters for call to function NLME_NetworkFormationRequest
   \   000015   75..00       MOV       ?V2,#0x0
   \   000018   78..         MOV       R0,#?V2
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00001D   EC           MOV       A,R4
   \   00001E   F5..         MOV       ?V2,A
   \   000020   78..         MOV       R0,#?V2
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000025   EB           MOV       A,R3
   \   000026   F5..         MOV       ?V2,A
   \   000028   78..         MOV       R0,#?V2
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002D   90....       MOV       DPTR,#zgDefaultChannelList
   \   000030   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000033   90....       MOV       DPTR,#zgDefaultStartingScanDuration
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F9           MOV       R1,A
   \   000038   7C..         MOV       R4,#zgApsUseExtendedPANID & 0xff
   \   00003A   7D..         MOV       R5,#(zgApsUseExtendedPANID >> 8) & 0xff
   \   00003C   90....       MOV       DPTR,#zgConfigPANID
   \   00003F   12....       LCALL     ??Subroutine224_0 & 0xFFFF
    305              }
   \                     ??CrossCallReturnLabel_395:
   \   000042   12....       LCALL     `??NLME_NetworkFormationRequest::?relay`; Banked call to: NLME_NetworkFormationRequest
   \   000045   7407         MOV       A,#0x7
   \   000047   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004A   8013         SJMP      ??ZDO_StartDevice_2
    306              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_1:
   \   00004C   7401         MOV       A,#0x1
   \   00004E   6A           XRL       A,R2
   \   00004F   7013         JNZ       ??ZDO_StartDevice_3
    307              {
    308                // Just start the coordinator
    309                devState = DEV_COORD_STARTING;
   \   000051   90....       MOV       DPTR,#devState
   \   000054   7408         MOV       A,#0x8
   \   000056   F0           MOVX      @DPTR,A
    310                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
   \   000057                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000057   7B00         MOV       R3,#0x0
   \   000059   EE           MOV       A,R6
   \   00005A   FA           MOV       R2,A
   \   00005B   F9           MOV       R1,A
   \   00005C   12....       LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \                     ??ZDO_StartDevice_2:
   \   00005F   E9           MOV       A,R1
    311              }
    312              else
    313              {
    314          #if defined( LCD_SUPPORTED )
    315                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    316          #endif
    317              }
    318            }
    319          
    320            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
    321            {
    322              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
    323              {
    324                devState = DEV_NWK_DISC;
    325          
    326            #if defined( MANAGED_SCAN )
    327                ZDOManagedScan_Next();
    328                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    329            #else
    330                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
    331              #if defined ( ZIGBEE_FREQ_AGILITY )
    332                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    333                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
    334                {
    335                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    336                  // change will not be recieved. On these devices or routers that have
    337                  // lost the network, an active scan shall be conducted on the Default
    338                  // Channel list using the extended PANID to find the network. If the
    339                  // extended PANID isn't found using the Default Channel list, an scan
    340                  // should be completed using all channels.
    341                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    342                }
    343              #endif // ZIGBEE_FREQ_AGILITY
    344              #if defined ( ZIGBEE_COMMISSIONING )
    345                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
    346                {
    347                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    348                  // application specific means, the device shall conduct an active scan
    349                  // on the Default Channel list and join the PAN with the same
    350                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    351                  // on all channels.
    352                  // When devices rejoin the network and the PAN is not found from
    353                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    354                }
    355              #endif // ZIGBEE_COMMISSIONING
    356            #endif
    357              }
    358              else if ( startMode == MODE_RESUME )
    359              {
    360                if ( logicalType == NODETYPE_ROUTER )
    361                {
    362                  ZMacScanCnf_t scanCnf;
    363                  devState = DEV_NWK_ORPHAN;
    364          
    365                  /* if router and nvram is available, fake successful orphan scan */
    366                  scanCnf.hdr.Status = ZSUCCESS;
    367                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
    368                  scanCnf.UnscannedChannels = 0;
    369                  scanCnf.ResultListSize = 0;
    370                  nwk_ScanJoiningOrphan(&scanCnf);
    371          
    372                  ret = ZSuccess;
    373                }
    374                else
    375                {
    376                  devState = DEV_NWK_ORPHAN;
    377                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    378                                                zgDefaultStartingScanDuration );
    379                }
    380              }
    381              else
    382              {
    383          #if defined( LCD_SUPPORTED )
    384                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    385          #endif
    386              }
    387            }
    388          
    389            if ( ret != ZSuccess )
   \   000060   700D         JNZ       ??ZDO_StartDevice_0
   \   000062   801B         SJMP      ??ZDO_StartDevice_4
   \                     ??ZDO_StartDevice_3:
   \   000064                ; Setup parameters for call to function HalLcdWriteScreen
   \   000064   7C..         MOV       R4,#`?<Constant "MODE unknown">` & 0xff
   \   000066   7D..         MOV       R5,#(`?<Constant "MODE unknown">` >> 8) & 0xff
   \   000068   7A..         MOV       R2,#`?<Constant "StartDevice ERR">` & 0xff
   \   00006A   7B..         MOV       R3,#(`?<Constant "StartDevice ERR">` >> 8) & 0xff
   \   00006C   12....       LCALL     `??HalLcdWriteScreen::?relay`; Banked call to: HalLcdWriteScreen
    390            {
    391              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_0:
   \   00006F                ; Setup parameters for call to function osal_start_timerEx
   \   00006F   7CE8         MOV       R4,#-0x18
   \   000071   7D03         MOV       R5,#0x3
   \   000073   7A01         MOV       R2,#0x1
   \   000075   7B00         MOV       R3,#0x0
   \   000077   90....       MOV       DPTR,#ZDAppTaskID
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F9           MOV       R1,A
   \   00007C   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    392            }
    393          }
   \                     ??ZDO_StartDevice_4:
   \   00007F   7F03         MOV       R7,#0x3
   \   000081   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine251_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    394          
    395          /**************************************************************************************************
    396           * @fn          zdoSendStateChangeMsg
    397           *
    398           * @brief       Helper function for ZDO_UpdateNwkStatus.
    399           *
    400           * input parameters
    401           *
    402           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    403           * @param       state - The current device state.
    404           *
    405           * output parameters
    406           *
    407           * None.
    408           *
    409           * @return      None.
    410           **************************************************************************************************
    411           */
    412          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
    413          {
    414            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
    415          
    416            if (NULL == pMsg)
    417            {
    418              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
    419              {
    420                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    421                // try again later when more Heap may be available.
    422                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
    423              }
    424              else
    425              {
    426                pMsg->event = ZDO_STATE_CHANGE;
    427                pMsg->status = state;
    428          
    429                (void)osal_msg_send(taskId, (uint8 *)pMsg);
    430              }
    431            }
    432            else
    433            {
    434              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    435              pMsg->status = state;
    436            }
    437          }
    438          
    439          /**************************************************************************************************
    440           * @fn          ZDO_UpdateNwkStatus
    441           *
    442           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    443           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    444           *              than one registered EndPoint, it will only receive one notification per state
    445           *              change. Although the device may go through a sequence of state changes, the
    446           *              Application task may only receive notification of the final, steady-state state
    447           *              because it has the lowest priority and never even runs to receive the intermediate
    448           *              state change notifications.
    449           *
    450           * input parameters
    451           *
    452           * @param       state - The current device state.
    453           *
    454           * output parameters
    455           *
    456           * None.
    457           *
    458           * @return      None.
    459           **************************************************************************************************
    460           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    461          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    462          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
    463            epList_t *pItem = epList;
   \   000007   90....       MOV       DPTR,#epList
   \   00000A   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_609:
   \   00000D   800E         SJMP      ??ZDO_UpdateNwkStatus_0
    464          
    465            while (pItem != NULL)
    466            {
    467              if (pItem->epDesc->endPoint != ZDO_EP)
    468              {
    469                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \                     ??ZDO_UpdateNwkStatus_1:
   \   00000F   A3           INC       DPTR
   \   000010   E5..         MOV       A,?V1
   \   000012   F0           MOVX      @DPTR,A
    470              }
    471          
    472              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_2:
   \   000013   8E82         MOV       DPL,R6
   \   000015   8F83         MOV       DPH,R7
   \   000017   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   00001A   E8           MOV       A,R0
   \   00001B   FE           MOV       R6,A
   \   00001C   E9           MOV       A,R1
   \                     ??ZDO_UpdateNwkStatus_0:
   \   00001D   FF           MOV       R7,A
   \   00001E   EE           MOV       A,R6
   \   00001F   4F           ORL       A,R7
   \   000020   6050         JZ        ??ZDO_UpdateNwkStatus_3
   \   000022   8E82         MOV       DPL,R6
   \   000024   8F83         MOV       DPH,R7
   \   000026   A3           INC       DPTR
   \   000027   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   00002A   60E7         JZ        ??ZDO_UpdateNwkStatus_2
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   8F83         MOV       DPH,R7
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   12....       LCALL     ?Subroutine59 & 0xFFFF
    473            }
   \                     ??CrossCallReturnLabel_380:
   \   000035   F5..         MOV       ?V0,A
   \   000037                ; Setup parameters for call to function osal_msg_find
   \   000037   7AD1         MOV       R2,#-0x2f
   \   000039   F9           MOV       R1,A
   \   00003A   12....       LCALL     `??osal_msg_find::?relay`; Banked call to: osal_msg_find
   \   00003D   8A82         MOV       DPL,R2
   \   00003F   8B83         MOV       DPH,R3
   \   000041   E582         MOV       A,DPL
   \   000043   4583         ORL       A,DPH
   \   000045   70C8         JNZ       ??ZDO_UpdateNwkStatus_1
   \   000047                ; Setup parameters for call to function osal_msg_allocate
   \   000047   7A02         MOV       R2,#0x2
   \   000049   7B00         MOV       R3,#0x0
   \   00004B   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00004E   EA           MOV       A,R2
   \   00004F   4B           ORL       A,R3
   \   000050   700E         JNZ       ??ZDO_UpdateNwkStatus_4
   \   000052                ; Setup parameters for call to function osal_set_event
   \   000052   7A10         MOV       R2,#0x10
   \   000054   7B00         MOV       R3,#0x0
   \   000056   90....       MOV       DPTR,#ZDAppTaskID
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F9           MOV       R1,A
   \   00005B   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00005E   80B3         SJMP      ??ZDO_UpdateNwkStatus_2
   \                     ??ZDO_UpdateNwkStatus_4:
   \   000060   8A82         MOV       DPL,R2
   \   000062   8B83         MOV       DPH,R3
   \   000064   74D1         MOV       A,#-0x2f
   \   000066   F0           MOVX      @DPTR,A
   \   000067   A3           INC       DPTR
   \   000068   E5..         MOV       A,?V1
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B                ; Setup parameters for call to function osal_msg_send
   \   00006B   A9..         MOV       R1,?V0
   \   00006D   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000070   80A1         SJMP      ??ZDO_UpdateNwkStatus_2
    474          #if defined MT_ZDO_CB_FUNC
    475            zdoSendStateChangeMsg(state, MT_TaskID);
    476          #endif
    477          
    478            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_3:
   \   000072                ; Setup parameters for call to function NLME_GetShortAddr
   \   000072   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000075   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000078   12....       LCALL     ??Subroutine208_0 & 0xFFFF
    479            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_329:
   \   00007B                ; Setup parameters for call to function NLME_GetExtAddr
   \   00007B   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    480          }
   \   00007E   80..         SJMP      ??Subroutine204_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine204_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine209_0
   \   000001                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   EB           MOV       A,R3
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F583         MOV       DPH,A
   \   000004   8882         MOV       DPL,R0
   \   000006                REQUIRE ??Subroutine218_0
   \   000006                ; // Fall through to label ??Subroutine218_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine219_0
   \   000001                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   12....       LCALL     ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine242_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine261_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    481          
    482          #if defined ( REFLECTOR )
    483          /*********************************************************************
    484           * @fn          ZDO_RemoveEndDeviceBind
    485           *
    486           * @brief       Remove the end device bind
    487           *
    488           * @param  none
    489           *
    490           * @return      none
    491           */
    492          static void ZDO_RemoveEndDeviceBind( void )
    493          {
    494            if ( ZDO_EDBind != NULL )
    495            {
    496              // Free the RAM
    497              if ( ZDO_EDBind->inClusters != NULL )
    498              {
    499                osal_mem_free( ZDO_EDBind->inClusters );
    500              }
    501              if ( ZDO_EDBind->outClusters != NULL )
    502              {
    503                osal_mem_free( ZDO_EDBind->outClusters );
    504              }
    505              osal_mem_free( ZDO_EDBind );
    506              ZDO_EDBind = NULL;
    507            }
    508          }
    509          #endif // REFLECTOR
    510          
    511          #if defined ( REFLECTOR )
    512          /*********************************************************************
    513           * @fn          ZDO_RemoveEndDeviceBind
    514           *
    515           * @brief       Remove the end device bind
    516           *
    517           * @param  none
    518           *
    519           * @return      none
    520           */
    521          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    522          {
    523            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    524          
    525          #if defined( LCD_SUPPORTED )
    526            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    527            if ( Status == ZDP_SUCCESS )
    528            {
    529              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    530            }
    531            else
    532            {
    533              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    534            }
    535          #endif
    536          
    537          }
    538          #endif // REFLECTOR
    539          
    540          /*********************************************************************
    541           * @fn          ZDO_CompareClusterLists
    542           *
    543           * @brief       Compare one list to another list
    544           *
    545           * @param       numList1 - number of items in list 1
    546           * @param       list1 - first list of cluster IDs
    547           * @param       numList2 - number of items in list 2
    548           * @param       list2 - second list of cluster IDs
    549           * @param       pMatches - buffer to put matches
    550           *
    551           * @return      number of matches
    552           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    553          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ZDO_CompareClusterLists:
    554                                    byte numList2, uint16 *list2, uint16 *pMatches )
    555          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   8C..         MOV       ?V4,R4
    556            byte x, y;
    557            uint16 z;
    558            byte numMatches = 0;
   \   000009   75..00       MOV       ?V1,#0x0
    559          
    560            // Check the first in against the seconds out
    561            for ( x = 0; x < numList1; x++ )
   \   00000C   75..00       MOV       ?V0,#0x0
   \   00000F   7410         MOV       A,#0x10
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000017   7412         MOV       A,#0x12
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   00001F   8047         SJMP      ??ZDO_CompareClusterLists_0
    562            {
    563              for ( y = 0; y < numList2; y++ )
    564              {
    565                z = list2[y];
   \                     ??ZDO_CompareClusterLists_1:
   \   000021   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000024   F5..         MOV       ?V6,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V7,A
    566                if ( list1[x] == z )
   \   00002A   AE..         MOV       R6,?V0
   \   00002C   EE           MOV       A,R6
   \   00002D   2E           ADD       A,R6
   \   00002E   FE           MOV       R6,A
   \   00002F   E4           CLR       A
   \   000030   33           RLC       A
   \   000031   FF           MOV       R7,A
   \   000032   EA           MOV       A,R2
   \   000033   2E           ADD       A,R6
   \   000034   F582         MOV       DPL,A
   \   000036   EB           MOV       A,R3
   \   000037   12....       LCALL     ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   00003A   65..         XRL       A,?V6
   \   00003C   7004         JNZ       ??ZDO_CompareClusterLists_2
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   65..         XRL       A,?V7
   \                     ??ZDO_CompareClusterLists_2:
   \   000042   7019         JNZ       ??ZDO_CompareClusterLists_3
    567                {
    568                  pMatches[numMatches++] = z;
   \   000044   AE..         MOV       R6,?V1
   \   000046   EE           MOV       A,R6
   \   000047   2E           ADD       A,R6
   \   000048   FE           MOV       R6,A
   \   000049   E4           CLR       A
   \   00004A   33           RLC       A
   \   00004B   FF           MOV       R7,A
   \   00004C   EC           MOV       A,R4
   \   00004D   2E           ADD       A,R6
   \   00004E   F582         MOV       DPL,A
   \   000050   ED           MOV       A,R5
   \   000051   3F           ADDC      A,R7
   \   000052   F583         MOV       DPH,A
   \   000054   E5..         MOV       A,?V6
   \   000056   F0           MOVX      @DPTR,A
   \   000057   A3           INC       DPTR
   \   000058   E5..         MOV       A,?V7
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   05..         INC       ?V1
    569                }
    570              }
   \                     ??ZDO_CompareClusterLists_3:
   \   00005D   05..         INC       ?V2
   \                     ??ZDO_CompareClusterLists_4:
   \   00005F   E5..         MOV       A,?V2
   \   000061   C3           CLR       C
   \   000062   95..         SUBB      A,?V4
   \   000064   40BB         JC        ??ZDO_CompareClusterLists_1
   \   000066   05..         INC       ?V0
   \                     ??ZDO_CompareClusterLists_0:
   \   000068   E5..         MOV       A,?V0
   \   00006A   C3           CLR       C
   \   00006B   95..         SUBB      A,?V3
   \   00006D   5005         JNC       ??ZDO_CompareClusterLists_5
   \   00006F   75..00       MOV       ?V2,#0x0
   \   000072   80EB         SJMP      ??ZDO_CompareClusterLists_4
    571            }
    572          
    573            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_5:
   \   000074   A9..         MOV       R1,?V1
   \   000076   02....       LJMP      ?Subroutine2 & 0xFFFF
    574          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   AE..         MOV       R6,?V2
   \   000002   EE           MOV       A,R6
   \   000003   2E           ADD       A,R6
   \   000004   FE           MOV       R6,A
   \   000005   E4           CLR       A
   \   000006   33           RLC       A
   \   000007   FF           MOV       R7,A
   \   000008   E8           MOV       A,R0
   \   000009   2E           ADD       A,R6
   \   00000A   F582         MOV       DPL,A
   \   00000C   E9           MOV       A,R1
   \   00000D   12....       LCALL     ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_626:
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   12....       LCALL     ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_632:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine264_0:
   \   000000   3F           ADDC      A,R7
   \   000001   F583         MOV       DPH,A
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    575          
    576          /*********************************************************************
    577           * Utility functions
    578           */
    579          
    580          /*********************************************************************
    581           * @fn          ZDO_CompareByteLists
    582           *
    583           * @brief       Compares two lists for matches.
    584           *
    585           * @param       ACnt  - number of entries in list A
    586           * @param       AList  - List A
    587           * @param       BCnt  - number of entries in list B
    588           * @param       BList  - List B
    589           *
    590           * @return      true if a match is found
    591           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    592          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    593          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
    594            byte x, y;
    595          
    596            for ( x = 0; x < ACnt; x++ )
   \   000007   7D00         MOV       R5,#0x0
   \   000009   740C         MOV       A,#0xc
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   000011   8001         SJMP      ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000013   0D           INC       R5
   \                     ??ZDO_AnyClusterMatches_0:
   \   000014   ED           MOV       A,R5
   \   000015   C3           CLR       C
   \   000016   95..         SUBB      A,?V3
   \   000018   502E         JNC       ??ZDO_AnyClusterMatches_2
    597            {
    598              for ( y = 0; y < BCnt; y++ )
   \   00001A   75..00       MOV       ?V2,#0x0
   \   00001D   8002         SJMP      ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   00001F   05..         INC       ?V2
   \                     ??ZDO_AnyClusterMatches_3:
   \   000021   E5..         MOV       A,?V2
   \   000023   C3           CLR       C
   \   000024   9C           SUBB      A,R4
   \   000025   50EC         JNC       ??ZDO_AnyClusterMatches_1
    599              {
    600                if ( AList[x] == BList[y] )
   \   000027   ED           MOV       A,R5
   \   000028   25E0         ADD       A,0xE0 /* A   */
   \   00002A   FE           MOV       R6,A
   \   00002B   E4           CLR       A
   \   00002C   33           RLC       A
   \   00002D   FF           MOV       R7,A
   \   00002E   EA           MOV       A,R2
   \   00002F   2E           ADD       A,R6
   \   000030   F582         MOV       DPL,A
   \   000032   EB           MOV       A,R3
   \   000033   3F           ADDC      A,R7
   \   000034   12....       LCALL     ??Subroutine253_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   000037   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   00003A   65..         XRL       A,?V0
   \   00003C   7004         JNZ       ??ZDO_AnyClusterMatches_5
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   65..         XRL       A,?V1
   \                     ??ZDO_AnyClusterMatches_5:
   \   000042   70DB         JNZ       ??ZDO_AnyClusterMatches_4
    601                {
    602                  return true;
   \   000044   7901         MOV       R1,#0x1
   \   000046   8002         SJMP      ??ZDO_AnyClusterMatches_6
    603                }
    604              }
    605            }
    606          
    607            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   000048   7900         MOV       R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   00004A   02....       LJMP      ??Subroutine204_0 & 0xFFFF
    608          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine253_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine254_0
   \   000002                ; // Fall through to label ??Subroutine254_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine254_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET
    609          
    610          /*********************************************************************
    611           * Callback functions from ZDProfile
    612           */
    613          
    614          /*********************************************************************
    615           * @fn          ZDO_ProcessNodeDescReq
    616           *
    617           * @brief       This function processes and responds to the
    618           *              Node_Desc_req message.
    619           *
    620           * @param       inMsg - incoming message
    621           *
    622           * @return      none
    623           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    624          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    625          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine58 & 0xFFFF
    626            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    627            NodeDescriptorFormat_t *desc = NULL;
    628          
    629            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_88:
   \   000008   7003         JNZ       ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   6D           XRL       A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ       ??ZDO_ProcessNodeDescReq_1
    630            {
    631              desc = &ZDO_Config_Node_Descriptor;
    632            }
    633          
    634            if ( desc != NULL )
    635            {
    636              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV       ?V0,#ZDO_Config_Node_Descriptor & 0xff
   \   000012   75....       MOV       ?V1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV       A,R6
   \   00001B   FA           MOV       R2,A
   \   00001C   12....       LCALL     `??ZDP_NodeDescMsg::?relay`; Banked call to: ZDP_NodeDescMsg
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   \   000024   801A         SJMP      ??ZDO_ProcessNodeDescReq_2
    637            }
    638            else
    639            {
    640              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    641                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV       ?V0,#0x2
   \   000029   75..80       MOV       ?V1,#-0x80
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   8A..         MOV       ?V0,R2
   \   000033   89..         MOV       ?V1,R1
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL     ?Subroutine60 & 0xFFFF
    642            }
   \                     ??CrossCallReturnLabel_90:
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
    643          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000040   80..         SJMP      ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   EE           MOV       A,R6
   \   000001   240E         ADD       A,#0xe
   \   000003   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_628:
   \   000006   FD           MOV       R5,A
   \   000007   7C80         MOV       R4,#-0x80
   \   000009   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   00000C   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   00000F   7404         MOV       A,#0x4
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000007   FC           MOV       R4,A
   \   000008   E4           CLR       A
   \   000009   39           ADDC      A,R1
   \   00000A   FD           MOV       R5,A
   \   00000B   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6C           XRL       A,R4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine201:
   \   000000   240F         ADD       A,#0xf
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine198:
   \   000000   2413         ADD       A,#0x13
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine182:
   \   000000   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_608:
   \   000003   3F           ADDC      A,R7
   \   000004   FB           MOV       R3,A
   \   000005   EE           MOV       A,R6
   \   000006   12....       LCALL     ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000009   3F           ADDC      A,R7
   \   00000A   F583         MOV       DPH,A
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F9           MOV       R1,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   EA           MOV       A,R2
   \   000001   12....       LCALL     ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   000004   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   000007   8882         MOV       DPL,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FA           MOV       R2,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   E4           CLR       A
   \   000011   C8           XCH       A,R0
   \   000012   F9           MOV       R1,A
   \   000013   EA           MOV       A,R2
   \   000014   28           ADD       A,R0
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine200:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine260_0
   \   000001                ; // Fall through to label ??Subroutine260_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine260_0:
   \   000000   2402         ADD       A,#0x2
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine183:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003                REQUIRE ??Subroutine264_0
   \   000003                ; // Fall through to label ??Subroutine264_0
    644          
    645          /*********************************************************************
    646           * @fn          ZDO_ProcessPowerDescReq
    647           *
    648           * @brief       This function processes and responds to the
    649           *              Node_Power_req message.
    650           *
    651           * @param       inMsg  - incoming request
    652           *
    653           * @return      none
    654           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    655          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    656          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine58 & 0xFFFF
    657            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    658            NodePowerDescriptorFormat_t *desc = NULL;
    659          
    660            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_89:
   \   000008   7003         JNZ       ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   6D           XRL       A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ       ??ZDO_ProcessPowerDescReq_1
    661            {
    662              desc = &ZDO_Config_Power_Descriptor;
    663            }
    664          
    665            if ( desc != NULL )
    666            {
    667              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV       ?V0,#ZDO_Config_Power_Descriptor & 0xff
   \   000012   75....       MOV       ?V1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV       A,R6
   \   00001B   FA           MOV       R2,A
   \   00001C   12....       LCALL     `??ZDP_PowerDescMsg::?relay`; Banked call to: ZDP_PowerDescMsg
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   \   000024   801A         SJMP      ??ZDO_ProcessPowerDescReq_2
    668            }
    669            else
    670            {
    671              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    672                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV       ?V0,#0x3
   \   000029   75..80       MOV       ?V1,#-0x80
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   8A..         MOV       ?V0,R2
   \   000033   89..         MOV       ?V1,R1
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL     ?Subroutine60 & 0xFFFF
    673            }
   \                     ??CrossCallReturnLabel_91:
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
    674          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000040   80..         SJMP      ??Subroutine206_0
    675          
    676          /*********************************************************************
    677           * @fn          ZDO_ProcessSimpleDescReq
    678           *
    679           * @brief       This function processes and responds to the
    680           *              Simple_Desc_req message.
    681           *
    682           * @param       inMsg - incoming message (request)
    683           *
    684           * @return      none
    685           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7402         MOV       A,#0x2
   \   000002                REQUIRE ??Subroutine205_0
   \   000002                ; // Fall through to label ??Subroutine205_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine205_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine206_0
   \   000003                ; // Fall through to label ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    686          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    687          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    688            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   E4           CLR       A
   \   000015   12....       LCALL     ?Subroutine30 & 0xFFFF
    689            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??CrossCallReturnLabel_324:
   \   000018   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00001B   FB           MOV       R3,A
   \   00001C   EC           MOV       A,R4
   \   00001D   FA           MOV       R2,A
    690            byte endPoint = inMsg->asdu[2];
   \   00001E   8882         MOV       DPL,R0
   \   000020   8983         MOV       DPH,R1
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F9           MOV       R1,A
    691            byte free = false;
   \   000026   75..00       MOV       ?V1,#0x0
    692            byte stat = ZDP_SUCCESS;
   \   000029   75..00       MOV       ?V0,#0x0
    693          
    694            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   00002C   6005         JZ        ??ZDO_ProcessSimpleDescReq_0
   \   00002E   C3           CLR       C
   \   00002F   94F1         SUBB      A,#-0xf
   \   000031   4005         JC        ??ZDO_ProcessSimpleDescReq_1
    695            {
    696              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000033   75..82       MOV       ?V0,#-0x7e
   \   000036   802A         SJMP      ??ZDO_ProcessSimpleDescReq_2
    697            }
    698            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   000038   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   6A           XRL       A,R2
   \   00003D   7003         JNZ       ??ZDO_ProcessSimpleDescReq_3
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   6B           XRL       A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000042   701B         JNZ       ??ZDO_ProcessSimpleDescReq_4
    699            {
    700              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000044                ; Setup parameters for call to function afFindSimpleDesc
   \   000044   AA..         MOV       R2,?XSP + 0
   \   000046   AB..         MOV       R3,?XSP + 1
   \   000048   12....       LCALL     `??afFindSimpleDesc::?relay`; Banked call to: afFindSimpleDesc
   \   00004B   E9           MOV       A,R1
   \   00004C   FA           MOV       R2,A
    701              if ( sDesc == NULL )
   \   00004D   85..82       MOV       DPL,?XSP + 0
   \   000050   85..83       MOV       DPH,?XSP + 1
   \   000053   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   000056   7003         JNZ       ??ZDO_ProcessSimpleDescReq_5
    702              {
    703                stat = ZDP_NOT_ACTIVE;
   \   000058   75..83       MOV       ?V0,#-0x7d
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   00005B   8A..         MOV       ?V1,R2
   \   00005D   8003         SJMP      ??ZDO_ProcessSimpleDescReq_2
    704              }
    705            }
    706            else
    707            {
    708              if ( ZSTACK_ROUTER_BUILD )
    709              {
    710                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   00005F   75..81       MOV       ?V0,#-0x7f
    711              }
    712              else if ( ZSTACK_END_DEVICE_BUILD )
    713              {
    714                stat = ZDP_INVALID_REQTYPE;
    715              }
    716            }
    717          
    718            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   000062                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   000062   85..82       MOV       DPL,?XSP + 0
   \   000065   85..83       MOV       DPH,?XSP + 1
   \   000068   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   00006B   A9..         MOV       R1,?V0
   \   00006D   EE           MOV       A,R6
   \   00006E   FA           MOV       R2,A
   \   00006F   EF           MOV       A,R7
   \   000070   FB           MOV       R3,A
   \   000071   12....       LCALL     `??ZDP_SimpleDescMsg::?relay`; Banked call to: ZDP_SimpleDescMsg
    719          
    720            if ( free && sDesc )
   \   000074   E5..         MOV       A,?V1
   \   000076   6014         JZ        ??CrossCallReturnLabel_498
   \   000078   85..82       MOV       DPL,?XSP + 0
   \   00007B   85..83       MOV       DPH,?XSP + 1
   \   00007E   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   000081   6009         JZ        ??CrossCallReturnLabel_498
    721            {
    722              osal_mem_free( sDesc );
   \   000083                ; Setup parameters for call to function osal_mem_free
   \   000083   85..82       MOV       DPL,?XSP + 0
   \   000086   85..83       MOV       DPH,?XSP + 1
   \   000089   12....       LCALL     ??Subroutine244_0 & 0xFFFF
    723            }
    724          }
   \                     ??CrossCallReturnLabel_498:
   \   00008C   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine207_0
   \   000001                ; // Fall through to label ??Subroutine207_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   A3           INC       DPTR
   \   000001   F0           MOVX      @DPTR,A
   \   000002   12....       LCALL     ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_558:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   3F           ADDC      A,R7
   \   000001   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000004   FC           MOV       R4,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine238_0:
   \   000000   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine244_0:
   \   000000   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_528:
   \   000003   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine199:
   \   000000   EA           MOV       A,R2
   \   000001   2413         ADD       A,#0x13
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   F583         MOV       DPH,A
   \   000002   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   000005   F9           MOV       R1,A
   \   000006   8882         MOV       DPL,R0
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET
    725          
    726          /*********************************************************************
    727           * @fn          ZDO_ProcessActiveEPReq
    728           *
    729           * @brief       This function processes and responds to the
    730           *              Active_EP_req message.
    731           *
    732           * @param       inMsg  - incoming message (request)
    733           *
    734           * @return      none
    735           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    736          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    737          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    738            byte cnt = 0;
   \   000009   75..00       MOV       ?V0,#0x0
    739            uint16 aoi;
    740            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV       ?V1,#0x0
    741          
    742            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000012   F5..         MOV       ?V2,A
   \   000014   E4           CLR       A
   \   000015   39           ADDC      A,R1
   \   000016   F5..         MOV       ?V3,A
    743          
    744            if ( aoi == NLME_GetShortAddr() )
   \   000018                ; Setup parameters for call to function NLME_GetShortAddr
   \   000018   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001B   EA           MOV       A,R2
   \   00001C   65..         XRL       A,?V2
   \   00001E   7003         JNZ       ??ZDO_ProcessActiveEPReq_0
   \   000020   EB           MOV       A,R3
   \   000021   65..         XRL       A,?V3
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000023   7012         JNZ       ??ZDO_ProcessActiveEPReq_1
    745            {
    746              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   000025                ; Setup parameters for call to function afNumEndPoints
   \   000025   12....       LCALL     `??afNumEndPoints::?relay`; Banked call to: afNumEndPoints
   \   000028   E9           MOV       A,R1
   \   000029   14           DEC       A
   \   00002A   F5..         MOV       ?V0,A
    747              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   00002C                ; Setup parameters for call to function afEndPoints
   \   00002C   7901         MOV       R1,#0x1
   \   00002E   7A..         MOV       R2,#ZDOBuildBuf & 0xff
   \   000030   7B..         MOV       R3,#(ZDOBuildBuf >> 8) & 0xff
   \   000032   12....       LCALL     `??afEndPoints::?relay`; Banked call to: afEndPoints
   \   000035   8003         SJMP      ??ZDO_ProcessActiveEPReq_2
    748            }
    749            else
    750            {
    751              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   000037   75..80       MOV       ?V1,#-0x80
    752            }
    753          
    754            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    755                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   00003A                ; Setup parameters for call to function ZDP_EPRsp
   \   00003A   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   00003D   F5..         MOV       ?V4,A
   \   00003F   78..         MOV       R0,#?V4
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000044   75....       MOV       ?V4,#ZDOBuildBuf & 0xff
   \   000047   75....       MOV       ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   00004A   78..         MOV       R0,#?V4
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   78..         MOV       R0,#?V0
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000054   78..         MOV       R0,#?V2
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000059   E5..         MOV       A,?V1
   \   00005B   F5..         MOV       ?V0,A
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000062   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   000065   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   000068   F9           MOV       R1,A
   \   000069   7A05         MOV       R2,#0x5
   \   00006B   7B80         MOV       R3,#-0x80
   \   00006D   12....       LCALL     `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000070   7407         MOV       A,#0x7
   \   000072   12....       LCALL     ?DEALLOC_XSTACK8
    756          }
   \   000075   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine185:
   \   000000   EE           MOV       A,R6
   \   000001   2402         ADD       A,#0x2
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FD           MOV       R5,A
   \   000007   EE           MOV       A,R6
   \   000008   240F         ADD       A,#0xf
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   EE           MOV       A,R6
   \   000001   240E         ADD       A,#0xe
   \   000003                REQUIRE ??Subroutine230_0
   \   000003                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003                REQUIRE ??Subroutine231_0
   \   000003                ; // Fall through to label ??Subroutine231_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    757          
    758          /*********************************************************************
    759           * @fn          ZDO_ConvertOTAClusters
    760           *
    761           * @brief       This function will convert the over-the-air cluster list
    762           *              format to an internal format.
    763           *
    764           * @param       inMsg  - incoming message (request)
    765           *
    766           * @return      pointer to incremented inBuf
    767           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    768          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    769          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
    770            uint8 x;
    771          
    772            for ( x = 0; x < cnt; x++ )
   \   000007   7E00         MOV       R6,#0x0
   \   000009   8032         SJMP      ??ZDO_ConvertOTAClusters_0
    773            {
    774              // convert ota format to internal
    775              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000B   8A82         MOV       DPL,R2
   \   00000D   8B83         MOV       DPH,R3
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F5..         MOV       ?V0,A
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F8           MOV       R0,A
   \   000015   E4           CLR       A
   \   000016   C8           XCH       A,R0
   \   000017   F9           MOV       R1,A
   \   000018   E5..         MOV       A,?V0
   \   00001A   28           ADD       A,R0
   \   00001B   E4           CLR       A
   \   00001C   39           ADDC      A,R1
   \   00001D   F5..         MOV       ?V1,A
   \   00001F   EE           MOV       A,R6
   \   000020   25E0         ADD       A,0xE0 /* A   */
   \   000022   F8           MOV       R0,A
   \   000023   E4           CLR       A
   \   000024   33           RLC       A
   \   000025   F9           MOV       R1,A
   \   000026   EC           MOV       A,R4
   \   000027   28           ADD       A,R0
   \   000028   F582         MOV       DPL,A
   \   00002A   ED           MOV       A,R5
   \   00002B   39           ADDC      A,R1
   \   00002C   F583         MOV       DPH,A
   \   00002E   E5..         MOV       A,?V0
   \   000030   F0           MOVX      @DPTR,A
   \   000031   A3           INC       DPTR
   \   000032   E5..         MOV       A,?V1
   \   000034   F0           MOVX      @DPTR,A
    776              inBuf += sizeof( uint16 );
   \   000035   EA           MOV       A,R2
   \   000036   2402         ADD       A,#0x2
   \   000038   FA           MOV       R2,A
   \   000039   5001         JNC       ??ZDO_ConvertOTAClusters_2
   \   00003B   0B           INC       R3
    777            }
   \                     ??ZDO_ConvertOTAClusters_2:
   \   00003C   0E           INC       R6
   \                     ??ZDO_ConvertOTAClusters_0:
   \   00003D   EE           MOV       A,R6
   \   00003E   C3           CLR       C
   \   00003F   9F           SUBB      A,R7
   \   000040   40C9         JC        ??ZDO_ConvertOTAClusters_1
    778            return ( inBuf );
   \   000042   02....       LJMP      ??Subroutine206_0 & 0xFFFF
    779          }
    780          
    781          /*********************************************************************
    782           * @fn          ZDO_ProcessMatchDescReq
    783           *
    784           * @brief       This function processes and responds to the
    785           *              Match_Desc_req message.
    786           *
    787           * @param       inMsg  - incoming message (request)
    788           *
    789           * @return      none
    790           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    791          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    792          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V14,R2
   \   00000C   8B..         MOV       ?V15,R3
    793            uint8 epCnt = 0;
   \   00000E   75..00       MOV       ?V9,#0x0
    794            uint8 numInClusters;
    795            uint16 *inClusters = NULL;
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   E4           CLR       A
   \   000017   F0           MOVX      @DPTR,A
   \   000018   A3           INC       DPTR
   \   000019   12....       LCALL     ?Subroutine42 & 0xFFFF
    796            uint8 numOutClusters;
    797            uint16 *outClusters = NULL;
   \                     ??CrossCallReturnLabel_61:
   \   00001C   12....       LCALL     ?Subroutine30 & 0xFFFF
    798            epList_t *epDesc;
    799            SimpleDescriptionFormat_t *sDesc = NULL;
    800            uint8 allocated;
    801            uint8 *msg;
    802            uint16 aoi;
    803            uint16 profileID;
    804          
    805            // Parse the incoming message
    806            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_325:
   \   00001F   35..         ADDC      A,?V15
   \   000021   F583         MOV       DPH,A
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V2,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V3,A
    807            aoi = BUILD_UINT16( msg[0], msg[1] );
   \   00002A   85..82       MOV       DPL,?V2
   \   00002D   F583         MOV       DPH,A
   \   00002F   12....       LCALL     ??Subroutine270_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_650:
   \   000032   FE           MOV       R6,A
   \   000033   E4           CLR       A
   \   000034   39           ADDC      A,R1
   \   000035   FF           MOV       R7,A
    808            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   000036   85..82       MOV       DPL,?V2
   \   000039   85..83       MOV       DPH,?V3
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   FA           MOV       R2,A
   \   000040   85..82       MOV       DPL,?V2
   \   000043   85..83       MOV       DPH,?V3
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F9           MOV       R1,A
   \   00004B   EA           MOV       A,R2
   \   00004C   F5..         MOV       ?V0,A
   \   00004E   E4           CLR       A
   \   00004F   39           ADDC      A,R1
   \   000050   F5..         MOV       ?V1,A
    809            msg += 4;
    810          
    811            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   000052                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000052   EE           MOV       A,R6
   \   000053   FA           MOV       R2,A
   \   000054   EF           MOV       A,R7
   \   000055   FB           MOV       R3,A
   \   000056   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000059   E9           MOV       A,R1
   \   00005A   6401         XRL       A,#0x1
   \   00005C   6016         JZ        ??ZDO_ProcessMatchDescReq_0
    812            {
    813              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    814                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
    815              return;
    816            }
    817            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \   00005E                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00005E   EE           MOV       A,R6
   \   00005F   FA           MOV       R2,A
   \   000060   EF           MOV       A,R7
   \   000061   FB           MOV       R3,A
   \   000062   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000065   E9           MOV       A,R1
   \   000066   7038         JNZ       ??ZDO_ProcessMatchDescReq_1
   \   000068   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   6E           XRL       A,R6
   \   00006D   7003         JNZ       ??ZDO_ProcessMatchDescReq_2
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   6F           XRL       A,R7
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   000072   602C         JZ        ??ZDO_ProcessMatchDescReq_1
    818            {
    819              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    820                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   000074                ; Setup parameters for call to function ZDP_EPRsp
   \   000074   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007A   E4           CLR       A
   \   00007B   F5..         MOV       ?V0,A
   \   00007D   F5..         MOV       ?V1,A
   \   00007F   78..         MOV       R0,#?V0
   \   000081   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000084   78..         MOV       R0,#?V0
   \   000086   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000089   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00008C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00008F   75..80       MOV       ?V0,#-0x80
   \   000092   78..         MOV       R0,#?V0
   \   000094   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000097   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00009A   12....       LCALL     ?DEALLOC_XSTACK8
    821              return;
   \   00009D   02....       LJMP      ??CrossCallReturnLabel_500 & 0xFFFF
    822            }
    823          
    824            if ((numInClusters = *msg++) &&
    825                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   0000A0   85..82       MOV       DPL,?V2
   \   0000A3   85..83       MOV       DPH,?V3
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   F5..         MOV       ?V8,A
   \   0000AD   E5..         MOV       A,?V2
   \   0000AF   2405         ADD       A,#0x5
   \   0000B1   F5..         MOV       ?V2,A
   \   0000B3   5002         JNC       ??ZDO_ProcessMatchDescReq_3
   \   0000B5   05..         INC       ?V3
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   0000B7   E5..         MOV       A,?V8
   \   0000B9   6028         JZ        ??ZDO_ProcessMatchDescReq_4
   \   0000BB                ; Setup parameters for call to function osal_mem_alloc
   \   0000BB   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   0000BE   7402         MOV       A,#0x2
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   12....       LCALL     ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   0000C6   7402         MOV       A,#0x2
   \   0000C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CB   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   0000CE   6013         JZ        ??ZDO_ProcessMatchDescReq_4
    826            {
    827              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   0000D0                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000D0   7402         MOV       A,#0x2
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   12....       LCALL     ?Subroutine103 & 0xFFFF
    828            }
   \                     ??CrossCallReturnLabel_164:
   \   0000D8   A9..         MOV       R1,?V8
   \   0000DA   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000DD   8A..         MOV       ?V2,R2
   \   0000DF   8B..         MOV       ?V3,R3
   \   0000E1   8003         SJMP      ??ZDO_ProcessMatchDescReq_5
    829            else
    830            {
    831              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   0000E3   75..00       MOV       ?V8,#0x0
    832            }
    833          
    834            if ((numOutClusters = *msg++) &&
    835                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   0000E6   85..82       MOV       DPL,?V2
   \   0000E9   85..83       MOV       DPH,?V3
   \   0000EC   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   0000EF   6024         JZ        ??ZDO_ProcessMatchDescReq_6
   \   0000F1                ; Setup parameters for call to function osal_mem_alloc
   \   0000F1   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   0000F4   85..82       MOV       DPL,?XSP + 0
   \   0000F7   85..83       MOV       DPH,?XSP + 1
   \   0000FA   EA           MOV       A,R2
   \   0000FB   F0           MOVX      @DPTR,A
   \   0000FC   A3           INC       DPTR
   \   0000FD   EB           MOV       A,R3
   \   0000FE   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000101   E8           MOV       A,R0
   \   000102   49           ORL       A,R1
   \   000103   6010         JZ        ??ZDO_ProcessMatchDescReq_6
    836            {
    837              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   000105                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000105   85..82       MOV       DPL,?XSP + 0
   \   000108   85..83       MOV       DPH,?XSP + 1
   \   00010B   12....       LCALL     ?Subroutine103 & 0xFFFF
    838            }
   \                     ??CrossCallReturnLabel_165:
   \   00010E   A9..         MOV       R1,?V7
   \   000110   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000113   8003         SJMP      ??ZDO_ProcessMatchDescReq_7
    839            else
    840            {
    841              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   000115   75..00       MOV       ?V7,#0x0
    842            }
    843          
    844            // First count the number of endpoints that match.
    845            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   000118   90....       MOV       DPTR,#epList
   \   00011B   8052         SJMP      ??ZDO_ProcessMatchDescReq_8
    846            while ( epDesc )
    847            {
    848              // Don't search endpoint 0 and check if response is allowed
    849              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    850              {
    851                if ( epDesc->pfnDescCB )
    852                {
    853                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    854                  allocated = TRUE;
    855                }
    856                else
    857                {
    858                  sDesc = epDesc->epDesc->simpleDesc;
    859                  allocated = FALSE;
    860                }
    861          
    862                if ( sDesc && sDesc->AppProfId == profileID )
    863                {
    864                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    865          
    866                  // Are there matching input clusters?
    867                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    868                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    869                      // Are there matching output clusters?
    870                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    871                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
    872                  {
    873                    // Notify the endpoint of the match.
    874                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    875                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    876          
    877                    if (pRspSent)
    878                    {
    879                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    880                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    881                      pRspSent->numInClusters = numInClusters;
    882                      pRspSent->numOutClusters = numOutClusters;
    883          
    884                      if (numInClusters)
    885                      {
    886                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    887                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    888                      }
    889                      else
    890                      {
    891                        pRspSent->pInClusters = NULL;
    892                      }
    893          
    894                      if (numOutClusters)
    895                      {
    896                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    897                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    898                      }
    899                      else
    900                      {
    901                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   00011D   85..82       MOV       DPL,?V2
   \   000120   85..83       MOV       DPH,?V3
   \   000123   A3           INC       DPTR
   \   000124   A3           INC       DPTR
   \   000125   A3           INC       DPTR
   \   000126   A3           INC       DPTR
   \   000127   A3           INC       DPTR
   \   000128   A3           INC       DPTR
   \   000129   A3           INC       DPTR
   \   00012A   A3           INC       DPTR
   \   00012B   E4           CLR       A
   \   00012C   F0           MOVX      @DPTR,A
   \   00012D   A3           INC       DPTR
   \   00012E   F0           MOVX      @DPTR,A
    902                      }
    903          
    904                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   00012F                ; Setup parameters for call to function osal_msg_send
   \   00012F   AA..         MOV       R2,?V2
   \   000131   AB..         MOV       R3,?V3
   \   000133   85..82       MOV       DPL,?V12
   \   000136   85..83       MOV       DPH,?V13
   \   000139   A3           INC       DPTR
   \   00013A   A3           INC       DPTR
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   F8           MOV       R0,A
   \   00013D   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000140   F9           MOV       R1,A
   \   000141   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    905                    }
    906          
    907                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   000144   85..82       MOV       DPL,?V10
   \   000147   85..83       MOV       DPH,?V11
   \   00014A   E0           MOVX      A,@DPTR
   \   00014B   C0E0         PUSH      A
   \   00014D   A8..         MOV       R0,?V9
   \   00014F   74..         MOV       A,#ZDOBuildBuf & 0xff
   \   000151   28           ADD       A,R0
   \   000152   F582         MOV       DPL,A
   \   000154   E4           CLR       A
   \   000155   34..         ADDC      A,#(ZDOBuildBuf >> 8) & 0xff
   \   000157   F583         MOV       DPH,A
   \   000159   D0E0         POP       A
   \   00015B   F0           MOVX      @DPTR,A
   \   00015C   05..         INC       ?V9
    908                  }
    909                }
    910          
    911                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   00015E   A2..         MOV       C,?VB.0
   \   000160   5007         JNC       ??ZDO_ProcessMatchDescReq_13
    912                {
    913                  osal_mem_free( sDesc );
   \   000162                ; Setup parameters for call to function osal_mem_free
   \   000162   AA..         MOV       R2,?V10
   \   000164   AB..         MOV       R3,?V11
   \   000166   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    914                }
    915              }
    916              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   000169   85..82       MOV       DPL,?V12
   \   00016C   85..83       MOV       DPH,?V13
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   00016F   E0           MOVX      A,@DPTR
   \   000170   F5..         MOV       ?V12,A
   \   000172   A3           INC       DPTR
   \   000173   E0           MOVX      A,@DPTR
   \   000174   F5..         MOV       ?V13,A
   \   000176   E5..         MOV       A,?V12
   \   000178   45..         ORL       A,?V13
   \   00017A   7003         JNZ       $+5
   \   00017C   02....       LJMP      ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
   \   00017F   85..82       MOV       DPL,?V12
   \   000182   85..83       MOV       DPH,?V13
   \   000185   A3           INC       DPTR
   \   000186   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   000189   60DE         JZ        ??ZDO_ProcessMatchDescReq_13
   \   00018B   85..82       MOV       DPL,?V12
   \   00018E   85..83       MOV       DPH,?V13
   \   000191   A3           INC       DPTR
   \   000192   A3           INC       DPTR
   \   000193   A3           INC       DPTR
   \   000194   A3           INC       DPTR
   \   000195   A3           INC       DPTR
   \   000196   A3           INC       DPTR
   \   000197   A3           INC       DPTR
   \   000198   A3           INC       DPTR
   \   000199   E0           MOVX      A,@DPTR
   \   00019A   A2E0         MOV       C,0xE0 /* A   */.0
   \   00019C   50CB         JNC       ??ZDO_ProcessMatchDescReq_13
   \   00019E   85..82       MOV       DPL,?V12
   \   0001A1   85..83       MOV       DPH,?V13
   \   0001A4   A3           INC       DPTR
   \   0001A5   A3           INC       DPTR
   \   0001A6   A3           INC       DPTR
   \   0001A7   A3           INC       DPTR
   \   0001A8   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   0001AB   85..82       MOV       DPL,?V12
   \   0001AE   85..83       MOV       DPH,?V13
   \   0001B1   A3           INC       DPTR
   \   0001B2   A3           INC       DPTR
   \   0001B3   601E         JZ        ??ZDO_ProcessMatchDescReq_15
   \   0001B5                ; Setup parameters for indirect call
   \   0001B5   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   0001B8   FA           MOV       R2,A
   \   0001B9   7901         MOV       R1,#0x1
   \   0001BB   85..82       MOV       DPL,?V12
   \   0001BE   85..83       MOV       DPH,?V13
   \   0001C1   A3           INC       DPTR
   \   0001C2   A3           INC       DPTR
   \   0001C3   A3           INC       DPTR
   \   0001C4   A3           INC       DPTR
   \   0001C5   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   0001C8   12....       LCALL     ?CALL_IND
   \   0001CB   8A..         MOV       ?V10,R2
   \   0001CD   8B..         MOV       ?V11,R3
   \   0001CF   D2..         SETB      ?VB.0
   \   0001D1   800F         SJMP      ??ZDO_ProcessMatchDescReq_16
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   0001D3   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   0001D6   A3           INC       DPTR
   \   0001D7   A3           INC       DPTR
   \   0001D8   A3           INC       DPTR
   \   0001D9   E0           MOVX      A,@DPTR
   \   0001DA   F5..         MOV       ?V10,A
   \   0001DC   A3           INC       DPTR
   \   0001DD   E0           MOVX      A,@DPTR
   \   0001DE   F5..         MOV       ?V11,A
   \   0001E0   C2..         CLR       ?VB.0
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   0001E2   E5..         MOV       A,?V10
   \   0001E4   45..         ORL       A,?V11
   \   0001E6   7003         JNZ       $+5
   \   0001E8   02....       LJMP      ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   0001EB   85..82       MOV       DPL,?V10
   \   0001EE   85..83       MOV       DPH,?V11
   \   0001F1   A3           INC       DPTR
   \   0001F2   E0           MOVX      A,@DPTR
   \   0001F3   65..         XRL       A,?V0
   \   0001F5   7004         JNZ       ??ZDO_ProcessMatchDescReq_17
   \   0001F7   A3           INC       DPTR
   \   0001F8   E0           MOVX      A,@DPTR
   \   0001F9   65..         XRL       A,?V1
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   0001FB   6003         JZ        $+5
   \   0001FD   02....       LJMP      ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   000200                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000200   85..82       MOV       DPL,?V10
   \   000203   85..83       MOV       DPH,?V11
   \   000206   A3           INC       DPTR
   \   000207   A3           INC       DPTR
   \   000208   A3           INC       DPTR
   \   000209   A3           INC       DPTR
   \   00020A   A3           INC       DPTR
   \   00020B   A3           INC       DPTR
   \   00020C   A3           INC       DPTR
   \   00020D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000210   85..82       MOV       DPL,?V10
   \   000213   85..83       MOV       DPH,?V11
   \   000216   A3           INC       DPTR
   \   000217   A3           INC       DPTR
   \   000218   A3           INC       DPTR
   \   000219   A3           INC       DPTR
   \   00021A   A3           INC       DPTR
   \   00021B   A3           INC       DPTR
   \   00021C   E0           MOVX      A,@DPTR
   \   00021D   FC           MOV       R4,A
   \   00021E   7404         MOV       A,#0x4
   \   000220   12....       LCALL     ?XSTACK_DISP0_8
   \   000223   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   000226   A9..         MOV       R1,?V8
   \   000228   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   00022B   7402         MOV       A,#0x2
   \   00022D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000230   E9           MOV       A,R1
   \   000231   703C         JNZ       ??ZDO_ProcessMatchDescReq_18
   \   000233                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000233   85..82       MOV       DPL,?V10
   \   000236   85..83       MOV       DPH,?V11
   \   000239   A3           INC       DPTR
   \   00023A   A3           INC       DPTR
   \   00023B   A3           INC       DPTR
   \   00023C   A3           INC       DPTR
   \   00023D   A3           INC       DPTR
   \   00023E   A3           INC       DPTR
   \   00023F   A3           INC       DPTR
   \   000240   A3           INC       DPTR
   \   000241   A3           INC       DPTR
   \   000242   A3           INC       DPTR
   \   000243   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000246   85..82       MOV       DPL,?V10
   \   000249   85..83       MOV       DPH,?V11
   \   00024C   A3           INC       DPTR
   \   00024D   A3           INC       DPTR
   \   00024E   A3           INC       DPTR
   \   00024F   A3           INC       DPTR
   \   000250   A3           INC       DPTR
   \   000251   A3           INC       DPTR
   \   000252   A3           INC       DPTR
   \   000253   A3           INC       DPTR
   \   000254   A3           INC       DPTR
   \   000255   E0           MOVX      A,@DPTR
   \   000256   FC           MOV       R4,A
   \   000257   7402         MOV       A,#0x2
   \   000259   12....       LCALL     ?XSTACK_DISP0_8
   \   00025C   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   00025F   A9..         MOV       R1,?V7
   \   000261   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000264   7402         MOV       A,#0x2
   \   000266   12....       LCALL     ?DEALLOC_XSTACK8
   \   000269   E9           MOV       A,R1
   \   00026A   7003         JNZ       $+5
   \   00026C   02....       LJMP      ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   00026F                ; Setup parameters for call to function osal_msg_allocate
   \   00026F   E5..         MOV       A,?V7
   \   000271   25..         ADD       A,?V8
   \   000273   C3           CLR       C
   \   000274   33           RLC       A
   \   000275   240A         ADD       A,#0xa
   \   000277   FA           MOV       R2,A
   \   000278   7B00         MOV       R3,#0x0
   \   00027A   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00027D   8A..         MOV       ?V2,R2
   \   00027F   8B..         MOV       ?V3,R3
   \   000281   EA           MOV       A,R2
   \   000282   4B           ORL       A,R3
   \   000283   7003         JNZ       $+5
   \   000285   02....       LJMP      ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
   \   000288   8A82         MOV       DPL,R2
   \   00028A   8B83         MOV       DPH,R3
   \   00028C   74D2         MOV       A,#-0x2e
   \   00028E   F0           MOVX      @DPTR,A
   \   00028F   85..82       MOV       DPL,?V14
   \   000292   85..83       MOV       DPH,?V15
   \   000295   A3           INC       DPTR
   \   000296   A3           INC       DPTR
   \   000297   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   00029A   8A82         MOV       DPL,R2
   \   00029C   8B83         MOV       DPH,R3
   \   00029E   A3           INC       DPTR
   \   00029F   A3           INC       DPTR
   \   0002A0   E8           MOV       A,R0
   \   0002A1   F0           MOVX      @DPTR,A
   \   0002A2   A3           INC       DPTR
   \   0002A3   E9           MOV       A,R1
   \   0002A4   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0002A7   A3           INC       DPTR
   \   0002A8   E5..         MOV       A,?V8
   \   0002AA   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0002AD   E5..         MOV       A,?V7
   \   0002AF   F0           MOVX      @DPTR,A
   \   0002B0   E5..         MOV       A,?V8
   \   0002B2   602A         JZ        ??ZDO_ProcessMatchDescReq_19
   \   0002B4   12....       LCALL     ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   0002B7   35..         ADDC      A,?V3
   \   0002B9   FB           MOV       R3,A
   \   0002BA   85..82       MOV       DPL,?V2
   \   0002BD   85..83       MOV       DPH,?V3
   \   0002C0   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   0002C3                ; Setup parameters for call to function osal_memcpy
   \   0002C3   7402         MOV       A,#0x2
   \   0002C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C8   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0002CB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002CE   AC..         MOV       R4,?V8
   \   0002D0   EC           MOV       A,R4
   \   0002D1   2C           ADD       A,R4
   \   0002D2   FC           MOV       R4,A
   \   0002D3   E4           CLR       A
   \   0002D4   33           RLC       A
   \   0002D5   FD           MOV       R5,A
   \   0002D6   12....       LCALL     ??Subroutine269_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_646:
   \   0002D9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002DC   800D         SJMP      ??ZDO_ProcessMatchDescReq_20
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   0002DE   8A82         MOV       DPL,R2
   \   0002E0   8B83         MOV       DPH,R3
   \   0002E2   A3           INC       DPTR
   \   0002E3   A3           INC       DPTR
   \   0002E4   A3           INC       DPTR
   \   0002E5   A3           INC       DPTR
   \   0002E6   A3           INC       DPTR
   \   0002E7   E4           CLR       A
   \   0002E8   F0           MOVX      @DPTR,A
   \   0002E9   A3           INC       DPTR
   \   0002EA   F0           MOVX      @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   0002EB   E5..         MOV       A,?V7
   \   0002ED   7003         JNZ       $+5
   \   0002EF   02....       LJMP      ??ZDO_ProcessMatchDescReq_9 & 0xFFFF
   \   0002F2   A8..         MOV       R0,?V8
   \   0002F4   E8           MOV       A,R0
   \   0002F5   28           ADD       A,R0
   \   0002F6   F8           MOV       R0,A
   \   0002F7   E4           CLR       A
   \   0002F8   33           RLC       A
   \   0002F9   F9           MOV       R1,A
   \   0002FA   E5..         MOV       A,?V2
   \   0002FC   28           ADD       A,R0
   \   0002FD   F8           MOV       R0,A
   \   0002FE   E5..         MOV       A,?V3
   \   000300   39           ADDC      A,R1
   \   000301   F9           MOV       R1,A
   \   000302   E8           MOV       A,R0
   \   000303   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000306   39           ADDC      A,R1
   \   000307   FB           MOV       R3,A
   \   000308   85..82       MOV       DPL,?V2
   \   00030B   85..83       MOV       DPH,?V3
   \   00030E   A3           INC       DPTR
   \   00030F   A3           INC       DPTR
   \   000310   A3           INC       DPTR
   \   000311   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000314                ; Setup parameters for call to function osal_memcpy
   \   000314   85..82       MOV       DPL,?XSP + 0
   \   000317   85..83       MOV       DPH,?XSP + 1
   \   00031A   12....       LCALL     ?Subroutine90 & 0xFFFF
    917            }
   \                     ??CrossCallReturnLabel_140:
   \   00031D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000320   AC..         MOV       R4,?V7
   \   000322   EC           MOV       A,R4
   \   000323   2C           ADD       A,R4
   \   000324   FC           MOV       R4,A
   \   000325   E4           CLR       A
   \   000326   33           RLC       A
   \   000327   FD           MOV       R5,A
   \   000328   12....       LCALL     ??Subroutine269_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_647:
   \   00032B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00032E   02....       LJMP      ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
    918          
    919            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   000331   E5..         MOV       A,?V9
   \   000333   6037         JZ        ??ZDO_ProcessMatchDescReq_21
    920            {
    921              // Send the message if at least one match found.
    922              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    923                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   000335                ; Setup parameters for call to function ZDP_EPRsp
   \   000335   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   000338   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00033B   75....       MOV       ?V0,#ZDOBuildBuf & 0xff
   \   00033E   75....       MOV       ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000341   78..         MOV       R0,#?V0
   \   000343   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000346   E5..         MOV       A,?V9
   \   000348   F5..         MOV       ?V0,A
   \   00034A   78..         MOV       R0,#?V0
   \   00034C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00034F   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000352   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000355   75..00       MOV       ?V0,#0x0
   \   000358   78..         MOV       R0,#?V0
   \   00035A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00035D   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000360   12....       LCALL     ?DEALLOC_XSTACK8
   \   000363   E9           MOV       A,R1
   \   000364   704B         JNZ       ??ZDO_ProcessMatchDescReq_22
    924              {
    925          #if defined( LCD_SUPPORTED )
    926                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
   \   000366                ; Setup parameters for call to function HalLcdWriteScreen
   \   000366   7C..         MOV       R4,#`?<Constant "Rsp Sent">` & 0xff
   \   000368   7D..         MOV       R5,#(`?<Constant "Rsp Sent">` >> 8) & 0xff
   \   00036A   803E         SJMP      ??ZDO_ProcessMatchDescReq_23
    927          #endif
    928              }
    929            }
    930            else
    931            {
    932              // No match found
    933              if (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi))
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   00036C                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00036C   EE           MOV       A,R6
   \   00036D   FA           MOV       R2,A
   \   00036E   EF           MOV       A,R7
   \   00036F   FB           MOV       R3,A
   \   000370   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000373   E9           MOV       A,R1
   \   000374   7030         JNZ       ??ZDO_ProcessMatchDescReq_24
    934              {
    935                // send response message with match length = 0
    936                ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    937                                  ZDAppNwkAddr.addr.shortAddr, 0, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \   000376                ; Setup parameters for call to function ZDP_EPRsp
   \   000376   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000379   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00037C   75....       MOV       ?V0,#ZDOBuildBuf & 0xff
   \   00037F   75....       MOV       ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000382   78..         MOV       R0,#?V0
   \   000384   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000387   75..00       MOV       ?V0,#0x0
   \   00038A   78..         MOV       R0,#?V0
   \   00038C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00038F   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000392   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000395   78..         MOV       R0,#?V0
   \   000397   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00039A   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00039D   12....       LCALL     ?DEALLOC_XSTACK8
    938          #if defined( LCD_SUPPORTED )
    939                HalLcdWriteScreen( "Match Desc Req", "Rsp Non Matched" );
   \   0003A0                ; Setup parameters for call to function HalLcdWriteScreen
   \   0003A0   7C..         MOV       R4,#`?<Constant "Rsp Non Matched">` & 0xff
   \   0003A2   7D..         MOV       R5,#(`?<Constant "Rsp Non Matched">` >> 8) & 0xff
   \   0003A4   8004         SJMP      ??ZDO_ProcessMatchDescReq_23
    940          #endif
    941              }
    942              else
    943              {
    944                // no response mesage for broadcast message
    945          #if defined( LCD_SUPPORTED )
    946                HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   0003A6                ; Setup parameters for call to function HalLcdWriteScreen
   \   0003A6   7C..         MOV       R4,#`?<Constant "Non Matched">` & 0xff
   \   0003A8   7D..         MOV       R5,#(`?<Constant "Non Matched">` >> 8) & 0xff
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   0003AA   7A..         MOV       R2,#`?<Constant "Match Desc Req">` & 0xff
   \   0003AC   7B..         MOV       R3,#(`?<Constant "Match Desc Req">` >> 8) & 0xff
   \   0003AE   12....       LCALL     `??HalLcdWriteScreen::?relay`; Banked call to: HalLcdWriteScreen
    947          #endif
    948              }
    949            }
    950          
    951            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   0003B1   7402         MOV       A,#0x2
   \   0003B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B6   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   0003B9   6008         JZ        ??CrossCallReturnLabel_499
    952            {
    953              osal_mem_free( inClusters );
   \   0003BB                ; Setup parameters for call to function osal_mem_free
   \   0003BB   7402         MOV       A,#0x2
   \   0003BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C0   12....       LCALL     ??Subroutine244_0 & 0xFFFF
    954            }
    955          
    956            if ( outClusters != NULL )
   \                     ??CrossCallReturnLabel_499:
   \   0003C3   85..82       MOV       DPL,?XSP + 0
   \   0003C6   85..83       MOV       DPH,?XSP + 1
   \   0003C9   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   0003CC   6009         JZ        ??CrossCallReturnLabel_500
    957            {
    958              osal_mem_free( outClusters );
   \   0003CE                ; Setup parameters for call to function osal_mem_free
   \   0003CE   85..82       MOV       DPL,?XSP + 0
   \   0003D1   85..83       MOV       DPH,?XSP + 1
   \   0003D4   12....       LCALL     ??Subroutine244_0 & 0xFFFF
    959            }
    960          }
   \                     ??CrossCallReturnLabel_500:
   \   0003D7   7404         MOV       A,#0x4
   \   0003D9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003DC   7F10         MOV       R7,#0x10
   \   0003DE   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   12....       LCALL     ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000003   AA..         MOV       R2,?V2
   \   000005   AB..         MOV       R3,?V3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   75..00       MOV       ?V6,#0x0
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   E5..         MOV       A,?V14
   \   000002   2402         ADD       A,#0x2
   \   000004   FC           MOV       R4,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V15
   \   000008   FD           MOV       R5,A
   \   000009   E5..         MOV       A,?V14
   \   00000B   12....       LCALL     ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   00000E   35..         ADDC      A,?V15
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
   \   000014   7A06         MOV       R2,#0x6
   \   000016   7B80         MOV       R3,#-0x80
   \   000018   12....       LCALL     `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   00001B   7407         MOV       A,#0x7
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005                REQUIRE ??Subroutine208_0
   \   000005                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine188:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine212_0
   \   000001                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   240A         ADD       A,#0xa
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   E5..         MOV       A,?V14
   \   000002   240E         ADD       A,#0xe
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V15
   \   000009                REQUIRE ??Subroutine228_0
   \   000009                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine229_0
   \   000002                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_468:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine265_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V7,A
   \   000003   A3           INC       DPTR
   \   000004   8582..       MOV       ?V2,DPL
   \   000007   8583..       MOV       ?V3,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine184:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   FB           MOV       R3,A
   \   000006   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine269_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine270_0:
   \   000000   12....       LCALL     ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_658:
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   C8           XCH       A,R0
   \   000006   F9           MOV       R1,A
   \   000007   EA           MOV       A,R2
   \   000008   28           ADD       A,R0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET
    961          
    962          /*********************************************************************
    963           * @fn      ZDO_ProcessBindUnbindReq()
    964           *
    965           * @brief   Called to process a Bind or Unbind Request message.
    966           *
    967           * @param   inMsg  - incoming message (request)
    968           * @param   pReq - place to put parsed information
    969           *
    970           * @return  none
    971           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine204_0
   \   000003                ; // Fall through to label ??Subroutine204_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    972          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    973          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
    974            zAddrType_t SourceAddr;       // Binding Source addres
    975            byte bindStat;
    976          
    977            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV       A,#0xb
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   7403         MOV       A,#0x3
   \   000019   F0           MOVX      @DPTR,A
    978            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL     ?XSTACK_DISP101_8
   \   00001D   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    979          
    980            // If the local device is not the primary binding cache
    981            // check the src address of the bind request.
    982            // If it is not the local device's extended address
    983            // discard the request.
    984            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    985                  (pReq->dstAddress.addrMode != Addr64Bit &&
    986                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000020                ; Setup parameters for call to function NLME_GetExtAddr
   \   000020   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000023                ; Setup parameters for call to function sAddrExtCmp
   \   000023   7403         MOV       A,#0x3
   \   000025   12....       LCALL     ?XSTACK_DISP101_8
   \   000028   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00002B   E9           MOV       A,R1
   \   00002C   600A         JZ        ??ZDO_ProcessBindUnbindReq_0
   \   00002E   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000031   6010         JZ        ??ZDO_ProcessBindUnbindReq_1
   \   000033   E0           MOVX      A,@DPTR
   \   000034   6401         XRL       A,#0x1
   \   000036   600B         JZ        ??ZDO_ProcessBindUnbindReq_1
    987            {
    988              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000038   85..82       MOV       DPL,?XSP + 0
   \   00003B   85..83       MOV       DPH,?XSP + 1
   \   00003E   7484         MOV       A,#-0x7c
   \   000040   02....       LJMP      ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    989            }
    990            else
    991            {
    992              // Check source & destination endpoints
    993              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
    994                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
    995                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   000043   8E82         MOV       DPL,R6
   \   000045   8F83         MOV       DPH,R7
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   6017         JZ        ??ZDO_ProcessBindUnbindReq_3
   \   000052   C3           CLR       C
   \   000053   94F1         SUBB      A,#-0xf
   \   000055   5012         JNC       ??ZDO_ProcessBindUnbindReq_3
   \   000057   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   00005A   7017         JNZ       ??ZDO_ProcessBindUnbindReq_4
   \   00005C   EE           MOV       A,R6
   \   00005D   2414         ADD       A,#0x14
   \   00005F   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   000062   6005         JZ        ??ZDO_ProcessBindUnbindReq_3
   \   000064   C3           CLR       C
   \   000065   94F1         SUBB      A,#-0xf
   \   000067   400A         JC        ??ZDO_ProcessBindUnbindReq_4
    996              {
    997                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   000069   85..82       MOV       DPL,?XSP + 0
   \   00006C   85..83       MOV       DPH,?XSP + 1
   \   00006F   7482         MOV       A,#-0x7e
   \   000071   807F         SJMP      ??ZDO_ProcessBindUnbindReq_2
    998              }
    999              else
   1000              {
   1001                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   000073   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   000076   6421         XRL       A,#0x21
   \   000078   7002         JNZ       ??ZDO_ProcessBindUnbindReq_5
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   00007C   7051         JNZ       ??ZDO_ProcessBindUnbindReq_6
   1002                {
   1003                  // Assume the table is full
   1004                  bindStat = ZDP_TABLE_FULL;
   \   00007E   85..82       MOV       DPL,?XSP + 0
   \   000081   85..83       MOV       DPH,?XSP + 1
   \   000084   748C         MOV       A,#-0x74
   \   000086   F0           MOVX      @DPTR,A
   1005          
   1006          #if defined( APP_TP ) || defined( APP_TP2 )
   1007                  // For ZigBee Conformance Testing
   1008                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   1009          #endif
   1010                  {
   1011                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1012                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \   000087                ; Setup parameters for call to function APSME_BindRequest
   \   000087   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008D   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000090   12....       LCALL     `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   000093   7401         MOV       A,#0x1
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   \   000098   E9           MOV       A,R1
   \   000099   7058         JNZ       ??ZDO_ProcessBindUnbindReq_7
   1013                    {
   1014                      uint16 nwkAddr;
   1015          
   1016                      // valid entry
   1017                      bindStat = ZDP_SUCCESS;
   \   00009B   85..82       MOV       DPL,?XSP + 0
   \   00009E   85..83       MOV       DPH,?XSP + 1
   \   0000A1   E4           CLR       A
   \   0000A2   F0           MOVX      @DPTR,A
   1018          
   1019                      // Notify to save info into NV
   1020                      ZDApp_NVUpdate();
   \   0000A3                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000A3   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1021          
   1022                      // Check for the destination address
   1023                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   0000A6   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0000A9   7048         JNZ       ??ZDO_ProcessBindUnbindReq_7
   1024                      {
   1025                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   \   0000AB                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   0000AB   7401         MOV       A,#0x1
   \   0000AD   12....       LCALL     ?XSTACK_DISP102_8
   \   0000B0   EE           MOV       A,R6
   \   0000B1   240B         ADD       A,#0xb
   \   0000B3   FA           MOV       R2,A
   \   0000B4   E4           CLR       A
   \   0000B5   3F           ADDC      A,R7
   \   0000B6   FB           MOV       R3,A
   \   0000B7   12....       LCALL     `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   0000BA   E9           MOV       A,R1
   \   0000BB   7036         JNZ       ??ZDO_ProcessBindUnbindReq_7
   1026                        {
   1027                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   0000BD                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   0000BD   7D00         MOV       R5,#0x0
   \   0000BF   7C00         MOV       R4,#0x0
   \   0000C1   7900         MOV       R1,#0x0
   \   0000C3   EE           MOV       A,R6
   \   0000C4   240B         ADD       A,#0xb
   \   0000C6   FA           MOV       R2,A
   \   0000C7   E4           CLR       A
   \   0000C8   3F           ADDC      A,R7
   \   0000C9   FB           MOV       R3,A
   \   0000CA   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   0000CD   8024         SJMP      ??ZDO_ProcessBindUnbindReq_7
   1028                        }
   1029                      }
   1030                    }
   1031                  }
   1032                }
   1033                else // Unbind_req
   1034                {
   1035                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1036                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   0000CF                ; Setup parameters for call to function APSME_UnBindRequest
   \   0000CF   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   0000D2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D5   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000D8   12....       LCALL     `??APSME_UnBindRequest::?relay`; Banked call to: APSME_UnBindRequest
   \   0000DB   7401         MOV       A,#0x1
   \   0000DD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E0   E9           MOV       A,R1
   \   0000E1   85..82       MOV       DPL,?XSP + 0
   \   0000E4   85..83       MOV       DPH,?XSP + 1
   \   0000E7   7007         JNZ       ??ZDO_ProcessBindUnbindReq_8
   1037                  {
   1038                    bindStat = ZDP_SUCCESS;
   \   0000E9   E4           CLR       A
   \   0000EA   F0           MOVX      @DPTR,A
   1039          
   1040                    // Notify to save info into NV
   1041                    ZDApp_NVUpdate();
   \   0000EB                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000EB   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   0000EE   8003         SJMP      ??ZDO_ProcessBindUnbindReq_7
   1042                  }
   1043                  else
   1044                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   0000F0   7488         MOV       A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   0000F2   F0           MOVX      @DPTR,A
   1045                }
   1046              }
   1047            }
   1048          
   1049            // Send back a response message
   1050            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1051                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1052                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   0000F3                ; Setup parameters for call to function ZDP_SendData
   \   0000F3   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   0000F6   F5..         MOV       ?V2,A
   \   0000F8   78..         MOV       R0,#?V2
   \   0000FA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FD   7401         MOV       A,#0x1
   \   0000FF   12....       LCALL     ?XSTACK_DISP100_8
   \   000102   88..         MOV       ?V2,R0
   \   000104   89..         MOV       ?V3,R1
   \   000106   78..         MOV       R0,#?V2
   \   000108   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010B   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   00010E   F5..         MOV       ?V2,A
   \   000110   A3           INC       DPTR
   \   000111   E0           MOVX      A,@DPTR
   \   000112   4480         ORL       A,#0x80
   \   000114   F5..         MOV       ?V3,A
   \   000116   78..         MOV       R0,#?V2
   \   000118   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011B   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   00011E   12....       LCALL     ?DEALLOC_XSTACK8
   1053          }
   \   000121   740C         MOV       A,#0xc
   \   000123   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_631:
   \   000006   F5..         MOV       ?V2,A
   \   000008   78..         MOV       R0,#?V2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   EE           MOV       A,R6
   \   000001   2413         ADD       A,#0x13
   \   000003   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_630:
   \   000006   6403         XRL       A,#0x3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FD           MOV       R5,A
   \   000007   8E82         MOV       DPL,R6
   \   000009   8F83         MOV       DPH,R7
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   000017   8E82         MOV       DPL,R6
   \   000019   8F83         MOV       DPH,R7
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F9           MOV       R1,A
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   7901         MOV       R1,#0x1
   \   000002   E5..         MOV       A,?V0
   \   000004   2402         ADD       A,#0x2
   \   000006   FC           MOV       R4,A
   \   000007   E4           CLR       A
   \   000008   35..         ADDC      A,?V1
   \   00000A   FD           MOV       R5,A
   \   00000B   E5..         MOV       A,?V0
   \   00000D   240F         ADD       A,#0xf
   \   00000F   FA           MOV       R2,A
   \   000010   E4           CLR       A
   \   000011   35..         ADDC      A,?V1
   \   000013   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine189:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine225_0
   \   000001                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000003   7405         MOV       A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000003   8A..         MOV       ?V2,R2
   \   000005   8B..         MOV       ?V3,R3
   \   000007   AC..         MOV       R4,?V2
   \   000009   AD..         MOV       R5,?V3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   E5..         MOV       A,?V0
   \   000002   240C         ADD       A,#0xc
   \   000004                REQUIRE ??Subroutine246_0
   \   000004                ; // Fall through to label ??Subroutine246_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine246_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003                REQUIRE ??Subroutine247_0
   \   000003                ; // Fall through to label ??Subroutine247_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine247_0:
   \   000000   12....       LCALL     ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   E5..         MOV       A,?V0
   \   000002   240E         ADD       A,#0xe
   \   000004   12....       LCALL     ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine190:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003                REQUIRE ??Subroutine250_0
   \   000003                ; // Fall through to label ??Subroutine250_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine250_0:
   \   000000   12....       LCALL     ??Subroutine263_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_625:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine263_0:
   \   000000   35..         ADDC      A,?V1
   \   000002   F583         MOV       DPH,A
   \   000004   22           RET
   1054          
   1055          /*********************************************************************
   1056           * @fn      ZDO_UpdateAddrManager
   1057           *
   1058           * @brief   Update the Address Manager.
   1059           *
   1060           * @param   nwkAddr - network address
   1061           * @param   extAddr - extended address
   1062           *
   1063           * @return  none
   1064           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1065          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1066          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV       A,#-0xd
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1067            AddrMgrEntry_t addrEntry;
   1068          
   1069            // Update the address manager
   1070            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   1071            addrEntry.nwkAddr = nwkAddr;
   \   000011   04           INC       A
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ??Subroutine208_0 & 0xFFFF
   1072            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_331:
   \   000018                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000018   7403         MOV       A,#0x3
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   AA82         MOV       R2,DPL
   \   00001F   AB83         MOV       R3,DPH
   \   000021   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1073            AddrMgrEntryUpdate( &addrEntry );
   \   000024                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000024   AA..         MOV       R2,?XSP + 0
   \   000026   AB..         MOV       R3,?XSP + 1
   \   000028   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1074          }
   \   00002B   740D         MOV       A,#0xd
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000030   02....       LJMP      ?Subroutine0 & 0xFFFF
   1075          
   1076          /*********************************************************************
   1077           * @fn      ZDO_ProcessServerDiscReq
   1078           *
   1079           * @brief   Process the Server_Discovery_req message.
   1080           *
   1081           * @param   inMsg  - incoming message (request)
   1082           *
   1083           * @return  none
   1084           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1085          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1086          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1087            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1088            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \   000009   EA           MOV       A,R2
   \   00000A   2413         ADD       A,#0x13
   \   00000C   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   00000F   F8           MOV       R0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000015   F8           MOV       R0,A
   \   000016   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   58           ANL       A,R0
   \   00001B   F5..         MOV       ?V0,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   59           ANL       A,R1
   \   000020   F5..         MOV       ?V1,A
   1089          
   1090            if ( matchMask )
   \   000022   E5..         MOV       A,?V0
   \   000024   45..         ORL       A,?V1
   \   000026   601C         JZ        ??ZDO_ProcessServerDiscReq_0
   1091            {
   1092              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1093                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   000028                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000030   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000033   12....       LCALL     ?Subroutine123 & 0xFFFF
   1094            }
   \                     ??CrossCallReturnLabel_432:
   \   000036   FD           MOV       R5,A
   \   000037   7C00         MOV       R4,#0x0
   \   000039   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   00003C   12....       LCALL     `??ZDP_ServerDiscRsp::?relay`; Banked call to: ZDP_ServerDiscRsp
   \   00003F   7404         MOV       A,#0x4
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   1095          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   000044   02....       LJMP      ??Subroutine206_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   8882         MOV       DPL,R0
   \   000002   F583         MOV       DPH,A
   \   000004                REQUIRE ??Subroutine210_0
   \   000004                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   EA           MOV       A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000003   22           RET
   1096          
   1097          /*********************************************************************
   1098           * Call Back Functions from APS  - API
   1099           */
   1100          
   1101          /*********************************************************************
   1102           * @fn          ZDO_EndDeviceTimeoutCB
   1103           *
   1104           * @brief       This function handles the binding timer for the End
   1105           *              Device Bind command.
   1106           *
   1107           * @param       none
   1108           *
   1109           * @return      none
   1110           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1111          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1112          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1113          #if defined ( REFLECTOR )
   1114            byte stat;
   1115            if ( ZDO_EDBind )
   \   00000A   90....       MOV       DPTR,#ZDO_EDBind
   \   00000D   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   000010   7003         JNZ       $+5
   \   000012   02....       LJMP      ??ZDO_EndDeviceTimeoutCB_0 & 0xFFFF
   1116            {
   1117              stat = ZDO_EDBind->status;
   1118          
   1119              // Send the response message to the first sent
   1120              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1121                                  stat, ZDO_EDBind->SecurityUse );
   \   000015   E8           MOV       A,R0
   \   000016   2416         ADD       A,#0x16
   \   000018   F582         MOV       DPL,A
   \   00001A   E4           CLR       A
   \   00001B   39           ADDC      A,R1
   \   00001C   F583         MOV       DPH,A
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   85..82       MOV       DPL,?XSP + 0
   \   000022   85..83       MOV       DPH,?XSP + 1
   \   000025   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000028   F583         MOV       DPH,A
   \   00002A   8882         MOV       DPL,R0
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   C0E0         PUSH      A
   \   00002F   7401         MOV       A,#0x1
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   D0E0         POP       A
   \   000036   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000039   C8           XCH       A,R0
   \   00003A   2415         ADD       A,#0x15
   \   00003C   F582         MOV       DPL,A
   \   00003E   E4           CLR       A
   \   00003F   38           ADDC      A,R0
   \   000040   12....       LCALL     ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000046   7401         MOV       A,#0x1
   \   000048   12....       LCALL     ?XSTACK_DISP100_8
   \   00004B   88..         MOV       ?V0,R0
   \   00004D   89..         MOV       ?V1,R1
   \   00004F   78..         MOV       R0,#?V0
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000054   75..20       MOV       ?V0,#0x20
   \   000057   75..80       MOV       ?V1,#-0x80
   \   00005A   78..         MOV       R0,#?V0
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005F   7901         MOV       R1,#0x1
   \   000061   90....       MOV       DPTR,#ZDO_EDBind
   \   000064   E0           MOVX      A,@DPTR
   \   000065   29           ADD       A,R1
   \   000066   FC           MOV       R4,A
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   3400         ADDC      A,#0x0
   \   00006B   FD           MOV       R5,A
   \   00006C   7406         MOV       A,#0x6
   \   00006E   12....       LCALL     ?XSTACK_DISP101_8
   \   000071   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   \   000077                ; Setup parameters for call to function HalLcdWriteString
   \   000077   7901         MOV       R1,#0x1
   \   000079   7A..         MOV       R2,#`?<Constant "End Device Bind">` & 0xff
   \   00007B   7B..         MOV       R3,#(`?<Constant "End Device Bind">` >> 8) & 0xff
   \   00007D   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000080   85..82       MOV       DPL,?XSP + 0
   \   000083   85..83       MOV       DPH,?XSP + 1
   \   000086   E0           MOVX      A,@DPTR
   \   000087   7902         MOV       R1,#0x2
   \   000089   7006         JNZ       ??ZDO_EndDeviceTimeoutCB_1
   \   00008B                ; Setup parameters for call to function HalLcdWriteString
   \   00008B   7A..         MOV       R2,#`?<Constant "Success Sent">` & 0xff
   \   00008D   7B..         MOV       R3,#(`?<Constant "Success Sent">` >> 8) & 0xff
   \   00008F   8004         SJMP      ??ZDO_EndDeviceTimeoutCB_2
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   000091                ; Setup parameters for call to function HalLcdWriteString
   \   000091   7A..         MOV       R2,#`?<Constant "Timeout">` & 0xff
   \   000093   7B..         MOV       R3,#(`?<Constant "Timeout">` >> 8) & 0xff
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   000095   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1122          
   1123              ZDO_RemoveEndDeviceBind();
   \   000098   90....       MOV       DPTR,#ZDO_EDBind
   \   00009B   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   00009E   603C         JZ        ??ZDO_EndDeviceTimeoutCB_0
   \   0000A0   E8           MOV       A,R0
   \   0000A1   2410         ADD       A,#0x10
   \   0000A3   F582         MOV       DPL,A
   \   0000A5   E4           CLR       A
   \   0000A6   39           ADDC      A,R1
   \   0000A7   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   0000AA   600B         JZ        ??CrossCallReturnLabel_503
   \   0000AC                ; Setup parameters for call to function osal_mem_free
   \   0000AC   90....       MOV       DPTR,#ZDO_EDBind
   \   0000AF   12....       LCALL     ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_560:
   \   0000B2   2410         ADD       A,#0x10
   \   0000B4   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   0000B7   90....       MOV       DPTR,#ZDO_EDBind
   \   0000BA   12....       LCALL     ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_561:
   \   0000BD   2413         ADD       A,#0x13
   \   0000BF   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   0000C2   600B         JZ        ??CrossCallReturnLabel_504
   \   0000C4                ; Setup parameters for call to function osal_mem_free
   \   0000C4   90....       MOV       DPTR,#ZDO_EDBind
   \   0000C7   12....       LCALL     ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_562:
   \   0000CA   2413         ADD       A,#0x13
   \   0000CC   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   0000CF                ; Setup parameters for call to function osal_mem_free
   \   0000CF   90....       MOV       DPTR,#ZDO_EDBind
   \   0000D2   12....       LCALL     ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   0000D5   90....       MOV       DPTR,#ZDO_EDBind
   \   0000D8   E4           CLR       A
   \   0000D9   F0           MOVX      @DPTR,A
   \   0000DA   A3           INC       DPTR
   \   0000DB   F0           MOVX      @DPTR,A
   1124            }
   1125          #endif  // REFLECTOR
   1126          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   0000DC   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   90....       MOV       DPTR,#ZDO_EDBind
   \   000004   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_586:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine196:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C8           XCH       A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004                REQUIRE ??Subroutine237_0
   \   000004                ; // Fall through to label ??Subroutine237_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine237_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine238_0
   \   000002                ; // Fall through to label ??Subroutine238_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004                REQUIRE ??Subroutine243_0
   \   000004                ; // Fall through to label ??Subroutine243_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine243_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine244_0
   \   000002                ; // Fall through to label ??Subroutine244_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine258_0:
   \   000000   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_582:
   \   000003   22           RET
   1127          
   1128          /*********************************************************************
   1129           * Optional Management Messages
   1130           */
   1131          
   1132          /*********************************************************************
   1133           * @fn          ZDO_ProcessMgmtLqiReq
   1134           *
   1135           * @brief       This function handles parsing the incoming Management
   1136           *              LQI request and generate the response.
   1137           *
   1138           *   Note:      This function will limit the number of items returned
   1139           *              to ZDO_MAX_LQI_ITEMS items.
   1140           *
   1141           * @param       inMsg - incoming message (request)
   1142           *
   1143           * @return      none
   1144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1145          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1146          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV       A,#-0x25
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V12,R2
   \   00000C   8B..         MOV       ?V13,R3
   1147            byte x;
   1148            byte index;
   1149            byte numItems;
   1150            byte maxItems;
   1151            ZDP_MgmtLqiItem_t* table = NULL;
   \   00000E   75..00       MOV       ?V10,#0x0
   \   000011   75..00       MOV       ?V11,#0x0
   1152            ZDP_MgmtLqiItem_t* item;
   1153            neighborEntry_t    entry;
   1154            byte aItems;
   1155            associated_devices_t *aDevice;
   1156            AddrMgrEntry_t  nwkEntry;
   1157            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL     ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_550:
   \   000017   35..         ADDC      A,?V13
   \   000019   F583         MOV       DPH,A
   \   00001B   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   00001E   F5..         MOV       ?V6,A
   1158          
   1159            // Get the number of neighbor items
   1160            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   000020                ; Setup parameters for call to function NLME_GetRequest
   \   000020   AC..         MOV       R4,?XSP + 0
   \   000022   AD..         MOV       R5,?XSP + 1
   \   000024   7A00         MOV       R2,#0x0
   \   000026   7B00         MOV       R3,#0x0
   \   000028   799C         MOV       R1,#-0x64
   \   00002A   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1161          
   1162            // Get the number of associated items
   1163            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   00002D                ; Setup parameters for call to function AssocCount
   \   00002D   7A04         MOV       R2,#0x4
   \   00002F   7900         MOV       R1,#0x0
   \   000031   12....       LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
   \   000034   EA           MOV       A,R2
   \   000035   F5..         MOV       ?V4,A
   1164          
   1165            // Total number of items
   1166            maxItems += aItems;
   \   000037   85..82       MOV       DPL,?XSP + 0
   \   00003A   85..83       MOV       DPH,?XSP + 1
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   2A           ADD       A,R2
   \   00003F   F0           MOVX      @DPTR,A
   1167          
   1168            // Start with the supplied index
   1169            if ( maxItems > StartIndex )
   \   000040   F8           MOV       R0,A
   \   000041   E5..         MOV       A,?V6
   \   000043   C3           CLR       C
   \   000044   98           SUBB      A,R0
   \   000045   4003         JC        $+5
   \   000047   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1170            {
   1171              numItems = maxItems - StartIndex;
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   C3           CLR       C
   \   00004C   95..         SUBB      A,?V6
   \   00004E   F5..         MOV       ?V1,A
   1172          
   1173              // limit the size of the list
   1174              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   000050   C3           CLR       C
   \   000051   9404         SUBB      A,#0x4
   \   000053   4003         JC        ??ZDO_ProcessMgmtLqiReq_1
   1175                numItems = ZDO_MAX_LQI_ITEMS;
   \   000055   75..03       MOV       ?V1,#0x3
   1176          
   1177              // Allocate the memory to build the table
   1178              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1179                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   000058                ; Setup parameters for call to function osal_mem_alloc
   \   000058   E5..         MOV       A,?V1
   \   00005A   75F01A       MOV       B,#0x1a
   \   00005D   A4           MUL       AB
   \   00005E   FA           MOV       R2,A
   \   00005F   ABF0         MOV       R3,B
   \   000061   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000064   8A..         MOV       ?V10,R2
   \   000066   8B..         MOV       ?V11,R3
   1180          
   1181              if ( table != NULL )
   \   000068   EA           MOV       A,R2
   \   000069   4B           ORL       A,R3
   \   00006A   7003         JNZ       $+5
   \   00006C   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1182              {
   1183                x = 0;
   \   00006F   75..00       MOV       ?V5,#0x0
   1184                item = table;
   \   000072   AE..         MOV       R6,?V10
   \   000074   AF..         MOV       R7,?V11
   1185                index = StartIndex;
   \   000076   85....       MOV       ?V0,?V6
   \   000079   807B         SJMP      ??ZDO_ProcessMgmtLqiReq_3
   1186          
   1187                // Loop through associated items and build list
   1188                for ( ; x < numItems; x++ )
   1189                {
   1190                  if ( index < aItems )
   1191                  {
   1192                    // get next associated device
   1193                    aDevice = AssocFindDevice( index++ );
   1194          
   1195                    // set basic fields
   1196                    item->panID   = _NIB.nwkPanId;
   1197                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1198                    item->nwkAddr = aDevice->shortAddr;
   1199                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1200                    item->depth   = 0xFF;
   1201                    item->lqi     = aDevice->linkInfo.rxLqi;
   1202          
   1203                    // set extented address
   1204                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1205                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1206          
   1207                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1208                    {
   1209                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1210                    }
   1211                    else
   1212                    {
   1213                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   00007B                ; Setup parameters for call to function osal_memset
   \   00007B   12....       LCALL     ?Subroutine142 & 0xFFFF
   1214                    }
   1215          
   1216                    // use association info to set other fields
   1217                    if ( aDevice->nodeRelation == PARENT )
   \                     ??CrossCallReturnLabel_228:
   \   00007E   85..82       MOV       DPL,?V2
   \   000081   85..83       MOV       DPH,?V3
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   E0           MOVX      A,@DPTR
   \   000089   702D         JNZ       ??ZDO_ProcessMgmtLqiReq_5
   1218                    {
   1219                      if (  aDevice->shortAddr == 0 )
   \   00008B   85..82       MOV       DPL,?V2
   \   00008E   85..83       MOV       DPH,?V3
   \   000091   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   000094   700C         JNZ       ??ZDO_ProcessMgmtLqiReq_6
   1220                      {
   1221                        item->devType = ZDP_MGMT_DT_COORD;
   \   000096   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_532:
   \   000099   F0           MOVX      @DPTR,A
   1222                        item->depth = 0;
   \   00009A   EE           MOV       A,R6
   \   00009B   2418         ADD       A,#0x18
   \   00009D   12....       LCALL     ??Subroutine252_0 & 0xFFFF
   1223                      }
   \                     ??CrossCallReturnLabel_529:
   \   0000A0   8010         SJMP      ??ZDO_ProcessMgmtLqiReq_7
   1224                      else
   1225                      {
   1226                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000A2   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   0000A5   F0           MOVX      @DPTR,A
   1227                        item->depth = _NIB.nodeDepth - 1;
   \   0000A6   90....       MOV       DPTR,#_NIB + 52
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   14           DEC       A
   \   0000AB   C0E0         PUSH      A
   \   0000AD   12....       LCALL     ?Subroutine152 & 0xFFFF
   1228                      }
   1229          
   1230                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1231                      item->relation = ZDP_MGMT_REL_PARENT;
   1232                    }
   \                     ??CrossCallReturnLabel_249:
   \   0000B0   D0E0         POP       A
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0000B2   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000B5   E4           CLR       A
   \   0000B6   8034         SJMP      ??CrossCallReturnLabel_353
   1233                    else
   1234                    {
   1235                      // If not parent, then it's a child
   1236                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   0000B8   90....       MOV       DPTR,#_NIB + 52
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   04           INC       A
   \   0000BD   C0E0         PUSH      A
   \   0000BF   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   0000C2   D0E0         POP       A
   \   0000C4   12....       LCALL     ?Subroutine16 & 0xFFFF
   1237          
   1238                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_13:
   \   0000C7   C3           CLR       C
   \   0000C8   9403         SUBB      A,#0x3
   \   0000CA   EE           MOV       A,R6
   \   0000CB   4003         JC        $+5
   \   0000CD   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_8 & 0xFFFF
   1239                      {
   1240                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   0000D0   12....       LCALL     ??Subroutine256_0 & 0xFFFF
   1241          
   1242                        if ( aDevice->nodeRelation == CHILD_RFD )
   1243                        {
   1244                          item->rxOnIdle = FALSE;
   1245                        }
   1246                        else
   1247                        {
   1248                          item->rxOnIdle = TRUE;
   1249                        }
   1250                      }
   \                     ??CrossCallReturnLabel_544:
   \   0000D3   7402         MOV       A,#0x2
   \   0000D5   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000D8   6401         XRL       A,#0x1
   \   0000DA   7003         JNZ       $+5
   \   0000DC   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_9 & 0xFFFF
   1251                      else
   1252                      {
   1253                        item->devType = ZDP_MGMT_DT_ROUTER;
   1254          
   1255                        if ( aDevice->nodeRelation == CHILD_FFD )
   1256                        {
   1257                          item->rxOnIdle = FALSE;
   1258                        }
   1259                        else
   1260                        {
   1261                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   0000DF   EE           MOV       A,R6
   \   0000E0   2415         ADD       A,#0x15
   \   0000E2   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   1262                        }
   \                     ??CrossCallReturnLabel_352:
   \   0000E5   F0           MOVX      @DPTR,A
   1263                      }
   1264          
   1265                      item->relation = ZDP_MGMT_REL_CHILD;
   \   0000E6   EE           MOV       A,R6
   \   0000E7   2416         ADD       A,#0x16
   \   0000E9   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   0000EC   F0           MOVX      @DPTR,A
   1266                    }
   1267          
   1268                    item++;
   \   0000ED   EE           MOV       A,R6
   \   0000EE   241A         ADD       A,#0x1a
   \   0000F0   FE           MOV       R6,A
   \   0000F1   5001         JNC       ??ZDO_ProcessMgmtLqiReq_11
   \   0000F3   0F           INC       R7
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0000F4   05..         INC       ?V5
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   0000F6   E5..         MOV       A,?V5
   \   0000F8   C3           CLR       C
   \   0000F9   95..         SUBB      A,?V1
   \   0000FB   4003         JC        $+5
   \   0000FD   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_12 & 0xFFFF
   \   000100   E5..         MOV       A,?V0
   \   000102   C3           CLR       C
   \   000103   95..         SUBB      A,?V4
   \   000105   4003         JC        $+5
   \   000107   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   \   00010A                ; Setup parameters for call to function AssocFindDevice
   \   00010A   A9..         MOV       R1,?V0
   \   00010C   12....       LCALL     `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
   \   00010F   8A..         MOV       ?V2,R2
   \   000111   8B..         MOV       ?V3,R3
   \   000113   05..         INC       ?V0
   \   000115   90....       MOV       DPTR,#_NIB + 33
   \   000118   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00011B   85..82       MOV       DPL,?V2
   \   00011E   85..83       MOV       DPH,?V3
   \   000121   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000124   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   000127   F583         MOV       DPH,A
   \   000129   E8           MOV       A,R0
   \   00012A   F0           MOVX      @DPTR,A
   \   00012B   A3           INC       DPTR
   \   00012C   E9           MOV       A,R1
   \   00012D   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000130   85..82       MOV       DPL,?V2
   \   000133   85..83       MOV       DPH,?V3
   \   000136   A3           INC       DPTR
   \   000137   A3           INC       DPTR
   \   000138   A3           INC       DPTR
   \   000139   A3           INC       DPTR
   \   00013A   A3           INC       DPTR
   \   00013B   A3           INC       DPTR
   \   00013C   A3           INC       DPTR
   \   00013D   A3           INC       DPTR
   \   00013E   A3           INC       DPTR
   \   00013F   A3           INC       DPTR
   \   000140   E0           MOVX      A,@DPTR
   \   000141   C0E0         PUSH      A
   \   000143   12....       LCALL     ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000146   D0E0         POP       A
   \   000148   F0           MOVX      @DPTR,A
   \   000149   7401         MOV       A,#0x1
   \   00014B   12....       LCALL     ?XSTACK_DISP0_8
   \   00014E   E4           CLR       A
   \   00014F   F0           MOVX      @DPTR,A
   \   000150   85..82       MOV       DPL,?V2
   \   000153   85..83       MOV       DPH,?V3
   \   000156   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000159   7402         MOV       A,#0x2
   \   00015B   12....       LCALL     ?XSTACK_DISP0_8
   \   00015E   E8           MOV       A,R0
   \   00015F   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_587:
   \   000162                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000162   7401         MOV       A,#0x1
   \   000164   12....       LCALL     ?XSTACK_DISP101_8
   \   000167   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00016A   E9           MOV       A,R1
   \   00016B   6401         XRL       A,#0x1
   \   00016D   6003         JZ        $+5
   \   00016F   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   \   000172                ; Setup parameters for call to function sAddrExtCpy
   \   000172   7404         MOV       A,#0x4
   \   000174   12....       LCALL     ?XSTACK_DISP0_8
   \   000177   AC82         MOV       R4,DPL
   \   000179   AD83         MOV       R5,DPH
   \   00017B   EE           MOV       A,R6
   \   00017C   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   00017F   3F           ADDC      A,R7
   \   000180   FB           MOV       R3,A
   \   000181   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000184   02....       LJMP      ??CrossCallReturnLabel_228 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   000187   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   00018A   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00018D   6403         XRL       A,#0x3
   \   00018F   6003         JZ        $+5
   \   000191   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_10 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   000194   EE           MOV       A,R6
   \   000195   2415         ADD       A,#0x15
   \   000197   12....       LCALL     ??Subroutine252_0 & 0xFFFF
   1269                  }
   \                     ??CrossCallReturnLabel_530:
   \   00019A   02....       LJMP      ??CrossCallReturnLabel_352 & 0xFFFF
   1270                  else
   1271                  {
   1272                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   00019D   E5..         MOV       A,?V4
   \   00019F   C3           CLR       C
   \   0001A0   95..         SUBB      A,?V6
   \   0001A2   4005         JC        ??ZDO_ProcessMgmtLqiReq_14
   1273                      // Start with 1st neighbor
   1274                      index = 0;
   \   0001A4   75..00       MOV       ?V0,#0x0
   \   0001A7   801D         SJMP      ??ZDO_ProcessMgmtLqiReq_15
   1275                    else
   1276                      // Start with >1st neighbor
   1277                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   0001A9   E5..         MOV       A,?V6
   \   0001AB   C3           CLR       C
   \   0001AC   95..         SUBB      A,?V4
   \   0001AE   F5..         MOV       ?V0,A
   \   0001B0   8014         SJMP      ??ZDO_ProcessMgmtLqiReq_15
   1278                    break;
   1279                  }
   1280                }
   1281          
   1282                // Loop through neighbor items and finish list
   1283                for ( ; x < numItems; x++ )
   1284                {
   1285                  // Add next neighbor table item
   1286                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1287          
   1288                  // set ZDP_MgmtLqiItem_t fields
   1289                  item->panID    = entry.panId;
   1290                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1291                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1292                  item->nwkAddr  = entry.neighborAddress;
   1293                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1294                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1295                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1296                  item->depth    = 0xFF;
   1297                  item->lqi      = entry.linkInfo.rxLqi;
   1298          
   1299                  if ( item->nwkAddr == 0 )
   1300                  {
   1301                    item->devType = ZDP_MGMT_DT_COORD;
   1302                  }
   1303                  else
   1304                  {
   1305                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   0001B2   12....       LCALL     ?Subroutine117 & 0xFFFF
   1306                  }
   \                     ??CrossCallReturnLabel_356:
   \   0001B5   F0           MOVX      @DPTR,A
   1307          
   1308                  item++;
   \   0001B6   EE           MOV       A,R6
   \   0001B7   241A         ADD       A,#0x1a
   \   0001B9   FE           MOV       R6,A
   \   0001BA   5001         JNC       ??ZDO_ProcessMgmtLqiReq_17
   \   0001BC   0F           INC       R7
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0001BD   05..         INC       ?V5
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   0001BF   E5..         MOV       A,?V5
   \   0001C1   C3           CLR       C
   \   0001C2   95..         SUBB      A,?V1
   \   0001C4   5056         JNC       ??ZDO_ProcessMgmtLqiReq_2
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   0001C6                ; Setup parameters for call to function NLME_GetRequest
   \   0001C6   740E         MOV       A,#0xe
   \   0001C8   12....       LCALL     ?XSTACK_DISP102_8
   \   0001CB   AA..         MOV       R2,?V0
   \   0001CD   7B00         MOV       R3,#0x0
   \   0001CF   7987         MOV       R1,#-0x79
   \   0001D1   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   0001D4   05..         INC       ?V0
   \   0001D6   7418         MOV       A,#0x18
   \   0001D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DB   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0001DE                ; Setup parameters for call to function osal_memset
   \   0001DE   12....       LCALL     ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   0001E1   EE           MOV       A,R6
   \   0001E2   2412         ADD       A,#0x12
   \   0001E4   F8           MOV       R0,A
   \   0001E5   E4           CLR       A
   \   0001E6   3F           ADDC      A,R7
   \   0001E7   F9           MOV       R1,A
   \   0001E8   740E         MOV       A,#0xe
   \   0001EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001ED   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   0001F0   8882         MOV       DPL,R0
   \   0001F2   8983         MOV       DPH,R1
   \   0001F4   EA           MOV       A,R2
   \   0001F5   F0           MOVX      @DPTR,A
   \   0001F6   A3           INC       DPTR
   \   0001F7   EB           MOV       A,R3
   \   0001F8   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001FB   7403         MOV       A,#0x3
   \   0001FD   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000200   741D         MOV       A,#0x1d
   \   000202   12....       LCALL     ?XSTACK_DISP0_8
   \   000205   E0           MOVX      A,@DPTR
   \   000206   C0E0         PUSH      A
   \   000208   12....       LCALL     ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   00020B   D0E0         POP       A
   \   00020D   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000210   E8           MOV       A,R0
   \   000211   49           ORL       A,R1
   \   000212   709E         JNZ       ??ZDO_ProcessMgmtLqiReq_16
   \   000214   12....       LCALL     ?Subroutine124 & 0xFFFF
   1309                }
   1310              }
   1311            }
   \                     ??CrossCallReturnLabel_533:
   \   000217   809C         SJMP      ??CrossCallReturnLabel_356
   1312            else
   1313            {
   1314              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   000219   75..00       MOV       ?V1,#0x0
   1315            }
   1316          
   1317            // Send response
   1318            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1319                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   00021C                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   00021C   75..00       MOV       ?V2,#0x0
   \   00021F   78..         MOV       R0,#?V2
   \   000221   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000224   78..         MOV       R0,#?V10
   \   000226   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000229   78..         MOV       R0,#?V1
   \   00022B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00022E   E5..         MOV       A,?V6
   \   000230   F5..         MOV       ?V1,A
   \   000232   78..         MOV       R0,#?V1
   \   000234   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000237   7405         MOV       A,#0x5
   \   000239   12....       LCALL     ?XSTACK_DISP0_8
   \   00023C   E0           MOVX      A,@DPTR
   \   00023D   FD           MOV       R5,A
   \   00023E   7C00         MOV       R4,#0x0
   \   000240   E5..         MOV       A,?V12
   \   000242   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_603:
   \   000245   35..         ADDC      A,?V13
   \   000247   FB           MOV       R3,A
   \   000248   E5..         MOV       A,?V12
   \   00024A   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   00024D   35..         ADDC      A,?V13
   \   00024F   F583         MOV       DPH,A
   \   000251   E0           MOVX      A,@DPTR
   \   000252   F9           MOV       R1,A
   \   000253   12....       LCALL     `??ZDP_MgmtLqiRsp::?relay`; Banked call to: ZDP_MgmtLqiRsp
   \   000256   7405         MOV       A,#0x5
   \   000258   12....       LCALL     ?DEALLOC_XSTACK8
   1320          
   1321            if ( table )
   \   00025B   E5..         MOV       A,?V10
   \   00025D   45..         ORL       A,?V11
   \   00025F   6007         JZ        ??ZDO_ProcessMgmtLqiReq_18
   1322            {
   1323              osal_mem_free( table );
   \   000261                ; Setup parameters for call to function osal_mem_free
   \   000261   AA..         MOV       R2,?V10
   \   000263   AB..         MOV       R3,?V11
   \   000265   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1324            }
   1325          }
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   000268   7425         MOV       A,#0x25
   \   00026A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00026D                REQUIRE ?Subroutine5
   \   00026D                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F0E         MOV       R7,#0xe
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   EE           MOV       A,R6
   \   000001   2419         ADD       A,#0x19
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   12....       LCALL     ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine191:
   \   000000   EE           MOV       A,R6
   \   000001   2418         ADD       A,#0x18
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine211_0
   \   000001                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   2412         ADD       A,#0x12
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   7C08         MOV       R4,#0x8
   \   000002   7D00         MOV       R5,#0x0
   \   000004   79FF         MOV       R1,#-0x1
   \   000006   EE           MOV       A,R6
   \   000007   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   00000A   3F           ADDC      A,R7
   \   00000B   FB           MOV       R3,A
   \   00000C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine213_0
   \   000001                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   2414         ADD       A,#0x14
   \   000002                REQUIRE ??Subroutine214_0
   \   000002                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   7401         MOV       A,#0x1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_467:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   E8           MOV       A,R0
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   E9           MOV       A,R1
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   00000E   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000010   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_607:
   \   000013   3F           ADDC      A,R7
   \   000014   FB           MOV       R3,A
   \   000015   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000003   7402         MOV       A,#0x2
   \   000005   F0           MOVX      @DPTR,A
   \   000006   EE           MOV       A,R6
   \   000007   2416         ADD       A,#0x16
   \   000009   F582         MOV       DPL,A
   \   00000B   E4           CLR       A
   \   00000C   3F           ADDC      A,R7
   \   00000D   F583         MOV       DPH,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   2417         ADD       A,#0x17
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   3F           ADDC      A,R7
   \   000008   F583         MOV       DPH,A
   \   00000A   7402         MOV       A,#0x2
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   12....       LCALL     ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000010   74FF         MOV       A,#-0x1
   \   000012   F0           MOVX      @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   12....       LCALL     ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003                REQUIRE ??Subroutine252_0
   \   000003                ; // Fall through to label ??Subroutine252_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine252_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   E4           CLR       A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   2415         ADD       A,#0x15
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   3F           ADDC      A,R7
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine256_0:
   \   000000   2414         ADD       A,#0x14
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine257_0:
   \   000000   12....       LCALL     ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_559:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine259_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000003   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine195:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET
   1326          
   1327          /*********************************************************************
   1328           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1329           *
   1330           * @brief       This function handles parsing the incoming Management
   1331           *              Network Discover request and starts the request.
   1332           *
   1333           * @param       inMsg - incoming message (request)
   1334           *
   1335           * @return      none
   1336           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1337          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1338          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine131 & 0xFFFF
   1339            NLME_ScanFields_t scan;
   1340            uint8             index;
   1341            uint8             *msg;
   1342          
   1343            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_548:
   \   00000D   35..         ADDC      A,?V1
   \   00000F   12....       LCALL     ?Subroutine65 & 0xFFFF
   1344            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_99:
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   12....       LCALL     ?XSTORE_R0123
   1345            msg += 4;
   1346            scan.duration = *msg++;
   \   00001B   8E82         MOV       DPL,R6
   \   00001D   8F83         MOV       DPH,R7
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C0E0         PUSH      A
   \   000026   7404         MOV       A,#0x4
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   D0E0         POP       A
   \   00002D   12....       LCALL     ?Subroutine45 & 0xFFFF
   1347            index         = *msg;
   \                     ??CrossCallReturnLabel_66:
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F8           MOV       R0,A
   1348            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   000036   7405         MOV       A,#0x5
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   7401         MOV       A,#0x1
   \   00003D   F0           MOVX      @DPTR,A
   1349            scan.scanApp  = NLME_DISC_SCAN;
   \   00003E   7406         MOV       A,#0x6
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   7401         MOV       A,#0x1
   \   000045   F0           MOVX      @DPTR,A
   1350          
   1351            // Save off the information to be used for the response
   1352            zdappMgmtNwkDiscReqInProgress          = true;
   \   000046   90....       MOV       DPTR,#zdappMgmtNwkDiscReqInProgress
   \   000049   F0           MOVX      @DPTR,A
   1353            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   00004A   90....       MOV       DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   00004D   04           INC       A
   \   00004E   12....       LCALL     ?Subroutine35 & 0xFFFF
   1354            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_49:
   \   000051   FA           MOV       R2,A
   \   000052   A3           INC       DPTR
   \   000053   E0           MOVX      A,@DPTR
   \   000054   FB           MOV       R3,A
   \   000055   90....       MOV       DPTR,#zdappMgmtNwkDiscRspAddr
   \   000058   12....       LCALL     ??Subroutine208_0 & 0xFFFF
   1355            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_332:
   \   00005B   E8           MOV       A,R0
   \   00005C   90....       MOV       DPTR,#zdappMgmtNwkDiscStartIndex
   \   00005F   F0           MOVX      @DPTR,A
   1356            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   000060   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000063   E0           MOVX      A,@DPTR
   \   000064   90....       MOV       DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   000067   F0           MOVX      @DPTR,A
   1357          
   1358            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \   000068                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   000068   AA..         MOV       R2,?XSP + 0
   \   00006A   AB..         MOV       R3,?XSP + 1
   \   00006C   12....       LCALL     `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   00006F   E9           MOV       A,R1
   \   000070   6003         JZ        ??ZDO_ProcessMgmtNwkDiscReq_0
   1359            {
   1360              NLME_NwkDiscTerm();
   \   000072                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000072   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1361          
   1362              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1363            }
   1364          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   000075   7407         MOV       A,#0x7
   \   000077   02....       LJMP      ??Subroutine205_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL     ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine193:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   8A..         MOV       ?V0,R2
   \   000002   8B..         MOV       ?V1,R3
   \   000004                REQUIRE ??Subroutine257_0
   \   000004                ; // Fall through to label ??Subroutine257_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine261_0
   \   000002                ; // Fall through to label ??Subroutine261_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   E5..         MOV       A,?V0
   \   000002   12....       LCALL     ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000005   12....       LCALL     ??Subroutine263_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_621:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_613:
   \   000003   FF           MOV       R7,A
   \   000004                ; Setup parameters for call to function osal_build_uint32
   \   000004                ; Setup parameters for call to function osal_build_uint32
   \   000004   7904         MOV       R1,#0x4
   \   000006   EE           MOV       A,R6
   \   000007   FA           MOV       R2,A
   \   000008   EF           MOV       A,R7
   \   000009   FB           MOV       R3,A
   \   00000A   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00000D   EA           MOV       A,R2
   \   00000E   F8           MOV       R0,A
   \   00000F   EB           MOV       A,R3
   \   000010   F9           MOV       R1,A
   \   000011   EC           MOV       A,R4
   \   000012   FA           MOV       R2,A
   \   000013   ED           MOV       A,R5
   \   000014   FB           MOV       R3,A
   \   000015   22           RET
   1365          
   1366          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1367          /*********************************************************************
   1368           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1369           *
   1370           * @brief       This function finishes the processing of the Management
   1371           *              Network Discover Request and generates the response.
   1372           *
   1373           *   Note:      This function will limit the number of items returned
   1374           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1375           *
   1376           * @param       ResultCountSrcAddr - source of the request
   1377           * @param       msg - pointer to incoming message
   1378           * @param       SecurityUse -
   1379           *
   1380           * @return      none
   1381           */
   1382          void ZDO_FinishProcessingMgmtNwkDiscReq( void )
   1383          {
   1384            byte count, i, ResultCount = 0;
   1385            networkDesc_t *newDesc = NULL, *pList, *NetworkList;
   1386          
   1387            NetworkList = nwk_getNwkDescList();
   1388          
   1389            // Count the number of nwk descriptors in the list
   1390            pList = nwk_getNwkDescList();
   1391            while (pList)
   1392            {
   1393              ResultCount++;
   1394              pList = pList->nextDesc;
   1395            }
   1396          
   1397            if ( ZSTACK_ROUTER_BUILD )
   1398            {
   1399              // Look for my PanID.
   1400              pList = nwk_getNwkDescList();
   1401              while ( pList )
   1402              {
   1403                if ( pList->panId == _NIB.nwkPanId )
   1404                {
   1405                  break;
   1406                }
   1407          
   1408          
   1409                if ( !pList->nextDesc )
   1410                {
   1411                  break;
   1412                }
   1413                pList = pList->nextDesc;
   1414              }
   1415          
   1416          
   1417              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1418              // prepend it.
   1419              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1420              {
   1421                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1422                if ( newDesc )
   1423                {
   1424                  byte pJoin;
   1425          
   1426                  newDesc->panId = _NIB.nwkPanId;
   1427                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1428                  newDesc->version = NLME_GetProtocolVersion();
   1429                  newDesc->stackProfile = zgStackProfile;
   1430          
   1431                  //Extended PanID
   1432                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1433          
   1434                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1435                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1436                                                     INVALID_NODE_ADDR);
   1437          
   1438                  newDesc->nextDesc = NetworkList;
   1439                  NetworkList = newDesc;
   1440                  ResultCount++;
   1441                }
   1442              }
   1443            }
   1444          
   1445            // Calc the count and apply a max count.
   1446            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1447            {
   1448              count = 0;
   1449            }
   1450            else
   1451            {
   1452              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1453              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1454              {
   1455                count = ZDO_MAX_NWKDISC_ITEMS;
   1456              }
   1457          
   1458              // Move the list pointer up to the start index.
   1459              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1460              {
   1461                NetworkList = NetworkList->nextDesc;
   1462              }
   1463            }
   1464          
   1465            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1466                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1467                                zdappMgmtNwkDiscStartIndex,
   1468                                count,
   1469                                NetworkList,
   1470                                false );
   1471          
   1472            if ( ZSTACK_ROUTER_BUILD )
   1473            {
   1474              if ( newDesc != NULL )
   1475              {
   1476                osal_mem_free( newDesc );
   1477              }
   1478            }
   1479          
   1480            NLME_NwkDiscTerm();
   1481          }
   1482          #endif
   1483          
   1484          /*********************************************************************
   1485           * @fn          ZDO_ProcessMgmtRtgReq
   1486           *
   1487           * @brief       This function finishes the processing of the Management
   1488           *              Routing Request and generates the response.
   1489           *
   1490           *   Note:      This function will limit the number of items returned
   1491           *              to ZDO_MAX_RTG_ITEMS items.
   1492           *
   1493           * @param       inMsg - incoming message (request)
   1494           *
   1495           * @return      none
   1496           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1497          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1498          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   1499            byte x;
   1500            byte maxNumItems;
   1501            byte numItems = 0;
   \   00000E   7E00         MOV       R6,#0x0
   1502            uint8 *pBuf = NULL;
   \   000010   8E..         MOV       ?V6,R6
   \   000012   8E..         MOV       ?V7,R6
   1503            rtgItem_t *pList;
   1504            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL     ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   000017   35..         ADDC      A,?V3
   \   000019   F583         MOV       DPH,A
   \   00001B   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   00001E   FF           MOV       R7,A
   1505          
   1506            // Get the number of table items
   1507            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   00001F                ; Setup parameters for call to function NLME_GetRequest
   \   00001F   AC..         MOV       R4,?XSP + 0
   \   000021   AD..         MOV       R5,?XSP + 1
   \   000023   7A00         MOV       R2,#0x0
   \   000025   7B00         MOV       R3,#0x0
   \   000027   799D         MOV       R1,#-0x63
   \   000029   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1508          
   1509            if ( maxNumItems > StartIndex )
   \   00002C   85..82       MOV       DPL,?XSP + 0
   \   00002F   85..83       MOV       DPH,?XSP + 1
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F8           MOV       R0,A
   \   000034   EF           MOV       A,R7
   \   000035   C3           CLR       C
   \   000036   98           SUBB      A,R0
   \   000037   4003         JC        $+5
   \   000039   02....       LJMP      ??ZDO_ProcessMgmtRtgReq_0 & 0xFFFF
   1510            {
   1511              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   C3           CLR       C
   \   00003E   9F           SUBB      A,R7
   \   00003F   FE           MOV       R6,A
   1512          
   1513              // limit the size of the list
   1514              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   000040   C3           CLR       C
   \   000041   940B         SUBB      A,#0xb
   \   000043   4002         JC        ??ZDO_ProcessMgmtRtgReq_1
   1515              {
   1516                numItems = ZDO_MAX_RTG_ITEMS;
   \   000045   7E0A         MOV       R6,#0xa
   1517              }
   1518          
   1519              // Allocate the memory to build the table
   1520              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000047                ; Setup parameters for call to function osal_mem_alloc
   \   000047   EE           MOV       A,R6
   \   000048   75F007       MOV       B,#0x7
   \   00004B   A4           MUL       AB
   \   00004C   FA           MOV       R2,A
   \   00004D   ABF0         MOV       R3,B
   \   00004F   12....       LCALL     ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   000052   8A..         MOV       ?V6,R2
   \   000054   8B..         MOV       ?V7,R3
   1521          
   1522              if ( pBuf != NULL )
   \   000056   EA           MOV       A,R2
   \   000057   4B           ORL       A,R3
   \   000058   6079         JZ        ??ZDO_ProcessMgmtRtgReq_2
   1523              {
   1524                // Convert buffer to list
   1525                pList = (rtgItem_t *)pBuf;
   1526          
   1527                // Loop through items and build list
   1528                for ( x = 0; x < numItems; x++ )
   \   00005A   75..00       MOV       ?V4,#0x0
   \   00005D   801A         SJMP      ??ZDO_ProcessMgmtRtgReq_3
   1529                {
   1530                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1531          
   1532                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1533                  switch( pList->status )
   1534                  {
   1535                    case RT_ACTIVE:
   1536                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   1537                      break;
   1538          
   1539                    case RT_DISC:
   1540                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   1541                      break;
   1542          
   1543                    case RT_LINK_FAIL:
   1544                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   1545                      break;
   1546          
   1547                    case RT_INIT:
   1548                    case RT_REPAIR:
   1549                    default:
   1550                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   00005F   85..82       MOV       DPL,?V0
   \   000062   85..83       MOV       DPH,?V1
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   7403         MOV       A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   00006C   F0           MOVX      @DPTR,A
   1551                      break;
   1552                  }
   1553          
   1554                  // Increment pointer to next record
   1555                  pList++;
   \   00006D   E5..         MOV       A,?V0
   \   00006F   2407         ADD       A,#0x7
   \   000071   F5..         MOV       ?V0,A
   \   000073   5002         JNC       ??ZDO_ProcessMgmtRtgReq_6
   \   000075   05..         INC       ?V1
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   000077   05..         INC       ?V4
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   000079   E5..         MOV       A,?V4
   \   00007B   C3           CLR       C
   \   00007C   9E           SUBB      A,R6
   \   00007D   5056         JNC       ??ZDO_ProcessMgmtRtgReq_0
   \   00007F                ; Setup parameters for call to function NLME_GetRequest
   \   00007F   AC..         MOV       R4,?V0
   \   000081   AD..         MOV       R5,?V1
   \   000083   E5..         MOV       A,?V4
   \   000085   2F           ADD       A,R7
   \   000086   FA           MOV       R2,A
   \   000087   E4           CLR       A
   \   000088   3400         ADDC      A,#0x0
   \   00008A   FB           MOV       R3,A
   \   00008B   798B         MOV       R1,#-0x75
   \   00008D   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   000090   85..82       MOV       DPL,?V0
   \   000093   85..83       MOV       DPH,?V1
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   14           DEC       A
   \   00009D   6008         JZ        ??ZDO_ProcessMgmtRtgReq_7
   \   00009F   14           DEC       A
   \   0000A0   6013         JZ        ??ZDO_ProcessMgmtRtgReq_8
   \   0000A2   14           DEC       A
   \   0000A3   601F         JZ        ??ZDO_ProcessMgmtRtgReq_9
   \   0000A5   80B8         SJMP      ??ZDO_ProcessMgmtRtgReq_4
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   0000A7   85..82       MOV       DPL,?V0
   \   0000AA   85..83       MOV       DPH,?V1
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   E4           CLR       A
   \   0000B3   80B7         SJMP      ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   0000B5   85..82       MOV       DPL,?V0
   \   0000B8   85..83       MOV       DPH,?V1
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   7401         MOV       A,#0x1
   \   0000C2   80A8         SJMP      ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   0000C4   85..82       MOV       DPL,?V0
   \   0000C7   85..83       MOV       DPH,?V1
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   7402         MOV       A,#0x2
   \   0000D1   8099         SJMP      ??ZDO_ProcessMgmtRtgReq_5
   1556                }
   1557              }
   1558              else
   1559              {
   1560                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   0000D3   7E00         MOV       R6,#0x0
   1561              }
   1562            }
   1563          
   1564            // Send response
   1565            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1566                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000D5                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000D5   75..00       MOV       ?V0,#0x0
   \   0000D8   78..         MOV       R0,#?V0
   \   0000DA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DD   78..         MOV       R0,#?V6
   \   0000DF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E2   EE           MOV       A,R6
   \   0000E3   F5..         MOV       ?V0,A
   \   0000E5   78..         MOV       R0,#?V0
   \   0000E7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EA   EF           MOV       A,R7
   \   0000EB   F5..         MOV       ?V0,A
   \   0000ED   78..         MOV       R0,#?V0
   \   0000EF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F2   7405         MOV       A,#0x5
   \   0000F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   FD           MOV       R5,A
   \   0000F9   7C00         MOV       R4,#0x0
   \   0000FB   E5..         MOV       A,?V2
   \   0000FD   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_604:
   \   000100   35..         ADDC      A,?V3
   \   000102   FB           MOV       R3,A
   \   000103   E5..         MOV       A,?V2
   \   000105   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000108   35..         ADDC      A,?V3
   \   00010A   F583         MOV       DPH,A
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   F9           MOV       R1,A
   \   00010E   12....       LCALL     `??ZDP_MgmtRtgRsp::?relay`; Banked call to: ZDP_MgmtRtgRsp
   \   000111   7405         MOV       A,#0x5
   \   000113   12....       LCALL     ?DEALLOC_XSTACK8
   1567          
   1568            if ( pBuf != NULL )
   \   000116   E5..         MOV       A,?V6
   \   000118   45..         ORL       A,?V7
   \   00011A   6007         JZ        ??ZDO_ProcessMgmtRtgReq_10
   1569            {
   1570              osal_mem_free( pBuf );
   \   00011C                ; Setup parameters for call to function osal_mem_free
   \   00011C   AA..         MOV       R2,?V6
   \   00011E   AB..         MOV       R3,?V7
   \   000120   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1571            }
   1572          }
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   000123   7401         MOV       A,#0x1
   \   000125   12....       LCALL     ?DEALLOC_XSTACK8
   \   000128   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   22           RET
   1573          
   1574          /*********************************************************************
   1575           * @fn          ZDO_ProcessMgmtBindReq
   1576           *
   1577           * @brief       This function finishes the processing of the Management
   1578           *              Bind Request and generates the response.
   1579           *
   1580           *   Note:      This function will limit the number of items returned
   1581           *              to ZDO_MAX_BIND_ITEMS items.
   1582           *
   1583           * @param       inMsg - incoming message (request)
   1584           *
   1585           * @return      none
   1586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine215_0
   \   000006                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1587          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1588          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   1589          #if defined ( REFLECTOR )
   1590            byte x;
   1591            uint16 maxNumItems;
   1592            uint16 numItems;
   1593            uint8 *pBuf = NULL;
   \   00000E   75..00       MOV       ?V8,#0x0
   \   000011   75..00       MOV       ?V9,#0x0
   1594            apsBindingItem_t *pList;
   1595            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL     ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   000017   35..         ADDC      A,?V5
   \   000019   F583         MOV       DPH,A
   \   00001B   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   00001E   F5..         MOV       ?V2,A
   1596            uint8 status;
   1597          
   1598            // Get the number of table items
   1599            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   000020                ; Setup parameters for call to function APSME_GetRequest
   \   000020   AC..         MOV       R4,?XSP + 0
   \   000022   AD..         MOV       R5,?XSP + 1
   \   000024   7A00         MOV       R2,#0x0
   \   000026   7B00         MOV       R3,#0x0
   \   000028   79A3         MOV       R1,#-0x5d
   \   00002A   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1600          
   1601            if ( maxNumItems > StartIndex )
   \   00002D   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   000030   C3           CLR       C
   \   000031   E5..         MOV       A,?V2
   \   000033   98           SUBB      A,R0
   \   000034   E4           CLR       A
   \   000035   99           SUBB      A,R1
   \   000036   5074         JNC       ??ZDO_ProcessMgmtBindReq_0
   1602            {
   1603              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000038   85..82       MOV       DPL,?XSP + 0
   \   00003B   85..83       MOV       DPH,?XSP + 1
   \   00003E   A8..         MOV       R0,?V2
   \   000040   E0           MOVX      A,@DPTR
   \   000041   C3           CLR       C
   \   000042   98           SUBB      A,R0
   \   000043   FE           MOV       R6,A
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   9400         SUBB      A,#0x0
   \   000048   FF           MOV       R7,A
   1604            }
   1605            else
   1606            {
   1607              numItems = 0;
   1608            }
   1609          
   1610            // limit the size of the list
   1611            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   000049   C3           CLR       C
   \   00004A   EE           MOV       A,R6
   \   00004B   9404         SUBB      A,#0x4
   \   00004D   EF           MOV       A,R7
   \   00004E   9400         SUBB      A,#0x0
   \   000050   4006         JC        ??ZDO_ProcessMgmtBindReq_1
   1612            {
   1613              numItems = ZDO_MAX_BIND_ITEMS;
   \   000052   7E03         MOV       R6,#0x3
   \   000054   7F00         MOV       R7,#0x0
   \   000056   8004         SJMP      ??ZDO_ProcessMgmtBindReq_2
   1614            }
   1615          
   1616            // Allocate the memory to build the table
   1617            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   000058   EE           MOV       A,R6
   \   000059   4F           ORL       A,R7
   \   00005A   6050         JZ        ??ZDO_ProcessMgmtBindReq_0
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   00005C                ; Setup parameters for call to function osal_mem_alloc
   \   00005C   EE           MOV       A,R6
   \   00005D   FA           MOV       R2,A
   \   00005E   EF           MOV       A,R7
   \   00005F   FB           MOV       R3,A
   \   000060   EA           MOV       A,R2
   \   000061   75F015       MOV       B,#0x15
   \   000064   A4           MUL       AB
   \   000065   FA           MOV       R2,A
   \   000066   A8F0         MOV       R0,B
   \   000068   75F015       MOV       B,#0x15
   \   00006B   EB           MOV       A,R3
   \   00006C   A4           MUL       AB
   \   00006D   28           ADD       A,R0
   \   00006E   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000071   8A..         MOV       ?V8,R2
   \   000073   8B..         MOV       ?V9,R3
   \   000075   EA           MOV       A,R2
   \   000076   4B           ORL       A,R3
   \   000077   6033         JZ        ??ZDO_ProcessMgmtBindReq_0
   1618            {
   1619              status = ZSuccess;
   \   000079   75..00       MOV       ?V3,#0x0
   1620          
   1621              // Convert buffer to list
   1622              pList = (apsBindingItem_t *)pBuf;
   1623          
   1624              // Loop through items and build list
   1625              for ( x = 0; x < numItems; x++ )
   \   00007C   75..00       MOV       ?V6,#0x0
   \   00007F   801F         SJMP      ??ZDO_ProcessMgmtBindReq_3
   1626              {
   1627                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   000081                ; Setup parameters for call to function APSME_GetRequest
   \   000081   AC..         MOV       R4,?V0
   \   000083   AD..         MOV       R5,?V1
   \   000085   A8..         MOV       R0,?V2
   \   000087   E5..         MOV       A,?V6
   \   000089   28           ADD       A,R0
   \   00008A   FA           MOV       R2,A
   \   00008B   E4           CLR       A
   \   00008C   3400         ADDC      A,#0x0
   \   00008E   FB           MOV       R3,A
   \   00008F   79A2         MOV       R1,#-0x5e
   \   000091   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1628                pList++;
   \   000094   E5..         MOV       A,?V0
   \   000096   2415         ADD       A,#0x15
   \   000098   F5..         MOV       ?V0,A
   \   00009A   5002         JNC       ??ZDO_ProcessMgmtBindReq_5
   \   00009C   05..         INC       ?V1
   1629              }
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   00009E   05..         INC       ?V6
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   0000A0   C3           CLR       C
   \   0000A1   E5..         MOV       A,?V6
   \   0000A3   9E           SUBB      A,R6
   \   0000A4   E4           CLR       A
   \   0000A5   9F           SUBB      A,R7
   \   0000A6   40D9         JC        ??ZDO_ProcessMgmtBindReq_4
   \   0000A8   EE           MOV       A,R6
   \   0000A9   F9           MOV       R1,A
   \   0000AA   8005         SJMP      ??ZDO_ProcessMgmtBindReq_6
   1630          
   1631            }
   1632            else
   1633            {
   1634              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   0000AC   75..8B       MOV       ?V3,#-0x75
   1635              numItems = 0;
   \   0000AF   7900         MOV       R1,#0x0
   1636            }
   1637          
   1638            // Send response
   1639            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1640                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   0000B1                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000B1   75..00       MOV       ?V0,#0x0
   \   0000B4   78..         MOV       R0,#?V0
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B9   78..         MOV       R0,#?V8
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BE   E9           MOV       A,R1
   \   0000BF   F5..         MOV       ?V0,A
   \   0000C1   78..         MOV       R0,#?V0
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C6   E5..         MOV       A,?V2
   \   0000C8   F5..         MOV       ?V0,A
   \   0000CA   78..         MOV       R0,#?V0
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CF   7405         MOV       A,#0x5
   \   0000D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   FD           MOV       R5,A
   \   0000D6   AC..         MOV       R4,?V3
   \   0000D8   E5..         MOV       A,?V4
   \   0000DA   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_605:
   \   0000DD   35..         ADDC      A,?V5
   \   0000DF   FB           MOV       R3,A
   \   0000E0   E5..         MOV       A,?V4
   \   0000E2   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   0000E5   35..         ADDC      A,?V5
   \   0000E7   F583         MOV       DPH,A
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   F9           MOV       R1,A
   \   0000EB   12....       LCALL     `??ZDP_MgmtBindRsp::?relay`; Banked call to: ZDP_MgmtBindRsp
   \   0000EE   7405         MOV       A,#0x5
   \   0000F0   12....       LCALL     ?DEALLOC_XSTACK8
   1641          
   1642            if ( pBuf )
   \   0000F3   E5..         MOV       A,?V8
   \   0000F5   45..         ORL       A,?V9
   \   0000F7   6007         JZ        ??ZDO_ProcessMgmtBindReq_7
   1643            {
   1644              osal_mem_free( pBuf );
   \   0000F9                ; Setup parameters for call to function osal_mem_free
   \   0000F9   AA..         MOV       R2,?V8
   \   0000FB   AB..         MOV       R3,?V9
   \   0000FD   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1645            }
   1646          #else
   1647            (void)inMsg;
   1648          #endif
   1649          }
   \                     ??ZDO_ProcessMgmtBindReq_7:
   \   000100   7402         MOV       A,#0x2
   \   000102                REQUIRE ?Subroutine6
   \   000102                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine216_0
   \   000003                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   7F0A         MOV       R7,#0xa
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine217_0
   \   000001                ; // Fall through to label ??Subroutine217_0
   1650          
   1651          /*********************************************************************
   1652           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1653           *
   1654           * @brief       This function finishes the processing of the Management
   1655           *              Direct Join Request and generates the response.
   1656           *
   1657           * @param       inMsg - incoming message (request)
   1658           *
   1659           * @return      none
   1660           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1661          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1662          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine126 & 0xFFFF
   1663            uint8 *deviceAddr;
   1664            uint8 capInfo;
   1665            uint8 stat;
   1666          
   1667            // Parse the message
   1668            deviceAddr = inMsg->asdu;
   1669            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1670          
   1671            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \                     ??CrossCallReturnLabel_384:
   \   00000D   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000010                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000010   8A82         MOV       DPL,R2
   \   000012   F583         MOV       DPH,A
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F9           MOV       R1,A
   \   00001E   12....       LCALL     `??NLME_DirectJoinRequest::?relay`; Banked call to: NLME_DirectJoinRequest
   \   000021   E9           MOV       A,R1
   \   000022   85..82       MOV       DPL,?XSP + 0
   \   000025   85..83       MOV       DPH,?XSP + 1
   \   000028   F0           MOVX      @DPTR,A
   1672          
   1673            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000029                ; Setup parameters for call to function ZDP_SendData
   \   000029   75..00       MOV       ?V0,#0x0
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000031   7401         MOV       A,#0x1
   \   000033   12....       LCALL     ?XSTACK_DISP100_8
   \   000036   88..         MOV       ?V0,R0
   \   000038   89..         MOV       ?V1,R1
   \   00003A   78..         MOV       R0,#?V0
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   75..35       MOV       ?V0,#0x35
   \   000042   75..80       MOV       ?V1,#-0x80
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
   1674          }
   \   000050                REQUIRE ?Subroutine9
   \   000050                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7401         MOV       A,#0x1
   \   000002   02....       LJMP      ??Subroutine205_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000004                REQUIRE ??Subroutine220_0
   \   000004                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine221_0
   \   000001                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   12....       LCALL     ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   7901         MOV       R1,#0x1
   \   000002                REQUIRE ??Subroutine222_0
   \   000002                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000009   22           RET
   1675          
   1676          /*********************************************************************
   1677           * @fn          ZDO_ProcessMgmtLeaveReq
   1678           *
   1679           * @brief       This function processes a Management Leave Request
   1680           *              and generates the response.
   1681           *
   1682           * @param       inMsg - incoming message (request)
   1683           *
   1684           * @return      none
   1685           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1686          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1687          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine131 & 0xFFFF
   1688            NLME_LeaveReq_t req;
   1689            ZStatus_t       status;
   1690            uint8           option;
   1691            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_549:
   \   00000D   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   000010   FE           MOV       R6,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FF           MOV       R7,A
   1692          
   1693            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1694                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \   000014                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000014   EE           MOV       A,R6
   \   000015   FA           MOV       R2,A
   \   000016   EF           MOV       A,R7
   \   000017   FB           MOV       R3,A
   \   000018   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00001B   E9           MOV       A,R1
   \   00001C   600F         JZ        ??ZDO_ProcessMgmtLeaveReq_0
   \   00001E                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001E   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000021                ; Setup parameters for call to function sAddrExtCmp
   \   000021   EE           MOV       A,R6
   \   000022   FA           MOV       R2,A
   \   000023   EF           MOV       A,R7
   \   000024   FB           MOV       R3,A
   \   000025   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000028   E9           MOV       A,R1
   \   000029   6401         XRL       A,#0x1
   \   00002B   700A         JNZ       ??ZDO_ProcessMgmtLeaveReq_1
   1695            {
   1696              // Remove this device
   1697              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   00002D   7401         MOV       A,#0x1
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   E4           CLR       A
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   8009         SJMP      ??ZDO_ProcessMgmtLeaveReq_2
   1698            }
   1699            else
   1700            {
   1701              // Remove child device
   1702              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   000037   7401         MOV       A,#0x1
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   EE           MOV       A,R6
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   EF           MOV       A,R7
   1703            }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000040   12....       LCALL     ?Subroutine22 & 0xFFFF
   1704          
   1705            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_22:
   \   000043   F8           MOV       R0,A
   1706            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   000044   A2E6         MOV       C,0xE0 /* A   */.6
   \   000046   5008         JNC       ??ZDO_ProcessMgmtLeaveReq_3
   1707            {
   1708              req.removeChildren = TRUE;
   \   000048   7403         MOV       A,#0x3
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   7401         MOV       A,#0x1
   \   00004F   F0           MOVX      @DPTR,A
   1709            }
   1710          
   1711            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000050   E8           MOV       A,R0
   \   000051   A2E7         MOV       C,0xE0 /* A   */.7
   \   000053   5008         JNC       ??ZDO_ProcessMgmtLeaveReq_4
   1712            {
   1713               req.rejoin = TRUE;
   \   000055   7404         MOV       A,#0x4
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   7401         MOV       A,#0x1
   \   00005C   F0           MOVX      @DPTR,A
   1714            }
   1715          
   1716            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   00005D   7405         MOV       A,#0x5
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   E4           CLR       A
   \   000063   F0           MOVX      @DPTR,A
   1717          
   1718            status = NLME_LeaveReq( &req );
   \   000064                ; Setup parameters for call to function NLME_LeaveReq
   \   000064   04           INC       A
   \   000065   12....       LCALL     ?XSTACK_DISP101_8
   \   000068   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00006B   E9           MOV       A,R1
   \   00006C   85..82       MOV       DPL,?XSP + 0
   \   00006F   85..83       MOV       DPH,?XSP + 1
   \   000072   F0           MOVX      @DPTR,A
   1719          
   1720            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   000073                ; Setup parameters for call to function ZDP_SendData
   \   000073   75..00       MOV       ?V2,#0x0
   \   000076   78..         MOV       R0,#?V2
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007B   7401         MOV       A,#0x1
   \   00007D   12....       LCALL     ?XSTACK_DISP100_8
   \   000080   88..         MOV       ?V2,R0
   \   000082   89..         MOV       ?V3,R1
   \   000084   78..         MOV       R0,#?V2
   \   000086   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000089   75..34       MOV       ?V2,#0x34
   \   00008C   75..80       MOV       ?V3,#-0x80
   \   00008F   78..         MOV       R0,#?V2
   \   000091   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000094   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000097   12....       LCALL     ?DEALLOC_XSTACK8
   1721          }
   \   00009A   7406         MOV       A,#0x6
   \   00009C   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   12....       LCALL     ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET
   1722          
   1723          
   1724          /*********************************************************************
   1725           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1726           *
   1727           * @brief       This function processes a Management Permit Join Request
   1728           *              and generates the response.
   1729           *
   1730           * @param       inMsg - incoming message (request)
   1731           *
   1732           * @return      none
   1733           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1734          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1735          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine126 & 0xFFFF
   1736            uint8 stat;
   1737            uint8 duration;
   1738            uint8 tcsig;
   1739          
   1740            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   1741            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   1742          
   1743            // Set the network layer permit join duration
   1744            stat = (byte) NLME_PermitJoiningRequest( duration );
   \                     ??CrossCallReturnLabel_385:
   \   00000D   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000010   F9           MOV       R1,A
   \   000011   12....       LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   000014   E9           MOV       A,R1
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   12....       LCALL     ?Subroutine31 & 0xFFFF
   1745          
   1746            // Handle the Trust Center Significance
   1747            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1748            {
   1749              if ( tcsig == TRUE )
   1750              {
   1751                ZDSecMgrPermitJoining( duration );
   1752              }
   1753            }
   1754          
   1755            // Send a response if unicast
   1756            if ( !inMsg->wasBroadcast )
   \                     ??CrossCallReturnLabel_40:
   \   00001E   7027         JNZ       ??ZDO_ProcessMgmtPermitJoinReq_0
   1757            {
   1758              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000020                ; Setup parameters for call to function ZDP_SendData
   \   000020   75..00       MOV       ?V0,#0x0
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000028   7401         MOV       A,#0x1
   \   00002A   12....       LCALL     ?XSTACK_DISP100_8
   \   00002D   88..         MOV       ?V0,R0
   \   00002F   89..         MOV       ?V1,R1
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   75..36       MOV       ?V0,#0x36
   \   000039   75..80       MOV       ?V1,#-0x80
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   12....       LCALL     ?Subroutine115 & 0xFFFF
   1759            }
   \                     ??CrossCallReturnLabel_391:
   \   000044   12....       LCALL     ?DEALLOC_XSTACK8
   1760          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   000047   02....       LJMP      ?Subroutine9 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   240B         ADD       A,#0xb
   \   000004   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_627:
   \   000007   22           RET
   1761          
   1762          /*
   1763           * This function stub allows the next higher layer to be notified of
   1764           * a permit joining timeout.
   1765           */
   1766          /*********************************************************************
   1767           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1768           *
   1769           * @brief       This function stub allows the next higher layer to be
   1770           *              notified of a permit joining timeout. Currently, this
   1771           *              directly bypasses the APS layer.
   1772           *
   1773           * @param       none
   1774           *
   1775           * @return      none
   1776           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1777          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1778          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1779            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1780            // Currently, only the ZDSecMgr needs to be notified
   1781            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1782            {
   1783              ZDSecMgrPermitJoiningTimeout();
   1784            }
   1785            #endif
   1786          }
   \   000000   02....       LJMP      ?BRET
   1787          
   1788          /*********************************************************************
   1789           * @fn          ZDO_ProcessUserDescReq
   1790           *
   1791           * @brief       This function finishes the processing of the User
   1792           *              Descriptor Request and generates the response.
   1793           *
   1794           * @param       inMsg - incoming message (request)
   1795           *
   1796           * @return      none
   1797           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1798          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1799          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1800            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000E   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000011   F5..         MOV       ?V0,A
   \   000013   E4           CLR       A
   \   000014   39           ADDC      A,R1
   \   000015   F5..         MOV       ?V1,A
   1801            UserDescriptorFormat_t userDesc;
   1802          
   1803            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1804                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000017   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   6A           XRL       A,R2
   \   00001C   7003         JNZ       ??ZDO_ProcessUserDescReq_0
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   69           XRL       A,R1
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000021   7052         JNZ       ??ZDO_ProcessUserDescReq_1
   \   000023                ; Setup parameters for call to function osal_nv_read
   \   000023   A8..         MOV       R0,?XSP + 0
   \   000025   A9..         MOV       R1,?XSP + 1
   \   000027   88..         MOV       ?V2,R0
   \   000029   89..         MOV       ?V3,R1
   \   00002B   78..         MOV       R0,#?V2
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75..11       MOV       ?V2,#0x11
   \   000033   75..00       MOV       ?V3,#0x0
   \   000036   78..         MOV       R0,#?V2
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7C00         MOV       R4,#0x0
   \   00003D   7D00         MOV       R5,#0x0
   \   00003F   7A81         MOV       R2,#-0x7f
   \   000041   7B00         MOV       R3,#0x0
   \   000043   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000046   7404         MOV       A,#0x4
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004B   E9           MOV       A,R1
   \   00004C   7027         JNZ       ??ZDO_ProcessUserDescReq_1
   1805            {
   1806              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   00004E                ; Setup parameters for call to function ZDP_UserDescRsp
   \   00004E   75..00       MOV       ?V2,#0x0
   \   000051   78..         MOV       R0,#?V2
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000056   7401         MOV       A,#0x1
   \   000058   12....       LCALL     ?XSTACK_DISP100_8
   \   00005B   88..         MOV       ?V2,R0
   \   00005D   89..         MOV       ?V3,R1
   \   00005F   78..         MOV       R0,#?V2
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   AC..         MOV       R4,?V0
   \   000066   AD..         MOV       R5,?V1
   \   000068   12....       LCALL     ?Subroutine116 & 0xFFFF
   1807            }
   \                     ??CrossCallReturnLabel_186:
   \   00006B   12....       LCALL     `??ZDP_UserDescRsp::?relay`; Banked call to: ZDP_UserDescRsp
   \   00006E   7403         MOV       A,#0x3
   \   000070   12....       LCALL     ?DEALLOC_XSTACK8
   \   000073   8021         SJMP      ??ZDO_ProcessUserDescReq_2
   1808            else
   1809            {
   1810              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1811                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   000075                ; Setup parameters for call to function ZDP_GenericRsp
   \   000075   75..11       MOV       ?V2,#0x11
   \   000078   75..80       MOV       ?V3,#-0x80
   \   00007B   78..         MOV       R0,#?V2
   \   00007D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000080   78..         MOV       R0,#?V0
   \   000082   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000085   12....       LCALL     ?Subroutine123 & 0xFFFF
   1812            }
   \                     ??CrossCallReturnLabel_433:
   \   000088   FD           MOV       R5,A
   \   000089   7C84         MOV       R4,#-0x7c
   \   00008B   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   00008E   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000091   7404         MOV       A,#0x4
   \   000093   12....       LCALL     ?DEALLOC_XSTACK8
   1813          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   000096   7411         MOV       A,#0x11
   \   000098   02....       LJMP      ?Subroutine1 & 0xFFFF
   1814          
   1815          /*********************************************************************
   1816           * @fn          ZDO_ProcessUserDescSet
   1817           *
   1818           * @brief       This function finishes the processing of the User
   1819           *              Descriptor Set and generates the response.
   1820           *
   1821           * @param       inMsg - incoming message (request)
   1822           *
   1823           * @return      none
   1824           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1825          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1826          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1827            uint8 *msg;
   1828            uint16 aoi;
   1829            UserDescriptorFormat_t userDesc;
   1830            uint8 outMsg[3];
   1831            uint8 status;
   1832          
   1833            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_553:
   \   000011   12....       LCALL     ?Subroutine84 & 0xFFFF
   1834            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_131:
   \   000014   FA           MOV       R2,A
   \   000015   E4           CLR       A
   \   000016   CA           XCH       A,R2
   \   000017   FB           MOV       R3,A
   \   000018   EC           MOV       A,R4
   \   000019   2A           ADD       A,R2
   \   00001A   F5..         MOV       ?V0,A
   1835          
   1836            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   00001C   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6C           XRL       A,R4
   \   000021   7003         JNZ       ??ZDO_ProcessUserDescSet_0
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6B           XRL       A,R3
   \                     ??ZDO_ProcessUserDescSet_0:
   \   000026   6003         JZ        $+5
   \   000028   02....       LJMP      ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1837            {
   1838              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   00002B   8882         MOV       DPL,R0
   \   00002D   8983         MOV       DPH,R1
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   9410         SUBB      A,#0x10
   \   000034   500F         JNC       ??ZDO_ProcessUserDescSet_2
   \   000036   8882         MOV       DPL,R0
   \   000038   8983         MOV       DPH,R1
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   85..82       MOV       DPL,?XSP + 0
   \   000040   85..83       MOV       DPH,?XSP + 1
   \   000043   8008         SJMP      ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   000045   85..82       MOV       DPL,?XSP + 0
   \   000048   85..83       MOV       DPH,?XSP + 1
   \   00004B   7410         MOV       A,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   C0E0         PUSH      A
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   D0E0         POP       A
   \   000058   12....       LCALL     ?Subroutine38 & 0xFFFF
   1839              msg ++;  // increment one for the length field
   1840          
   1841              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_56:
   \   00005B   A982         MOV       R1,DPL
   \   00005D   AA83         MOV       R2,DPH
   \   00005F   89..         MOV       ?V4,R1
   \   000061   8A..         MOV       ?V5,R2
   \   000063   75..00       MOV       ?V6,#0x0
   \   000066   78..         MOV       R0,#?V4
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006B   7407         MOV       A,#0x7
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   E0           MOVX      A,@DPTR
   \   000071   FC           MOV       R4,A
   \   000072   7D00         MOV       R5,#0x0
   \   000074   7408         MOV       A,#0x8
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   AA82         MOV       R2,DPL
   \   00007B   AB83         MOV       R3,DPH
   \   00007D   12....       LCALL     ??Subroutine269_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_648:
   \   000080   12....       LCALL     ?DEALLOC_XSTACK8
   1842              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   000083                ; Setup parameters for call to function osal_nv_write
   \   000083   7404         MOV       A,#0x4
   \   000085   12....       LCALL     ?XSTACK_DISP100_8
   \   000088   88..         MOV       ?V2,R0
   \   00008A   89..         MOV       ?V3,R1
   \   00008C   78..         MOV       R0,#?V2
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000091   75..11       MOV       ?V2,#0x11
   \   000094   75..00       MOV       ?V3,#0x0
   \   000097   78..         MOV       R0,#?V2
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009C   7C00         MOV       R4,#0x0
   \   00009E   7D00         MOV       R5,#0x0
   \   0000A0   7A81         MOV       R2,#-0x7f
   \   0000A2   7B00         MOV       R3,#0x0
   \   0000A4   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000A7   7404         MOV       A,#0x4
   \   0000A9   12....       LCALL     ?DEALLOC_XSTACK8
   1843              if ( userDesc.len != 0 )
   \   0000AC   7404         MOV       A,#0x4
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   0000B5   6005         JZ        ??ZDO_ProcessUserDescSet_4
   1844              {
   1845                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   D2E4         SETB      0xE0 /* A   */.4
   \   0000BA   8003         SJMP      ??ZDO_ProcessUserDescSet_5
   1846              }
   1847              else
   1848              {
   1849                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   C2E4         CLR       0xE0 /* A   */.4
   1850              }
   1851          
   1852              status = ZDP_SUCCESS;
   1853            }
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000BF   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000C2   E4           CLR       A
   \   0000C3   8008         SJMP      ??ZDO_ProcessUserDescSet_6
   1854            else
   1855            {
   1856              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000C5   85..82       MOV       DPL,?XSP + 0
   \   0000C8   85..83       MOV       DPH,?XSP + 1
   \   0000CB   7484         MOV       A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000CD   F0           MOVX      @DPTR,A
   1857            }
   1858          
   1859            outMsg[0] = status;
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   C0E0         PUSH      A
   \   0000D1   7401         MOV       A,#0x1
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   D0E0         POP       A
   \   0000D8   F0           MOVX      @DPTR,A
   1860            outMsg[1] = LO_UINT16( aoi );
   \   0000D9   7402         MOV       A,#0x2
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   E5..         MOV       A,?V0
   \   0000E0   F0           MOVX      @DPTR,A
   1861            outMsg[2] = LO_UINT16( aoi );
   \   0000E1   7403         MOV       A,#0x3
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   E5..         MOV       A,?V0
   \   0000E8   F0           MOVX      @DPTR,A
   1862          
   1863            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1864                         inMsg->SecurityUse );
   \   0000E9                ; Setup parameters for call to function ZDP_SendData
   \   0000E9   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   0000EC   3F           ADDC      A,R7
   \   0000ED   12....       LCALL     ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   0000F0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F3   7402         MOV       A,#0x2
   \   0000F5   12....       LCALL     ?XSTACK_DISP100_8
   \   0000F8   88..         MOV       ?V0,R0
   \   0000FA   89..         MOV       ?V1,R1
   \   0000FC   78..         MOV       R0,#?V0
   \   0000FE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000101   75..14       MOV       ?V0,#0x14
   \   000104   75..80       MOV       ?V1,#-0x80
   \   000107   78..         MOV       R0,#?V0
   \   000109   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010C   7903         MOV       R1,#0x3
   \   00010E   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   000111   12....       LCALL     ?DEALLOC_XSTACK8
   1865          }
   \   000114   7415         MOV       A,#0x15
   \   000116                REQUIRE ?Subroutine7
   \   000116                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine226_0
   \   000003                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine227_0
   \   000001                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   240E         ADD       A,#0xe
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine194:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
   1866          
   1867          /*********************************************************************
   1868           * @fn          ZDO_ProcessDeviceAnnce
   1869           *
   1870           * @brief       This function processes a device annouce message.
   1871           *
   1872           * @param       inMsg - incoming message
   1873           *
   1874           * @return      none
   1875           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   AC82         MOV       R4,DPL
   \   000002   AD83         MOV       R5,DPH
   \   000004                REQUIRE ??Subroutine223_0
   \   000004                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine224_0
   \   000006                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1876          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   1877          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV       A,#-0x20
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1878            ZDO_DeviceAnnce_t Annce;
   1879            AddrMgrEntry_t addrEntry;
   1880            uint8 parentExt[Z_EXTADDR_LEN];
   1881          
   1882            // Parse incoming message
   1883            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000E                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   12....       LCALL     `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   1884          
   1885            if ( ZSTACK_END_DEVICE_BUILD )
   1886            {
   1887              // Make sure the message didn't come from myself - end device only
   1888              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   1889              {
   1890                return;
   1891              }
   1892            }
   1893          
   1894          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1895            // Clean up the neighbor table
   1896            nwkNeighborRemoveAllStranded();
   \   000015                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   000015   12....       LCALL     `??nwkNeighborRemoveAllStranded::?relay`; Banked call to: nwkNeighborRemoveAllStranded
   1897          
   1898            // If address conflict is detected, no need to update the address manager
   1899            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   000018                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   000018   7402         MOV       A,#0x2
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   000020   12....       LCALL     `??NLME_CheckNewAddrSet::?relay`; Banked call to: NLME_CheckNewAddrSet
   \   000023   E9           MOV       A,R1
   \   000024   6401         XRL       A,#0x1
   \   000026   7003         JNZ       $+5
   \   000028   02....       LJMP      ??ZDO_ProcessDeviceAnnce_0 & 0xFFFF
   1900            {
   1901              return;
   1902            }
   1903          #endif
   1904          
   1905          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1906            // Check for parent's address
   1907            NLME_GetCoordExtAddr( parentExt );
   \   00002B                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   00002B   7418         MOV       A,#0x18
   \   00002D   12....       LCALL     ?XSTACK_DISP101_8
   \   000030   12....       LCALL     `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   1908            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   000033                ; Setup parameters for call to function sAddrExtCmp
   \   000033   7402         MOV       A,#0x2
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   AC82         MOV       R4,DPL
   \   00003A   AD83         MOV       R5,DPH
   \   00003C   7418         MOV       A,#0x18
   \   00003E   12....       LCALL     ?XSTACK_DISP101_8
   \   000041   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000044   E9           MOV       A,R1
   \   000045   602D         JZ        ??ZDO_ProcessDeviceAnnce_1
   1909            {
   1910              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   000047                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000047   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00004A   8A..         MOV       ?V0,R2
   \   00004C   8B..         MOV       ?V1,R3
   \   00004E   A8..         MOV       R0,?V0
   \   000050   A9..         MOV       R1,?V1
   \   000052   85..82       MOV       DPL,?XSP + 0
   \   000055   85..83       MOV       DPH,?XSP + 1
   \   000058   E0           MOVX      A,@DPTR
   \   000059   68           XRL       A,R0
   \   00005A   7003         JNZ       ??ZDO_ProcessDeviceAnnce_2
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   69           XRL       A,R1
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   00005F   6013         JZ        ??ZDO_ProcessDeviceAnnce_1
   1911              {
   1912                // Set the Parent's MAC's new short address
   1913                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   000061   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   000064   90....       MOV       DPTR,#_NIB + 23
   \   000067   E8           MOV       A,R0
   \   000068   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   1914                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \                     ??CrossCallReturnLabel_588:
   \   00006B                ; Setup parameters for call to function ZMacSetReq
   \   00006B   7A..         MOV       R2,#(_NIB + 23) & 0xff
   \   00006D   7B..         MOV       R3,#((_NIB + 23) >> 8) & 0xff
   \   00006F   794B         MOV       R1,#0x4b
   \   000071   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1915              }
   1916            }
   1917          
   1918            if ( ZSTACK_ROUTER_BUILD )
   1919            {
   1920              // If the device annce comes from a end device child that has moved
   1921              // to another parent, remove it from associated device list
   1922          
   1923              // If the dev annce is coming from other device's children,
   1924              // (The dev annce from its own children shall be unicast to itself,
   1925              // So check the mac destination address)
   1926              // Remove it from the associated device list. If it is not
   1927              // a child, no action will be taken in AssocRemove() anyway.
   1928              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   000074                ; Setup parameters for call to function NLME_GetShortAddr
   \   000074   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000077   EE           MOV       A,R6
   \   000078   2411         ADD       A,#0x11
   \   00007A   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   00007D   68           XRL       A,R0
   \   00007E   7003         JNZ       ??ZDO_ProcessDeviceAnnce_3
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   69           XRL       A,R1
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   000083   603A         JZ        ??ZDO_ProcessDeviceAnnce_4
   1929              {
   1930                associated_devices_t *dev_ptr;
   1931          
   1932                // If it's an end device child
   1933                dev_ptr = AssocGetWithExt( Annce.extAddr );
   \   000085                ; Setup parameters for call to function AssocGetWithExt
   \   000085   7402         MOV       A,#0x2
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   AA82         MOV       R2,DPL
   \   00008C   AB83         MOV       R3,DPH
   \   00008E   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000091   8B..         MOV       ?V1,R3
   \   000093   A9..         MOV       R1,?V1
   1934                if ( dev_ptr )
   \   000095   EA           MOV       A,R2
   \   000096   49           ORL       A,R1
   \   000097   6026         JZ        ??ZDO_ProcessDeviceAnnce_4
   1935                {
   1936                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   1937                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   \   000099   8A82         MOV       DPL,R2
   \   00009B   8B83         MOV       DPH,R3
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   6401         XRL       A,#0x1
   \   0000A4   600D         JZ        ??ZDO_ProcessDeviceAnnce_5
   \   0000A6   8A82         MOV       DPL,R2
   \   0000A8   8B83         MOV       DPH,R3
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   6402         XRL       A,#0x2
   \   0000B1   700C         JNZ       ??ZDO_ProcessDeviceAnnce_4
   1938                  {
   1939                    AssocRemove( Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_5:
   \   0000B3                ; Setup parameters for call to function AssocRemove
   \   0000B3   7402         MOV       A,#0x2
   \   0000B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B8   AA82         MOV       R2,DPL
   \   0000BA   AB83         MOV       R3,DPH
   \   0000BC   12....       LCALL     `??AssocRemove::?relay`; Banked call to: AssocRemove
   1940                  }
   1941                }
   1942              }
   1943          
   1944              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   0000BF                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000BF   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   0000C2   85..82       MOV       DPL,?XSP + 0
   \   0000C5   85..83       MOV       DPH,?XSP + 1
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   68           XRL       A,R0
   \   0000CA   7003         JNZ       ??ZDO_ProcessDeviceAnnce_6
   \   0000CC   A3           INC       DPTR
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   69           XRL       A,R1
   \                     ??ZDO_ProcessDeviceAnnce_6:
   \   0000CF   6011         JZ        ??ZDO_ProcessDeviceAnnce_7
   1945              {
   1946                // If an associated device is found with matched extended Address,
   1947                // update its short address
   1948                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   \   0000D1                ; Setup parameters for call to function AssocChangeNwkAddr
   \   0000D1   7402         MOV       A,#0x2
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   0000D9   12....       LCALL     `??AssocChangeNwkAddr::?relay`; Banked call to: AssocChangeNwkAddr
   \   0000DC   E9           MOV       A,R1
   \   0000DD   6003         JZ        ??ZDO_ProcessDeviceAnnce_7
   1949                {
   1950                  // Set event to save NV
   1951                  ZDApp_NVUpdate();
   \   0000DF                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000DF   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1952                }
   1953              }
   1954            }
   1955          
   1956            // Update the neighbor table
   1957            nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_7:
   \   0000E2                ; Setup parameters for call to function nwkNeighborUpdateNwkAddr
   \   0000E2   7402         MOV       A,#0x2
   \   0000E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E7   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   0000EA   12....       LCALL     `??nwkNeighborUpdateNwkAddr::?relay`; Banked call to: nwkNeighborUpdateNwkAddr
   1958          
   1959            // Assume that the device has moved, remove existing routing entries
   1960            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \   0000ED                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000ED   7900         MOV       R1,#0x0
   \   0000EF   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   0000F2   12....       LCALL     `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   1961          
   1962          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   1963          
   1964            // Fill in the extended address in address manager if we don't have it already.
   1965            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0000F5   740B         MOV       A,#0xb
   \   0000F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FA   E4           CLR       A
   \   0000FB   12....       LCALL     ?Subroutine27 & 0xFFFF
   1966            addrEntry.nwkAddr = Annce.nwkAddr;
   \                     ??CrossCallReturnLabel_34:
   \   0000FE   740C         MOV       A,#0xc
   \   000100   12....       LCALL     ?XSTACK_DISP0_8
   \   000103   E8           MOV       A,R0
   \   000104   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   1967            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_589:
   \   000107                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000107   740B         MOV       A,#0xb
   \   000109   12....       LCALL     ?XSTACK_DISP101_8
   \   00010C   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00010F   E9           MOV       A,R1
   \   000110   603F         JZ        ??ZDO_ProcessDeviceAnnce_8
   1968            {
   1969              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   000112                ; Setup parameters for call to function osal_memset
   \   000112   7C08         MOV       R4,#0x8
   \   000114   7D00         MOV       R5,#0x0
   \   000116   7900         MOV       R1,#0x0
   \   000118   7418         MOV       A,#0x18
   \   00011A   12....       LCALL     ?XSTACK_DISP101_8
   \   00011D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1970              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   000120                ; Setup parameters for call to function sAddrExtCmp
   \   000120   740E         MOV       A,#0xe
   \   000122   12....       LCALL     ?XSTACK_DISP0_8
   \   000125   AC82         MOV       R4,DPL
   \   000127   AD83         MOV       R5,DPH
   \   000129   7418         MOV       A,#0x18
   \   00012B   12....       LCALL     ?XSTACK_DISP101_8
   \   00012E   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000131   E9           MOV       A,R1
   \   000132   601D         JZ        ??ZDO_ProcessDeviceAnnce_8
   1971              {
   1972                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   000134                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000134   7402         MOV       A,#0x2
   \   000136   12....       LCALL     ?XSTACK_DISP0_8
   \   000139   AC82         MOV       R4,DPL
   \   00013B   AD83         MOV       R5,DPH
   \   00013D   740E         MOV       A,#0xe
   \   00013F   12....       LCALL     ?XSTACK_DISP0_8
   \   000142   AA82         MOV       R2,DPL
   \   000144   AB83         MOV       R3,DPH
   \   000146   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1973                AddrMgrEntryUpdate( &addrEntry );
   \   000149                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000149   740B         MOV       A,#0xb
   \   00014B   12....       LCALL     ?XSTACK_DISP101_8
   \   00014E   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1974              }
   1975            }
   1976          
   1977            // Update the short address in address manager if it's been changed
   1978            AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_8:
   \   000151                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000151   7402         MOV       A,#0x2
   \   000153   12....       LCALL     ?XSTACK_DISP0_8
   \   000156   AC82         MOV       R4,DPL
   \   000158   AD83         MOV       R5,DPH
   \   00015A   740E         MOV       A,#0xe
   \   00015C   12....       LCALL     ?XSTACK_DISP0_8
   \   00015F   AA82         MOV       R2,DPL
   \   000161   AB83         MOV       R3,DPH
   \   000163   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1979            if ( AddrMgrEntryLookupExt( &addrEntry ) )
   \   000166                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000166   740B         MOV       A,#0xb
   \   000168   12....       LCALL     ?XSTACK_DISP101_8
   \   00016B   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00016E   E9           MOV       A,R1
   \   00016F   602B         JZ        ??ZDO_ProcessDeviceAnnce_0
   1980            {
   1981              if ( addrEntry.nwkAddr != Annce.nwkAddr )
   \   000171   740C         MOV       A,#0xc
   \   000173   12....       LCALL     ?XSTACK_DISP0_8
   \   000176   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   000179   85..82       MOV       DPL,?XSP + 0
   \   00017C   85..83       MOV       DPH,?XSP + 1
   \   00017F   E0           MOVX      A,@DPTR
   \   000180   68           XRL       A,R0
   \   000181   7003         JNZ       ??ZDO_ProcessDeviceAnnce_9
   \   000183   A3           INC       DPTR
   \   000184   E0           MOVX      A,@DPTR
   \   000185   69           XRL       A,R1
   \                     ??ZDO_ProcessDeviceAnnce_9:
   \   000186   6014         JZ        ??ZDO_ProcessDeviceAnnce_0
   1982              {
   1983                addrEntry.nwkAddr = Annce.nwkAddr;
   \   000188   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   00018B   740C         MOV       A,#0xc
   \   00018D   12....       LCALL     ?XSTACK_DISP0_8
   \   000190   E8           MOV       A,R0
   \   000191   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   1984                AddrMgrEntryUpdate( &addrEntry );
   \                     ??CrossCallReturnLabel_590:
   \   000194                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000194   740B         MOV       A,#0xb
   \   000196   12....       LCALL     ?XSTACK_DISP101_8
   \   000199   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1985              }
   1986            }
   1987          }
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   00019C   7420         MOV       A,#0x20
   \   00019E   02....       LJMP      ??Subroutine205_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   A8..         MOV       R0,?V0
   \   000009   A9..         MOV       R1,?V1
   \   00000B   22           RET
   1988          
   1989          /*********************************************************************
   1990           * @fn          ZDO_BuildSimpleDescBuf
   1991           *
   1992           * @brief       Build a byte sequence representation of a Simple Descriptor.
   1993           *
   1994           * @param       buf  - pointer to a byte array big enough for data.
   1995           * @param       desc - SimpleDescriptionFormat_t *
   1996           *
   1997           * @return      none
   1998           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1999          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   2000          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2001            byte cnt;
   2002            uint16 *ptr;
   2003          
   2004            *buf++ = desc->EndPoint;
   \   000005   8C82         MOV       DPL,R4
   \   000007   8D83         MOV       DPH,R5
   \   000009   12....       LCALL     ??Subroutine266_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_633:
   \   00000C   F0           MOVX      @DPTR,A
   2005            *buf++ = HI_UINT16( desc->AppProfId );
   \   00000D   8C82         MOV       DPL,R4
   \   00000F   8D83         MOV       DPH,R5
   \   000011   A3           INC       DPTR
   \   000012   A882         MOV       R0,DPL
   \   000014   A983         MOV       R1,DPH
   \   000016   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_635:
   \   000019   12....       LCALL     ?Subroutine28 & 0xFFFF
   2006            *buf++ = LO_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_36:
   \   00001C   F0           MOVX      @DPTR,A
   2007            *buf++ = HI_UINT16( desc->AppDeviceId );
   \   00001D   EC           MOV       A,R4
   \   00001E   2403         ADD       A,#0x3
   \   000020   F8           MOV       R0,A
   \   000021   E4           CLR       A
   \   000022   3D           ADDC      A,R5
   \   000023   F9           MOV       R1,A
   \   000024   8882         MOV       DPL,R0
   \   000026   F583         MOV       DPH,A
   \   000028   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_636:
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   12....       LCALL     ?Subroutine28 & 0xFFFF
   2008            *buf++ = LO_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_37:
   \   000030   12....       LCALL     ?Subroutine39 & 0xFFFF
   2009          
   2010            *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_59:
   \   000033   E0           MOVX      A,@DPTR
   \   000034   C4           SWAP      A
   \   000035   54F0         ANL       A,#0xf0
   \   000037   8A82         MOV       DPL,R2
   \   000039   8B83         MOV       DPH,R3
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   12....       LCALL     ?Subroutine39 & 0xFFFF
   2011          
   2012            *buf++ = desc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_60:
   \   000041   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_637:
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   EA           MOV       A,R2
   \   00004C   2407         ADD       A,#0x7
   \   00004E   FA           MOV       R2,A
   \   00004F   5001         JNC       ??ZDO_BuildSimpleDescBuf_0
   \   000051   0B           INC       R3
   2013            ptr = desc->pAppInClusterList;
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000052   8C82         MOV       DPL,R4
   \   000054   8D83         MOV       DPH,R5
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   2014            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_364:
   \   000060   7E00         MOV       R6,#0x0
   \   000062   800E         SJMP      ??ZDO_BuildSimpleDescBuf_1
   2015            {
   2016              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   000064   12....       LCALL     ?Subroutine19 & 0xFFFF
   2017              *buf++ = LO_UINT16( *ptr );
   2018            }
   \                     ??CrossCallReturnLabel_20:
   \   000067   5001         JNC       ??ZDO_BuildSimpleDescBuf_3
   \   000069   0B           INC       R3
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   00006A   E8           MOV       A,R0
   \   00006B   2402         ADD       A,#0x2
   \   00006D   F8           MOV       R0,A
   \   00006E   5001         JNC       ??ZDO_BuildSimpleDescBuf_4
   \   000070   09           INC       R1
   \                     ??ZDO_BuildSimpleDescBuf_4:
   \   000071   0E           INC       R6
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000072   8C82         MOV       DPL,R4
   \   000074   8D83         MOV       DPH,R5
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FF           MOV       R7,A
   \   00007E   EE           MOV       A,R6
   \   00007F   C3           CLR       C
   \   000080   9F           SUBB      A,R7
   \   000081   40E1         JC        ??ZDO_BuildSimpleDescBuf_2
   2019          
   2020            *buf++ = desc->AppNumOutClusters;
   \   000083   8C82         MOV       DPL,R4
   \   000085   8D83         MOV       DPH,R5
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_638:
   \   000092   F0           MOVX      @DPTR,A
   \   000093   A3           INC       DPTR
   \   000094   AA82         MOV       R2,DPL
   \   000096   AB83         MOV       R3,DPH
   2021            ptr = desc->pAppOutClusterList;
   \   000098   8C82         MOV       DPL,R4
   \   00009A   8D83         MOV       DPH,R5
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   2022            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_365:
   \   0000A9   7E00         MOV       R6,#0x0
   \   0000AB   800E         SJMP      ??ZDO_BuildSimpleDescBuf_5
   2023            {
   2024              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_6:
   \   0000AD   12....       LCALL     ?Subroutine19 & 0xFFFF
   2025              *buf++ = LO_UINT16( *ptr );
   2026            }
   \                     ??CrossCallReturnLabel_21:
   \   0000B0   5001         JNC       ??ZDO_BuildSimpleDescBuf_7
   \   0000B2   0B           INC       R3
   \                     ??ZDO_BuildSimpleDescBuf_7:
   \   0000B3   E8           MOV       A,R0
   \   0000B4   2402         ADD       A,#0x2
   \   0000B6   F8           MOV       R0,A
   \   0000B7   5001         JNC       ??ZDO_BuildSimpleDescBuf_8
   \   0000B9   09           INC       R1
   \                     ??ZDO_BuildSimpleDescBuf_8:
   \   0000BA   0E           INC       R6
   \                     ??ZDO_BuildSimpleDescBuf_5:
   \   0000BB   8C82         MOV       DPL,R4
   \   0000BD   8D83         MOV       DPH,R5
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   FF           MOV       R7,A
   \   0000CA   EE           MOV       A,R6
   \   0000CB   C3           CLR       C
   \   0000CC   9F           SUBB      A,R7
   \   0000CD   40DE         JC        ??ZDO_BuildSimpleDescBuf_6
   2027          }
   \   0000CF   02....       LJMP      ??Subroutine206_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003   8C82         MOV       DPL,R4
   \   000005   8D83         MOV       DPH,R5
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   EA           MOV       A,R2
   \   00000F   2402         ADD       A,#0x2
   \   000011   FA           MOV       R2,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   12....       LCALL     ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine266_0
   \   000001                ; // Fall through to label ??Subroutine266_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine266_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET
   2028          
   2029          /*********************************************************************
   2030           * @fn      ZDO_MatchEndDeviceBind()
   2031           *
   2032           * @brief
   2033           *
   2034           *   Called to match end device binding requests
   2035           *
   2036           * @param  bindReq  - binding request information
   2037           * @param  SecurityUse - Security enable/disable
   2038           *
   2039           * @return  none
   2040           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2041          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   2042          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2043            zAddrType_t dstAddr;
   2044            uint8 sendRsp = FALSE;
   \   00000E   75..00       MOV       ?V0,#0x0
   2045            uint8 status;
   2046          
   2047            // Is this the first request?
   2048            if ( matchED == NULL )
   \   000011   90....       MOV       DPTR,#matchED
   \   000014   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   000017   7045         JNZ       ??ZDO_MatchEndDeviceBind_0
   2049            {
   2050              // Create match info structure
   2051              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   \   000019                ; Setup parameters for call to function osal_mem_alloc
   \   000019   7A37         MOV       R2,#0x37
   \   00001B   7B00         MOV       R3,#0x0
   \   00001D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000020   90....       MOV       DPTR,#matchED
   \   000023   12....       LCALL     ??Subroutine208_0 & 0xFFFF
   2052              if ( matchED )
   \                     ??CrossCallReturnLabel_333:
   \   000026   F9           MOV       R1,A
   \   000027   EA           MOV       A,R2
   \   000028   49           ORL       A,R1
   \   000029   6019         JZ        ??ZDO_MatchEndDeviceBind_1
   2053              {
   2054                // Clear the structure
   2055                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00002B                ; Setup parameters for call to function osal_memset
   \   00002B   7C37         MOV       R4,#0x37
   \   00002D   7D00         MOV       R5,#0x0
   \   00002F   7900         MOV       R1,#0x0
   \   000031   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2056          
   2057                // Copy the first request's information
   2058                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   \   000034                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000034   EE           MOV       A,R6
   \   000035   FC           MOV       R4,A
   \   000036   EF           MOV       A,R7
   \   000037   FD           MOV       R5,A
   \   000038   90....       MOV       DPTR,#matchED
   \   00003B   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   2059                {
   2060                  status = ZDP_NO_ENTRY;
   2061                  sendRsp = TRUE;
   2062                }
   2063              }
   \                     ??CrossCallReturnLabel_400:
   \   00003E   12....       LCALL     `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   000041   E9           MOV       A,R1
   \   000042   700B         JNZ       ??ZDO_MatchEndDeviceBind_2
   2064              else
   2065              {
   2066                status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   000044   85..82       MOV       DPL,?XSP + 0
   \   000047   85..83       MOV       DPH,?XSP + 1
   \   00004A   7488         MOV       A,#-0x78
   \   00004C   02....       LJMP      ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   2067                sendRsp = TRUE;
   2068              }
   2069          
   2070              if ( !sendRsp )
   2071              {
   2072                // Set into the correct state
   2073                matchED->state = ZDMATCH_WAIT_REQ;
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   00004F   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_565:
   \   000052   12....       LCALL     ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000055   7401         MOV       A,#0x1
   \   000057   F0           MOVX      @DPTR,A
   2074          
   2075                // Setup the timeout
   2076                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   000058                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000058   12....       LCALL     ?Subroutine101 & 0xFFFF
   2077              }
   2078            }
   \                     ??CrossCallReturnLabel_162:
   \   00005B   02....       LJMP      ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   2079            else
   2080            {
   2081                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   00005E   E8           MOV       A,R0
   \   00005F   242E         ADD       A,#0x2e
   \   000061   F582         MOV       DPL,A
   \   000063   E4           CLR       A
   \   000064   39           ADDC      A,R1
   \   000065   F583         MOV       DPH,A
   \   000067   7402         MOV       A,#0x2
   \   000069   F0           MOVX      @DPTR,A
   2082          
   2083                // Copy the 2nd request's information
   2084                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   00006A                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   00006A   EA           MOV       A,R2
   \   00006B   FC           MOV       R4,A
   \   00006C   EB           MOV       A,R3
   \   00006D   FD           MOV       R5,A
   \   00006E   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000071   12....       LCALL     `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   000074   E9           MOV       A,R1
   \   000075   700C         JNZ       ??ZDO_MatchEndDeviceBind_5
   2085                {
   2086                  status = ZDP_NO_ENTRY;
   \   000077   85..82       MOV       DPL,?XSP + 0
   \   00007A   85..83       MOV       DPH,?XSP + 1
   \   00007D   7488         MOV       A,#-0x78
   \   00007F   F0           MOVX      @DPTR,A
   2087                  sendRsp = TRUE;
   \   000080   75..01       MOV       ?V0,#0x1
   2088                }
   2089          
   2090                // Make a source match for ed1
   2091                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2092                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2093                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   000083                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   000083   75....       MOV       ?V2,#ZDOBuildBuf & 0xff
   \   000086   75....       MOV       ?V3,#(ZDOBuildBuf >> 8) & 0xff
   \   000089   78..         MOV       R0,#?V2
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008E   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000091   F582         MOV       DPL,A
   \   000093   E4           CLR       A
   \   000094   38           ADDC      A,R0
   \   000095   F583         MOV       DPH,A
   \   000097   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00009A   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_566:
   \   00009D   2428         ADD       A,#0x28
   \   00009F   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   0000A2   FC           MOV       R4,A
   \   0000A3   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   0000A6   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   0000A9   2414         ADD       A,#0x14
   \   0000AB   12....       LCALL     ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   0000AE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B1   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   0000B4   12....       LCALL     ?Subroutine21 & 0xFFFF
   2094                if ( matchED->ed1numMatched )
   \                     ??CrossCallReturnLabel_476:
   \   0000B7   2431         ADD       A,#0x31
   \   0000B9   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   0000BC   6039         JZ        ??ZDO_MatchEndDeviceBind_6
   \   0000BE                ; Setup parameters for call to function osal_mem_alloc
   \   0000BE   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0000C1   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   0000C4   2432         ADD       A,#0x32
   \   0000C6   12....       LCALL     ?Subroutine40 & 0xFFFF
   2095                {
   2096                  // Save the match list
   2097                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   2098                  if ( matchED->ed1Matched )
   \                     ??CrossCallReturnLabel_473:
   \   0000C9   6020         JZ        ??ZDO_MatchEndDeviceBind_7
   2099                  {
   2100                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000CB                ; Setup parameters for call to function osal_memcpy
   \   0000CB   75....       MOV       ?V4,#ZDOBuildBuf & 0xff
   \   0000CE   75....       MOV       ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   0000D1   75..00       MOV       ?V6,#0x0
   \   0000D4   78..         MOV       R0,#?V4
   \   0000D6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D9   12....       LCALL     ?Subroutine55 & 0xFFFF
   2101                  }
   \                     ??CrossCallReturnLabel_81:
   \   0000DC   FC           MOV       R4,A
   \   0000DD   E4           CLR       A
   \   0000DE   33           RLC       A
   \   0000DF   FD           MOV       R5,A
   \   0000E0   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   0000E3   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   0000E6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E9   800C         SJMP      ??ZDO_MatchEndDeviceBind_6
   2102                  else
   2103                  {
   2104                    // Allocation error, stop
   2105                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   0000EB   85..82       MOV       DPL,?XSP + 0
   \   0000EE   85..83       MOV       DPH,?XSP + 1
   \   0000F1   7488         MOV       A,#-0x78
   \   0000F3   F0           MOVX      @DPTR,A
   2106                    sendRsp = TRUE;
   \   0000F4   75..01       MOV       ?V0,#0x1
   2107                  }
   2108                }
   2109          
   2110                // Make a source match for ed2
   2111                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2112                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2113                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   0000F7                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   0000F7   78..         MOV       R0,#?V2
   \   0000F9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FC   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   0000FF   F582         MOV       DPL,A
   \   000101   E4           CLR       A
   \   000102   38           ADDC      A,R0
   \   000103   F583         MOV       DPH,A
   \   000105   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000108   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_567:
   \   00010B   2411         ADD       A,#0x11
   \   00010D   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000110   FC           MOV       R4,A
   \   000111   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000114   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000117   242B         ADD       A,#0x2b
   \   000119   12....       LCALL     ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   00011C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011F   E9           MOV       A,R1
   \   000120   F8           MOV       R0,A
   \   000121   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_568:
   \   000124   2434         ADD       A,#0x34
   \   000126   12....       LCALL     ?Subroutine21 & 0xFFFF
   2114                if ( matchED->ed2numMatched )
   \                     ??CrossCallReturnLabel_477:
   \   000129   2434         ADD       A,#0x34
   \   00012B   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   00012E   602D         JZ        ??ZDO_MatchEndDeviceBind_8
   \   000130                ; Setup parameters for call to function osal_mem_alloc
   \   000130   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000133   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000136   2435         ADD       A,#0x35
   \   000138   12....       LCALL     ?Subroutine40 & 0xFFFF
   2115                {
   2116                  // Save the match list
   2117                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   2118                  if ( matchED->ed2Matched )
   \                     ??CrossCallReturnLabel_474:
   \   00013B   6042         JZ        ??ZDO_MatchEndDeviceBind_9
   2119                  {
   2120                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   00013D                ; Setup parameters for call to function osal_memcpy
   \   00013D   75....       MOV       ?V4,#ZDOBuildBuf & 0xff
   \   000140   75....       MOV       ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   000143   75..00       MOV       ?V6,#0x0
   \   000146   78..         MOV       R0,#?V4
   \   000148   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00014B   12....       LCALL     ?Subroutine56 & 0xFFFF
   2121                  }
   \                     ??CrossCallReturnLabel_84:
   \   00014E   FC           MOV       R4,A
   \   00014F   E4           CLR       A
   \   000150   33           RLC       A
   \   000151   FD           MOV       R5,A
   \   000152   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_569:
   \   000155   2435         ADD       A,#0x35
   \   000157   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   00015A   12....       LCALL     ?DEALLOC_XSTACK8
   2122                  else
   2123                  {
   2124                    // Allocation error, stop
   2125                    status = ZDP_NO_ENTRY;
   2126                    sendRsp = TRUE;
   2127                  }
   2128                }
   2129          
   2130                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   00015D   E5..         MOV       A,?V0
   \   00015F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000161   4025         JC        ??ZDO_MatchEndDeviceBind_10
   \   000163   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   000166   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000169   7008         JNZ       ??ZDO_MatchEndDeviceBind_11
   \   00016B   90....       MOV       DPTR,#matchED
   \   00016E   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000171   6015         JZ        ??ZDO_MatchEndDeviceBind_10
   2131                {
   2132                  // Do the first unbind/bind state
   2133                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   000173                ; Setup parameters for call to function ZDMatchSendState
   \   000173   7B00         MOV       R3,#0x0
   \   000175   7A00         MOV       R2,#0x0
   \   000177   7900         MOV       R1,#0x0
   \   000179   12....       LCALL     `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   2134                }
   2135                else
   2136                {
   2137                  status = ZDP_NO_MATCH;
   2138                  sendRsp = TRUE;
   2139                }
   2140            }
   2141          
   2142            if ( sendRsp )
   \   00017C   02....       LJMP      ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   00017F   85..82       MOV       DPL,?XSP + 0
   \   000182   85..83       MOV       DPH,?XSP + 1
   \   000185   7488         MOV       A,#-0x78
   \   000187   F0           MOVX      @DPTR,A
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   000188   85..82       MOV       DPL,?XSP + 0
   \   00018B   85..83       MOV       DPH,?XSP + 1
   \   00018E   7486         MOV       A,#-0x7a
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   000190   F0           MOVX      @DPTR,A
   2143            {
   2144              // send response to this requester
   2145              dstAddr.addrMode = Addr16Bit;
   \   000191   7409         MOV       A,#0x9
   \   000193   12....       LCALL     ?XSTACK_DISP0_8
   \   000196   7402         MOV       A,#0x2
   \   000198   12....       LCALL     ?Subroutine25 & 0xFFFF
   2146              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \                     ??CrossCallReturnLabel_29:
   \   00019B   F8           MOV       R0,A
   \   00019C   A3           INC       DPTR
   \   00019D   E0           MOVX      A,@DPTR
   \   00019E   F9           MOV       R1,A
   \   00019F   7401         MOV       A,#0x1
   \   0001A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A4   E8           MOV       A,R0
   \   0001A5   F0           MOVX      @DPTR,A
   \   0001A6   A3           INC       DPTR
   \   0001A7   E9           MOV       A,R1
   \   0001A8   12....       LCALL     ?Subroutine45 & 0xFFFF
   2147              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \                     ??CrossCallReturnLabel_67:
   \   0001AB   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   0001AE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001B1   7401         MOV       A,#0x1
   \   0001B3   12....       LCALL     ?XSTACK_DISP100_8
   \   0001B6   88..         MOV       ?V0,R0
   \   0001B8   89..         MOV       ?V1,R1
   \   0001BA   78..         MOV       R0,#?V0
   \   0001BC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BF   75..20       MOV       ?V0,#0x20
   \   0001C2   75..80       MOV       ?V1,#-0x80
   \   0001C5   78..         MOV       R0,#?V0
   \   0001C7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001CA   7901         MOV       R1,#0x1
   \   0001CC   7406         MOV       A,#0x6
   \   0001CE   12....       LCALL     ?XSTACK_DISP102_8
   \   0001D1   EE           MOV       A,R6
   \   0001D2   FA           MOV       R2,A
   \   0001D3   EF           MOV       A,R7
   \   0001D4   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   0001D7   12....       LCALL     ?DEALLOC_XSTACK8
   2148          
   2149              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   0001DA   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0001DD   703C         JNZ       ??ZDO_MatchEndDeviceBind_12
   2150              {
   2151                // send response to first requester
   2152                dstAddr.addrMode = Addr16Bit;
   \   0001DF   7409         MOV       A,#0x9
   \   0001E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E4   7402         MOV       A,#0x2
   \   0001E6   12....       LCALL     ?Subroutine50 & 0xFFFF
   2153                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2154                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2155              }
   \                     ??CrossCallReturnLabel_76:
   \   0001E9   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   0001EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EF   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0001F2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001F5   7401         MOV       A,#0x1
   \   0001F7   12....       LCALL     ?XSTACK_DISP100_8
   \   0001FA   88..         MOV       ?V0,R0
   \   0001FC   89..         MOV       ?V1,R1
   \   0001FE   78..         MOV       R0,#?V0
   \   000200   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000203   75..20       MOV       ?V0,#0x20
   \   000206   75..80       MOV       ?V1,#-0x80
   \   000209   78..         MOV       R0,#?V0
   \   00020B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00020E   7901         MOV       R1,#0x1
   \   000210   7406         MOV       A,#0x6
   \   000212   12....       LCALL     ?XSTACK_DISP102_8
   \   000215   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000218   12....       LCALL     ?DEALLOC_XSTACK8
   2156          
   2157              // Process ended - release memory used
   2158              ZDO_RemoveMatchMemory();
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   00021B                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   00021B   12....       LCALL     `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2159            }
   2160          }
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   00021E   740A         MOV       A,#0xa
   \   000220   02....       LJMP      ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F9           MOV       R1,A
   \   000008   12....       LCALL     `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   00000B   7404         MOV       A,#0x4
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   FB           MOV       R3,A
   \   000004   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000007   90....       MOV       DPTR,#matchED
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FC           MOV       R4,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   CC           XCH       A,R4
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003                REQUIRE ??Subroutine232_0
   \   000003                ; // Fall through to label ??Subroutine232_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_581:
   \   000003   2431         ADD       A,#0x31
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   000007   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_575:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003                REQUIRE ??Subroutine233_0
   \   000003                ; // Fall through to label ??Subroutine233_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   F583         MOV       DPH,A
   \   000002   8882         MOV       DPL,R0
   \   000004                REQUIRE ??Subroutine234_0
   \   000004                ; // Fall through to label ??Subroutine234_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine234_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine235_0
   \   000002                ; // Fall through to label ??Subroutine235_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine235_0:
   \   000000   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_471:
   \   000003   7401         MOV       A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004                REQUIRE ??Subroutine236_0
   \   000004                ; // Fall through to label ??Subroutine236_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine236_0:
   \   000000   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   000003   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000006   7403         MOV       A,#0x3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3C           ADDC      A,R4
   \   000004                REQUIRE ??Subroutine239_0
   \   000004                ; // Fall through to label ??Subroutine239_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine239_0:
   \   000000   F583         MOV       DPH,A
   \   000002   EA           MOV       A,R2
   \   000003   F0           MOVX      @DPTR,A
   \   000004   A3           INC       DPTR
   \   000005   EB           MOV       A,R3
   \   000006   F0           MOVX      @DPTR,A
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine240_0
   \   000006                ; // Fall through to label ??Subroutine240_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine240_0:
   \   000000   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_479:
   \   000003   C8           XCH       A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   E9           MOV       A,R1
   \   000001                REQUIRE ??Subroutine241_0
   \   000001                ; // Fall through to label ??Subroutine241_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine241_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   12....       LCALL     ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine197:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003                REQUIRE ??Subroutine242_0
   \   000003                ; // Fall through to label ??Subroutine242_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_580:
   \   000003   242C         ADD       A,#0x2c
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_579:
   \   000003   2412         ADD       A,#0x12
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_578:
   \   000003   2432         ADD       A,#0x32
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_577:
   \   000003   2415         ADD       A,#0x15
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_576:
   \   000003   2429         ADD       A,#0x29
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2417         ADD       A,#0x17
   \   000006   FA           MOV       R2,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   3400         ADDC      A,#0x0
   \   00000B   FB           MOV       R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   7C..         MOV       R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   000002   7D..         MOV       R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   000004   90....       MOV       DPTR,#AIB_MaxBindingTime
   \   000007   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   00000A   12....       LCALL     `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine251_0
   \   000002                ; // Fall through to label ??Subroutine251_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   000006   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_574:
   \   000003   12....       LCALL     ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000006   E0           MOVX      A,@DPTR
   \   000007   6402         XRL       A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine192:
   \   000000   242E         ADD       A,#0x2e
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_584:
   \   000003   2434         ADD       A,#0x34
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000006   25E0         ADD       A,0xE0 /* A   */
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   25E0         ADD       A,0xE0 /* A   */
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_583:
   \   000006   2431         ADD       A,#0x31
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   38           ADDC      A,R0
   \   00000C   F583         MOV       DPH,A
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_481:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   000006   F583         MOV       DPH,A
   \   000008   8882         MOV       DPL,R0
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F5..         MOV       ?V0,A
   \   00000E   78..         MOV       R0,#?V0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003                REQUIRE ??Subroutine258_0
   \   000003                ; // Fall through to label ??Subroutine258_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET
   2161          
   2162          /*********************************************************************
   2163           * @fn      ZDO_RemoveMatchMemory()
   2164           *
   2165           * @brief   Called to clear the memory used for the end device bind.
   2166           *
   2167           * @param  none
   2168           *
   2169           * @return  none
   2170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2171          static void ZDO_RemoveMatchMemory( void )
   \                     ZDO_RemoveMatchMemory:
   2172          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2173            if ( matchED != NULL )
   \   000004   90....       MOV       DPTR,#matchED
   \   000007   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   00000A   6067         JZ        ??ZDO_RemoveMatchMemory_0
   2174            {
   2175              if ( matchED->ed2Matched != NULL )
   \   00000C   E8           MOV       A,R0
   \   00000D   2435         ADD       A,#0x35
   \   00000F   F582         MOV       DPL,A
   \   000011   E4           CLR       A
   \   000012   39           ADDC      A,R1
   \   000013   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_458:
   \   000016   6008         JZ        ??CrossCallReturnLabel_489
   2176              {
   2177                osal_mem_free( matchED->ed2Matched );
   \   000018                ; Setup parameters for call to function osal_mem_free
   \   000018   12....       LCALL     ?Subroutine97 & 0xFFFF
   2178              }
   \                     ??CrossCallReturnLabel_570:
   \   00001B   2435         ADD       A,#0x35
   \   00001D   12....       LCALL     ?Subroutine54 & 0xFFFF
   2179              if ( matchED->ed1Matched != NULL )
   \                     ??CrossCallReturnLabel_489:
   \   000020   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000023   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   000026   6006         JZ        ??CrossCallReturnLabel_490
   2180              {
   2181                osal_mem_free( matchED->ed1Matched );
   \   000028                ; Setup parameters for call to function osal_mem_free
   \   000028   12....       LCALL     ?Subroutine94 & 0xFFFF
   2182              }
   \                     ??CrossCallReturnLabel_149:
   \   00002B   12....       LCALL     ?Subroutine54 & 0xFFFF
   2183              if ( matchED->ed1.inClusters != NULL )
   \                     ??CrossCallReturnLabel_490:
   \   00002E   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000031   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   000034   6006         JZ        ??CrossCallReturnLabel_491
   2184              {
   2185                osal_mem_free( matchED->ed1.inClusters );
   \   000036                ; Setup parameters for call to function osal_mem_free
   \   000036   12....       LCALL     ?Subroutine95 & 0xFFFF
   2186              }
   \                     ??CrossCallReturnLabel_152:
   \   000039   12....       LCALL     ?Subroutine54 & 0xFFFF
   2187              if ( matchED->ed1.outClusters != NULL )
   \                     ??CrossCallReturnLabel_491:
   \   00003C   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00003F   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   000042   6006         JZ        ??CrossCallReturnLabel_492
   2188              {
   2189                osal_mem_free( matchED->ed1.outClusters );
   \   000044                ; Setup parameters for call to function osal_mem_free
   \   000044   12....       LCALL     ?Subroutine92 & 0xFFFF
   2190              }
   \                     ??CrossCallReturnLabel_146:
   \   000047   12....       LCALL     ?Subroutine54 & 0xFFFF
   2191              if ( matchED->ed2.inClusters != NULL )
   \                     ??CrossCallReturnLabel_492:
   \   00004A   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   00004D   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   000050   6006         JZ        ??CrossCallReturnLabel_493
   2192              {
   2193                osal_mem_free( matchED->ed2.inClusters );
   \   000052                ; Setup parameters for call to function osal_mem_free
   \   000052   12....       LCALL     ?Subroutine91 & 0xFFFF
   2194              }
   \                     ??CrossCallReturnLabel_143:
   \   000055   12....       LCALL     ?Subroutine54 & 0xFFFF
   2195              if ( matchED->ed2.outClusters != NULL )
   \                     ??CrossCallReturnLabel_493:
   \   000058   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   00005B   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   00005E   6006         JZ        ??CrossCallReturnLabel_494
   2196              {
   2197                osal_mem_free( matchED->ed2.outClusters );
   \   000060                ; Setup parameters for call to function osal_mem_free
   \   000060   12....       LCALL     ?Subroutine96 & 0xFFFF
   2198              }
   \                     ??CrossCallReturnLabel_155:
   \   000063   12....       LCALL     ?Subroutine54 & 0xFFFF
   2199          
   2200              osal_mem_free( matchED );
   \                     ??CrossCallReturnLabel_494:
   \   000066                ; Setup parameters for call to function osal_mem_free
   \   000066   90....       MOV       DPTR,#matchED
   \   000069   12....       LCALL     ??Subroutine244_0 & 0xFFFF
   2201              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     ??CrossCallReturnLabel_501:
   \   00006C   90....       MOV       DPTR,#matchED
   \   00006F   E4           CLR       A
   \   000070   F0           MOVX      @DPTR,A
   \   000071   A3           INC       DPTR
   \   000072   F0           MOVX      @DPTR,A
   2202            }
   2203          }
   \                     ??ZDO_RemoveMatchMemory_0:
   \   000073                REQUIRE ?Subroutine0
   \   000073                ; // Fall through to label ?Subroutine0
   2204          
   2205          /*********************************************************************
   2206           * @fn      ZDO_CopyMatchInfo()
   2207           *
   2208           * @brief   Called to copy memory used for the end device bind.
   2209           *
   2210           * @param  srcReq - source information
   2211           * @param  dstReq - destination location
   2212           *
   2213           * @return  TRUE if copy was successful.
   2214           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2215          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ZDO_CopyMatchInfo:
   2216          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   2217            uint8 allOK = TRUE;
   \   00000D   75..01       MOV       ?V2,#0x1
   2218          
   2219            // Copy bind information into the match info structure
   2220            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   8C..         MOV       ?V4,R4
   \   000012   8D..         MOV       ?V5,R5
   \   000014   75..00       MOV       ?V6,#0x0
   \   000017   78..         MOV       R0,#?V4
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00001C   7C17         MOV       R4,#0x17
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   12....       LCALL     ??Subroutine269_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_649:
   \   000023   12....       LCALL     ?DEALLOC_XSTACK8
   2221          
   2222            // Initialize the destination cluster pointers
   2223            destReq->inClusters = NULL;
   \   000026   12....       LCALL     ?Subroutine18 & 0xFFFF
   2224            destReq->outClusters = NULL;
   2225          
   2226            // Copy input cluster IDs
   2227            if ( srcReq->numInClusters )
   \                     ??CrossCallReturnLabel_18:
   \   000029   E5..         MOV       A,?V0
   \   00002B   2411         ADD       A,#0x11
   \   00002D   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   000030   6027         JZ        ??ZDO_CopyMatchInfo_0
   \   000032                ; Setup parameters for call to function osal_mem_alloc
   \   000032   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000035   12....       LCALL     ?Subroutine20 & 0xFFFF
   2228            {
   2229              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   2230              if ( destReq->inClusters )
   \                     ??CrossCallReturnLabel_513:
   \   000038   601C         JZ        ??ZDO_CopyMatchInfo_1
   2231              {
   2232                // Copy the clusters
   2233                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2234                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   00003A                ; Setup parameters for call to function osal_memcpy
   \   00003A   E5..         MOV       A,?V0
   \   00003C   2412         ADD       A,#0x12
   \   00003E   12....       LCALL     ?Subroutine104 & 0xFFFF
   2235              }
   \                     ??CrossCallReturnLabel_166:
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000044   E5..         MOV       A,?V0
   \   000046   2411         ADD       A,#0x11
   \   000048   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   00004B   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   00004E   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   000051   12....       LCALL     ?DEALLOC_XSTACK8
   \   000054   8003         SJMP      ??ZDO_CopyMatchInfo_0
   2236              else
   2237              {
   2238                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_1:
   \   000056   75..00       MOV       ?V2,#0x0
   2239              }
   2240            }
   2241          
   2242            // Copy output cluster IDs
   2243            if ( srcReq->numOutClusters )
   \                     ??ZDO_CopyMatchInfo_0:
   \   000059   E5..         MOV       A,?V0
   \   00005B   2414         ADD       A,#0x14
   \   00005D   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   000060   6025         JZ        ??ZDO_CopyMatchInfo_2
   \   000062                ; Setup parameters for call to function osal_mem_alloc
   \   000062   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000065   EE           MOV       A,R6
   \   000066   2415         ADD       A,#0x15
   \   000068   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   2244            {
   2245              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   2246              if ( destReq->outClusters )
   \                     ??CrossCallReturnLabel_514:
   \   00006B   6041         JZ        ??ZDO_CopyMatchInfo_3
   2247              {
   2248                // Copy the clusters
   2249                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2250                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   00006D                ; Setup parameters for call to function osal_memcpy
   \   00006D   E5..         MOV       A,?V0
   \   00006F   2415         ADD       A,#0x15
   \   000071   12....       LCALL     ?Subroutine104 & 0xFFFF
   2251              }
   \                     ??CrossCallReturnLabel_167:
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000077   E5..         MOV       A,?V0
   \   000079   2414         ADD       A,#0x14
   \   00007B   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   00007E   12....       LCALL     ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   000081   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   000084   12....       LCALL     ?DEALLOC_XSTACK8
   2252              else
   2253              {
   2254                allOK = FALSE;
   2255              }
   2256            }
   2257          
   2258            if ( allOK == FALSE )
   \                     ??ZDO_CopyMatchInfo_2:
   \   000087   E5..         MOV       A,?V2
   \   000089   A2E0         MOV       C,0xE0 /* A   */.0
   \   00008B   401C         JC        ??CrossCallReturnLabel_496
   2259            {
   2260              if ( destReq->inClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_4:
   \   00008D   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000090   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   000093   6006         JZ        ??CrossCallReturnLabel_495
   2261              {
   2262                osal_mem_free( destReq->inClusters );
   \   000095                ; Setup parameters for call to function osal_mem_free
   \   000095   12....       LCALL     ?Subroutine151 & 0xFFFF
   2263              }
   \                     ??CrossCallReturnLabel_345:
   \   000098   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   2264              if ( destReq->outClusters != NULL )
   \                     ??CrossCallReturnLabel_495:
   \   00009B   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   00009E   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   0000A1   6006         JZ        ??CrossCallReturnLabel_496
   2265              {
   2266                osal_mem_free( destReq->outClusters );
   \   0000A3                ; Setup parameters for call to function osal_mem_free
   \   0000A3   12....       LCALL     ?Subroutine150 & 0xFFFF
   2267              }
   2268            }
   \                     ??CrossCallReturnLabel_507:
   \   0000A6   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   2269          
   2270            return ( allOK );
   \                     ??CrossCallReturnLabel_496:
   \   0000A9   A9..         MOV       R1,?V2
   \   0000AB   02....       LJMP      ??Subroutine226_0 & 0xFFFF
   \                     ??ZDO_CopyMatchInfo_3:
   \   0000AE   75..00       MOV       ?V2,#0x0
   \   0000B1   80DA         SJMP      ??ZDO_CopyMatchInfo_4
   2271          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine245_0
   \   000001                ; // Fall through to label ??Subroutine245_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine245_0:
   \   000000   2415         ADD       A,#0x15
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   12....       LCALL     ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   000003   25E0         ADD       A,0xE0 /* A   */
   \   000005   FC           MOV       R4,A
   \   000006   E4           CLR       A
   \   000007   33           RLC       A
   \   000008   FD           MOV       R5,A
   \   000009   EE           MOV       A,R6
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   12....       LCALL     ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   000003   F5..         MOV       ?V4,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V5,A
   \   000009   78..         MOV       R0,#?V4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   EE           MOV       A,R6
   \   000001   2412         ADD       A,#0x12
   \   000003                REQUIRE ??Subroutine248_0
   \   000003                ; // Fall through to label ??Subroutine248_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine248_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine249_0
   \   000006                ; // Fall through to label ??Subroutine249_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine249_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EA           MOV       A,R2
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   EE           MOV       A,R6
   \   000001   2412         ADD       A,#0x12
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   E4           CLR       A
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000003   8B..         MOV       ?V5,R3
   \   000005   A9..         MOV       R1,?V5
   \   000007   22           RET
   2272          
   2273          /*********************************************************************
   2274           * @fn      ZDMatchSendState()
   2275           *
   2276           * @brief   State machine for the End device match message algorithm.
   2277           *
   2278           * @param  reason - state of algoritm
   2279           * @param  status - initial message status
   2280           * @param  TransSeq - next transaction sequence number
   2281           *
   2282           * @return  FALSE if error and we are not currently matching, TRUE
   2283           *          if success.
   2284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2285          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ZDMatchSendState:
   2286          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   8A..         MOV       ?V6,R2
   2287            uint8 *dstIEEEAddr = NULL;
   \   00000E   75..00       MOV       ?V4,#0x0
   \   000011   75..00       MOV       ?V5,#0x0
   2288            uint8 dstEP = 0xFF;
   \   000014   75..FF       MOV       ?V2,#-0x1
   2289            zAddrType_t dstAddr;
   2290            zAddrType_t destinationAddr;
   2291            uint16 msgType;
   2292            uint16 clusterID = 0xFFFF;
   \   000017   75..FF       MOV       ?V8,#-0x1
   \   00001A   75..FF       MOV       ?V9,#-0x1
   2293            ZDEndDeviceBind_t *ed = NULL;
   \   00001D   75..00       MOV       ?V0,#0x0
   \   000020   75..00       MOV       ?V1,#0x0
   2294            uint8 rspStatus = ZDP_SUCCESS;
   \   000023   85..82       MOV       DPL,?XSP + 0
   \   000026   85..83       MOV       DPH,?XSP + 1
   \   000029   E4           CLR       A
   \   00002A   12....       LCALL     ?Subroutine50 & 0xFFFF
   2295          
   2296            if ( matchED == NULL )
   \                     ??CrossCallReturnLabel_77:
   \   00002D   F9           MOV       R1,A
   \   00002E   E8           MOV       A,R0
   \   00002F   49           ORL       A,R1
   \   000030   6016         JZ        ??ZDMatchSendState_0
   2297            {
   2298              return ( FALSE );
   2299            }
   2300          
   2301            // Check sequence number
   2302            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \   000032   7403         MOV       A,#0x3
   \   000034   65..         XRL       A,?V3
   \   000036   6006         JZ        ??ZDMatchSendState_1
   \   000038   7402         MOV       A,#0x2
   \   00003A   65..         XRL       A,?V3
   \   00003C   700F         JNZ       ??ZDMatchSendState_2
   2303            {
   2304              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_1:
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   C8           XCH       A,R0
   \   000040   2430         ADD       A,#0x30
   \   000042   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000045   6B           XRL       A,R3
   \   000046   6005         JZ        ??ZDMatchSendState_2
   2305              {
   2306                return( FALSE ); // ignore the message
   \                     ??ZDMatchSendState_0:
   \   000048   7900         MOV       R1,#0x0
   \   00004A   02....       LJMP      ??ZDMatchSendState_3 & 0xFFFF
   2307              }
   2308            }
   2309          
   2310            // turn off timer
   2311            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_2:
   \   00004D                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   00004D   7C..         MOV       R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   00004F   7D..         MOV       R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   000051   7A00         MOV       R2,#0x0
   \   000053   7B00         MOV       R3,#0x0
   \   000055   12....       LCALL     `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   2312          
   2313            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   000058   7401         MOV       A,#0x1
   \   00005A   65..         XRL       A,?V3
   \   00005C   700A         JNZ       ??ZDMatchSendState_4
   2314            {
   2315              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   00005E   85..82       MOV       DPL,?XSP + 0
   \   000061   85..83       MOV       DPH,?XSP + 1
   \   000064   7485         MOV       A,#-0x7b
   \   000066   803D         SJMP      ??ZDMatchSendState_5
   2316            }
   2317          
   2318            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_4:
   \   000068   E5..         MOV       A,?V3
   \   00006A   6006         JZ        ??ZDMatchSendState_6
   \   00006C   7403         MOV       A,#0x3
   \   00006E   65..         XRL       A,?V3
   \   000070   7019         JNZ       ??ZDMatchSendState_7
   2319            {
   2320              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_6:
   \   000072   90....       MOV       DPTR,#matchED
   \   000075   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000078   F0           MOVX      @DPTR,A
   2321          
   2322              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   000079   7403         MOV       A,#0x3
   \   00007B   65..         XRL       A,?V3
   \   00007D   7029         JNZ       ??ZDMatchSendState_8
   \   00007F   E5..         MOV       A,?V6
   \   000081   6029         JZ        ??ZDMatchSendState_9
   2323              {
   2324                rspStatus = status;
   \   000083   85..82       MOV       DPL,?XSP + 0
   \   000086   85..83       MOV       DPH,?XSP + 1
   \   000089   801A         SJMP      ??ZDMatchSendState_5
   2325              }
   2326            }
   2327            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_7:
   \   00008B   7402         MOV       A,#0x2
   \   00008D   65..         XRL       A,?V3
   \   00008F   701B         JNZ       ??ZDMatchSendState_9
   2328            {
   2329              if ( status == ZDP_SUCCESS )
   \   000091   E5..         MOV       A,?V6
   \   000093   90....       MOV       DPTR,#matchED
   \   000096   7005         JNZ       ??ZDMatchSendState_10
   2330              {
   2331                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   000098   12....       LCALL     ?Subroutine79 & 0xFFFF
   2332              }
   \                     ??CrossCallReturnLabel_126:
   \   00009B   8008         SJMP      ??ZDMatchSendState_5
   2333              else
   2334              {
   2335                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_10:
   \   00009D   12....       LCALL     ??Subroutine258_0 & 0xFFFF
   2336              }
   2337            }
   \                     ??CrossCallReturnLabel_563:
   \   0000A0   12....       LCALL     ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   0000A3   7402         MOV       A,#0x2
   \                     ??ZDMatchSendState_5:
   \   0000A5   F0           MOVX      @DPTR,A
   \   0000A6   8004         SJMP      ??ZDMatchSendState_9
   2338          
   2339            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_8:
   \   0000A8   E5..         MOV       A,?V3
   \   0000AA   601E         JZ        ??ZDMatchSendState_11
   \                     ??ZDMatchSendState_9:
   \   0000AC   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0000AF   7019         JNZ       ??ZDMatchSendState_11
   2340            {
   2341              // Move to the next cluster ID
   2342              if ( matchED->ed1numMatched )
   \   0000B1   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0000B4   6005         JZ        ??ZDMatchSendState_12
   2343              {
   2344                matchED->ed1numMatched--;
   \   0000B6   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   2345              }
   \                     ??CrossCallReturnLabel_434:
   \   0000B9   800A         SJMP      ??ZDMatchSendState_13
   2346              else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_12:
   \   0000BB   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000BE   600A         JZ        ??ZDMatchSendState_11
   2347              {
   2348                matchED->ed2numMatched--;
   \   0000C0   12....       LCALL     ?Subroutine97 & 0xFFFF
   2349              }
   2350            }
   \                     ??CrossCallReturnLabel_571:
   \   0000C3   2434         ADD       A,#0x34
   \                     ??ZDMatchSendState_13:
   \   0000C5   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   0000C8   14           DEC       A
   \   0000C9   F0           MOVX      @DPTR,A
   2351          
   2352            // What message do we send now
   2353            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_11:
   \   0000CA   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0000CD   6018         JZ        ??ZDMatchSendState_14
   2354            {
   2355              ed = &(matchED->ed1);
   \   0000CF   12....       LCALL     ??Subroutine254_0 & 0xFFFF
   2356              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   \                     ??CrossCallReturnLabel_535:
   \   0000D2   12....       LCALL     ?Subroutine55 & 0xFFFF
   2357              dstIEEEAddr = matchED->ed2.ieeeAddr;
   2358              dstEP = matchED->ed2.endpoint;
   2359            }
   \                     ??CrossCallReturnLabel_82:
   \   0000D5   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_656:
   \   0000D8   CA           XCH       A,R2
   \   0000D9   2432         ADD       A,#0x32
   \   0000DB   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000DE   241D         ADD       A,#0x1d
   \   0000E0   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   0000E3   2425         ADD       A,#0x25
   \   0000E5   8026         SJMP      ??ZDMatchSendState_15
   2360            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_14:
   \   0000E7   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0000EA   602A         JZ        ??ZDMatchSendState_16
   2361            {
   2362              ed = &(matchED->ed2);
   \   0000EC   90....       MOV       DPTR,#matchED
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   2417         ADD       A,#0x17
   \   0000F2   F5..         MOV       ?V0,A
   \   0000F4   A3           INC       DPTR
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   3400         ADDC      A,#0x0
   \   0000F8   F5..         MOV       ?V1,A
   2363              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   \   0000FA   12....       LCALL     ?Subroutine56 & 0xFFFF
   2364              dstIEEEAddr = matchED->ed1.ieeeAddr;
   2365              dstEP = matchED->ed1.endpoint;
   2366            }
   \                     ??CrossCallReturnLabel_85:
   \   0000FD   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_657:
   \   000100   CA           XCH       A,R2
   \   000101   2435         ADD       A,#0x35
   \   000103   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000106   2406         ADD       A,#0x6
   \   000108   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   00010B   240E         ADD       A,#0xe
   \                     ??ZDMatchSendState_15:
   \   00010D   F582         MOV       DPL,A
   \   00010F   E4           CLR       A
   \   000110   3A           ADDC      A,R2
   \   000111   F583         MOV       DPH,A
   \   000113   E0           MOVX      A,@DPTR
   \   000114   F5..         MOV       ?V2,A
   2367          
   2368            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_16:
   \   000116   7409         MOV       A,#0x9
   \   000118   12....       LCALL     ?XSTACK_DISP0_8
   \   00011B   7402         MOV       A,#0x2
   \   00011D   12....       LCALL     ?Subroutine42 & 0xFFFF
   2369          
   2370            // Send the next message
   2371            if ( (rspStatus == ZDP_SUCCESS) && ed )
   \                     ??CrossCallReturnLabel_63:
   \   000120   E0           MOVX      A,@DPTR
   \   000121   6003         JZ        $+5
   \   000123   02....       LJMP      ??ZDMatchSendState_17 & 0xFFFF
   \   000126   E5..         MOV       A,?V0
   \   000128   45..         ORL       A,?V1
   \   00012A   7003         JNZ       $+5
   \   00012C   02....       LJMP      ??ZDMatchSendState_17 & 0xFFFF
   2372            {
   2373              // Send unbind/bind message to source
   2374              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   00012F   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000132   7004         JNZ       ??ZDMatchSendState_18
   2375              {
   2376                msgType = Unbind_req;
   \   000134   7E22         MOV       R6,#0x22
   \   000136   8002         SJMP      ??ZDMatchSendState_19
   2377              }
   2378              else
   2379              {
   2380                msgType = Bind_req;
   \                     ??ZDMatchSendState_18:
   \   000138   7E21         MOV       R6,#0x21
   2381              }
   2382          
   2383              dstAddr.addr.shortAddr = ed->srcAddr;
   \                     ??ZDMatchSendState_19:
   \   00013A   85..82       MOV       DPL,?V0
   \   00013D   85..83       MOV       DPH,?V1
   \   000140   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   000143   12....       LCALL     ?XSTACK_DISP0_8
   \   000146   E8           MOV       A,R0
   \   000147   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   2384          
   2385              // Save off the transaction sequence number
   2386              matchED->transSeq = ZDP_TransID;
   \                     ??CrossCallReturnLabel_591:
   \   00014A   90....       MOV       DPTR,#ZDP_TransID
   \   00014D   E0           MOVX      A,@DPTR
   \   00014E   C0E0         PUSH      A
   \   000150   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_572:
   \   000153   2430         ADD       A,#0x30
   \   000155   F582         MOV       DPL,A
   \   000157   E4           CLR       A
   \   000158   38           ADDC      A,R0
   \   000159   F583         MOV       DPH,A
   \   00015B   D0E0         POP       A
   \   00015D   F0           MOVX      @DPTR,A
   2387          
   2388              destinationAddr.addrMode = Addr64Bit;
   \   00015E   7412         MOV       A,#0x12
   \   000160   12....       LCALL     ?XSTACK_DISP0_8
   \   000163   7403         MOV       A,#0x3
   \   000165   F0           MOVX      @DPTR,A
   2389              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   000166                ; Setup parameters for call to function sAddrExtCpy
   \   000166   AC..         MOV       R4,?V4
   \   000168   AD..         MOV       R5,?V5
   \   00016A   740A         MOV       A,#0xa
   \   00016C   12....       LCALL     ?XSTACK_DISP101_8
   \   00016F   12....       LCALL     ?Subroutine165 & 0xFFFF
   2390          
   2391              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2392                  &destinationAddr, dstEP, ed->SecurityUse );
   \                     ??CrossCallReturnLabel_542:
   \   000172   E0           MOVX      A,@DPTR
   \   000173   F5..         MOV       ?V4,A
   \   000175   78..         MOV       R0,#?V4
   \   000177   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017A   78..         MOV       R0,#?V2
   \   00017C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017F   740C         MOV       A,#0xc
   \   000181   12....       LCALL     ?XSTACK_DISP100_8
   \   000184   88..         MOV       ?V4,R0
   \   000186   89..         MOV       ?V5,R1
   \   000188   78..         MOV       R0,#?V4
   \   00018A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018D   78..         MOV       R0,#?V8
   \   00018F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000192   E5..         MOV       A,?V0
   \   000194   2406         ADD       A,#0x6
   \   000196   F5..         MOV       ?V4,A
   \   000198   E4           CLR       A
   \   000199   35..         ADDC      A,?V1
   \   00019B   F5..         MOV       ?V5,A
   \   00019D   78..         MOV       R0,#?V4
   \   00019F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A2   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   0001A5   F9           MOV       R1,A
   \   0001A6   7409         MOV       A,#0x9
   \   0001A8   12....       LCALL     ?XSTACK_DISP102_8
   \   0001AB   EE           MOV       A,R6
   \   0001AC   FA           MOV       R2,A
   \   0001AD   7B00         MOV       R3,#0x0
   \   0001AF   12....       LCALL     `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   0001B2   7408         MOV       A,#0x8
   \   0001B4   12....       LCALL     ?DEALLOC_XSTACK8
   2393          
   2394              // Set timeout for response
   2395              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   0001B7                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   0001B7   12....       LCALL     ?Subroutine101 & 0xFFFF
   2396            }
   \                     ??CrossCallReturnLabel_163:
   \   0001BA   02....       LJMP      ??ZDMatchSendState_20 & 0xFFFF
   2397            else
   2398            {
   2399              // Send the response messages to requesting devices
   2400              // send response to first requester
   2401              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_17:
   \   0001BD   12....       LCALL     ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   0001C0   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   0001C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C6   12....       LCALL     ?Subroutine14 & 0xFFFF
   2402              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \                     ??CrossCallReturnLabel_9:
   \   0001C9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001CC   7401         MOV       A,#0x1
   \   0001CE   12....       LCALL     ?XSTACK_DISP100_8
   \   0001D1   88..         MOV       ?V0,R0
   \   0001D3   89..         MOV       ?V1,R1
   \   0001D5   78..         MOV       R0,#?V0
   \   0001D7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001DA   75..20       MOV       ?V0,#0x20
   \   0001DD   75..80       MOV       ?V1,#-0x80
   \   0001E0   78..         MOV       R0,#?V0
   \   0001E2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001E5   7901         MOV       R1,#0x1
   \   0001E7   7406         MOV       A,#0x6
   \   0001E9   12....       LCALL     ?XSTACK_DISP102_8
   \   0001EC   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   0001EF   12....       LCALL     ?DEALLOC_XSTACK8
   2403          
   2404              // send response to second requester
   2405              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   0001F2   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   0001F5   704C         JNZ       ??ZDMatchSendState_21
   2406              {
   2407                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   0001F7   12....       LCALL     ?Subroutine97 & 0xFFFF
   2408                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   2409              }
   \                     ??CrossCallReturnLabel_573:
   \   0001FA   2419         ADD       A,#0x19
   \   0001FC   F582         MOV       DPL,A
   \   0001FE   E4           CLR       A
   \   0001FF   38           ADDC      A,R0
   \   000200   F583         MOV       DPH,A
   \   000202   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   000205   12....       LCALL     ?XSTACK_DISP0_8
   \   000208   E8           MOV       A,R0
   \   000209   F0           MOVX      @DPTR,A
   \   00020A   A3           INC       DPTR
   \   00020B   12....       LCALL     ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_478:
   \   00020E   2418         ADD       A,#0x18
   \   000210   F582         MOV       DPL,A
   \   000212   E4           CLR       A
   \   000213   38           ADDC      A,R0
   \   000214   12....       LCALL     ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   000217   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00021A   7401         MOV       A,#0x1
   \   00021C   12....       LCALL     ?XSTACK_DISP100_8
   \   00021F   88..         MOV       ?V0,R0
   \   000221   89..         MOV       ?V1,R1
   \   000223   78..         MOV       R0,#?V0
   \   000225   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000228   75..20       MOV       ?V0,#0x20
   \   00022B   75..80       MOV       ?V1,#-0x80
   \   00022E   78..         MOV       R0,#?V0
   \   000230   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000233   7901         MOV       R1,#0x1
   \   000235   7406         MOV       A,#0x6
   \   000237   12....       LCALL     ?XSTACK_DISP102_8
   \   00023A   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   00023D   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   000240   12....       LCALL     ?DEALLOC_XSTACK8
   2410          
   2411              // Process ended - release memory used
   2412              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_21:
   \   000243                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   000243   12....       LCALL     `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2413            }
   2414          
   2415            return ( TRUE );
   \                     ??ZDMatchSendState_20:
   \   000246   7901         MOV       R1,#0x1
   \                     ??ZDMatchSendState_3:
   \   000248   7413         MOV       A,#0x13
   \   00024A   02....       LJMP      ?Subroutine6 & 0xFFFF
   2416          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   F5..         MOV       ?V4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   3400         ADDC      A,#0x0
   \   000006   F5..         MOV       ?V5,A
   \   000008   90....       MOV       DPTR,#matchED
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000003   7401         MOV       A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000006   E0           MOVX      A,@DPTR
   \   000007   6401         XRL       A,#0x1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_585:
   \   000003   12....       LCALL     ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine203:
   \   000000   242F         ADD       A,#0x2f
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   90....       MOV       DPTR,#matchED
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3A           ADDC      A,R2
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   28           ADD       A,R0
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   39           ADDC      A,R1
   \   00000C   F9           MOV       R1,A
   \   00000D   E8           MOV       A,R0
   \   00000E   24FE         ADD       A,#-0x2
   \   000010   F582         MOV       DPL,A
   \   000012   E9           MOV       A,R1
   \   000013   34FF         ADDC      A,#-0x1
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V8,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V9,A
   \   00001E   90....       MOV       DPTR,#matchED
   \   000021   E0           MOVX      A,@DPTR
   \   000022   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000003                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000003   85..82       MOV       DPL,?V0
   \   000006   85..83       MOV       DPH,?V1
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine181:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   90....       MOV       DPTR,#matchED
   \   000007                REQUIRE ??Subroutine265_0
   \   000007                ; // Fall through to label ??Subroutine265_0
   2417          
   2418          /*********************************************************************
   2419           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2420           *
   2421           * @brief   End device bind timeout.
   2422           *
   2423           * @param  none
   2424           *
   2425           * @return  none
   2426           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2427          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ZDO_EndDeviceBindMatchTimeoutCB:
   2428          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2429            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV       R3,#0x0
   \   000006   7A85         MOV       R2,#-0x7b
   \   000008   7901         MOV       R1,#0x1
   \   00000A   12....       LCALL     `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   2430          }
   \   00000D   02....       LJMP      ?Subroutine0 & 0xFFFF
   2431          
   2432          /*********************************************************************
   2433           * ZDO MESSAGE PARSING API FUNCTIONS
   2434           */
   2435          
   2436          /*********************************************************************
   2437           * @fn          ZDO_ParseEndDeviceBindReq
   2438           *
   2439           * @brief       This function parses the End_Device_Bind_req message.
   2440           *
   2441           *     NOTE:  The clusters lists in bindReq are allocated in this
   2442           *            function and must be freed by that calling function.
   2443           *
   2444           * @param       inMsg  - incoming message (request)
   2445           * @param       bindReq - pointer to place to parse message to
   2446           *
   2447           * @return      none
   2448           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2449          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2450          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   2451            uint8 *msg;
   2452          
   2453            // Parse the message
   2454            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV       A,R2
   \   00000A   240F         ADD       A,#0xf
   \   00000C   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_618:
   \   00000F   12....       LCALL     ?Subroutine33 & 0xFFFF
   2455            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_44:
   \   000012   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   000015   8C82         MOV       DPL,R4
   \   000017   8D83         MOV       DPH,R5
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E8           MOV       A,R0
   \   00001C   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   2456            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_592:
   \   00001F   EA           MOV       A,R2
   \   000020   240E         ADD       A,#0xe
   \   000022   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_619:
   \   000025   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   2457            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_326:
   \   000028   12....       LCALL     ?Subroutine80 & 0xFFFF
   2458          
   2459            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_537:
   \   00002B   85..82       MOV       DPL,?V0
   \   00002E   F583         MOV       DPH,A
   \   000030   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000033   A3           INC       DPTR
   \   000034   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   2460            msg += 2;
   \                     ??CrossCallReturnLabel_593:
   \   000037   E5..         MOV       A,?V0
   \   000039   2402         ADD       A,#0x2
   \   00003B   F5..         MOV       ?V0,A
   \   00003D   5002         JNC       ??ZDO_ParseEndDeviceBindReq_0
   \   00003F   05..         INC       ?V1
   2461          
   2462            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   000041                ; Setup parameters for call to function sAddrExtCpy
   \   000041   FC           MOV       R4,A
   \   000042   AD..         MOV       R5,?V1
   \   000044   EE           MOV       A,R6
   \   000045   2406         ADD       A,#0x6
   \   000047   12....       LCALL     ?Subroutine51 & 0xFFFF
   2463            msg += Z_EXTADDR_LEN;
   2464          
   2465            bindReq->endpoint = *msg++;
   \                     ??CrossCallReturnLabel_539:
   \   00004A   C0E0         PUSH      A
   \   00004C   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   00004F   3F           ADDC      A,R7
   \   000050   F583         MOV       DPH,A
   \   000052   D0E0         POP       A
   \   000054   F0           MOVX      @DPTR,A
   \   000055   E5..         MOV       A,?V0
   \   000057   2409         ADD       A,#0x9
   \   000059   F5..         MOV       ?V0,A
   \   00005B   5002         JNC       ??ZDO_ParseEndDeviceBindReq_1
   \   00005D   05..         INC       ?V1
   2466            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   00005F   F582         MOV       DPL,A
   \   000061   85..83       MOV       DPH,?V1
   \   000064   12....       LCALL     ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_653:
   \   000067   F9           MOV       R1,A
   \   000068   EE           MOV       A,R6
   \   000069   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00006C   3F           ADDC      A,R7
   \   00006D   F583         MOV       DPH,A
   \   00006F   EA           MOV       A,R2
   \   000070   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   2467            msg += 2;
   2468          
   2469            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_594:
   \   000073   12....       LCALL     ?Subroutine18 & 0xFFFF
   2470            bindReq->outClusters = NULL;
   2471          
   2472            if ((bindReq->numInClusters = *msg++) &&
   2473                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_19:
   \   000076   85..82       MOV       DPL,?V0
   \   000079   85..83       MOV       DPH,?V1
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F8           MOV       R0,A
   \   000080   EE           MOV       A,R6
   \   000081   2411         ADD       A,#0x11
   \   000083   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000086   5002         JNC       ??ZDO_ParseEndDeviceBindReq_2
   \   000088   05..         INC       ?V1
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   00008A   E8           MOV       A,R0
   \   00008B   6019         JZ        ??ZDO_ParseEndDeviceBindReq_3
   \   00008D   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000090   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_517:
   \   000093   6011         JZ        ??ZDO_ParseEndDeviceBindReq_3
   2474            {
   2475              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   000095                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000095   EE           MOV       A,R6
   \   000096   2412         ADD       A,#0x12
   \   000098   12....       LCALL     ?Subroutine100 & 0xFFFF
   2476            }
   \                     ??CrossCallReturnLabel_160:
   \   00009B   2411         ADD       A,#0x11
   \   00009D   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   0000A0   8A..         MOV       ?V0,R2
   \   0000A2   8B..         MOV       ?V1,R3
   \   0000A4   8007         SJMP      ??ZDO_ParseEndDeviceBindReq_4
   2477            else
   2478            {
   2479              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   0000A6   EE           MOV       A,R6
   \   0000A7   2411         ADD       A,#0x11
   \   0000A9   12....       LCALL     ??Subroutine252_0 & 0xFFFF
   2480            }
   \                     ??CrossCallReturnLabel_531:
   \   0000AC   F0           MOVX      @DPTR,A
   2481          
   2482            if ((bindReq->numOutClusters = *msg++) &&
   2483                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   0000AD   85..82       MOV       DPL,?V0
   \   0000B0   85..83       MOV       DPH,?V1
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   F8           MOV       R0,A
   \   0000B5   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_545:
   \   0000B8   E8           MOV       A,R0
   \   0000B9   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000BC   8582..       MOV       ?V0,DPL
   \   0000BF   8583..       MOV       ?V1,DPH
   \   0000C2   601E         JZ        ??ZDO_ParseEndDeviceBindReq_5
   \   0000C4   EE           MOV       A,R6
   \   0000C5   2414         ADD       A,#0x14
   \   0000C7   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   0000CA   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   0000CD   EE           MOV       A,R6
   \   0000CE   2415         ADD       A,#0x15
   \   0000D0   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   0000D3   600D         JZ        ??ZDO_ParseEndDeviceBindReq_5
   2484            {
   2485              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   0000D5                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000D5   EE           MOV       A,R6
   \   0000D6   2415         ADD       A,#0x15
   \   0000D8   12....       LCALL     ?Subroutine100 & 0xFFFF
   2486            }
   \                     ??CrossCallReturnLabel_161:
   \   0000DB   2414         ADD       A,#0x14
   \   0000DD   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   0000E0   8004         SJMP      ??ZDO_ParseEndDeviceBindReq_6
   2487            else
   2488            {
   2489              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   0000E2   12....       LCALL     ?Subroutine124 & 0xFFFF
   2490            }
   \                     ??CrossCallReturnLabel_534:
   \   0000E5   F0           MOVX      @DPTR,A
   2491          }
   \                     ??ZDO_ParseEndDeviceBindReq_6:
   \   0000E6   02....       LJMP      ??Subroutine204_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   F8           MOV       R0,A
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000004   8B..         MOV       ?V3,R3
   \   000006   A9..         MOV       R1,?V3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_629:
   \   000003   F9           MOV       R1,A
   \   000004   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000009   AA..         MOV       R2,?V0
   \   00000B   AB..         MOV       R3,?V1
   \   00000D   EE           MOV       A,R6
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   3B           ADDC      A,R3
   \   000001                REQUIRE ??Subroutine253_0
   \   000001                ; // Fall through to label ??Subroutine253_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   3F           ADDC      A,R7
   \   000003                REQUIRE ??Subroutine255_0
   \   000003                ; // Fall through to label ??Subroutine255_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine255_0:
   \   000000   FB           MOV       R3,A
   \   000001   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_543:
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine256_0
   \   000001                ; // Fall through to label ??Subroutine256_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   E8           MOV       A,R0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   E5..         MOV       A,?V0
   \   00000A   2403         ADD       A,#0x3
   \   00000C   F5..         MOV       ?V0,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3B           ADDC      A,R3
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine262_0
   \   000006                ; // Fall through to label ??Subroutine262_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine262_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000003   8C82         MOV       DPL,R4
   \   000005   8D83         MOV       DPH,R5
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET
   2492          
   2493          /*********************************************************************
   2494           * @fn          ZDO_ParseBindUnbindReq
   2495           *
   2496           * @brief       This function parses the Bind_req or Unbind_req message.
   2497           *
   2498           * @param       inMsg  - incoming message (request)
   2499           * @param       pReq - place to put parsed information
   2500           *
   2501           * @return      none
   2502           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2503          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2504          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   2505            uint8 *msg;
   2506          
   2507            msg = inMsg->asdu;
   \   000009   12....       LCALL     ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_554:
   \   00000C   12....       LCALL     ?Subroutine80 & 0xFFFF
   2508            osal_cpyExtAddr( pReq->srcAddress, msg );
   \                     ??CrossCallReturnLabel_538:
   \   00000F                ; Setup parameters for call to function sAddrExtCpy
   \   00000F   AC..         MOV       R4,?V0
   \   000011   FD           MOV       R5,A
   \   000012   EE           MOV       A,R6
   \   000013   FA           MOV       R2,A
   \   000014   EF           MOV       A,R7
   \   000015   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   2509            msg += Z_EXTADDR_LEN;
   2510            pReq->srcEndpoint = *msg++;
   \                     ??CrossCallReturnLabel_541:
   \   000018   8E82         MOV       DPL,R6
   \   00001A   8F83         MOV       DPH,R7
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   F0           MOVX      @DPTR,A
   \   000025   E5..         MOV       A,?V0
   \   000027   2409         ADD       A,#0x9
   \   000029   F5..         MOV       ?V0,A
   \   00002B   5002         JNC       ??ZDO_ParseBindUnbindReq_0
   \   00002D   05..         INC       ?V1
   2511            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   00002F   F582         MOV       DPL,A
   \   000031   85..83       MOV       DPH,?V1
   \   000034   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   E9           MOV       A,R1
   \   00003A   12....       LCALL     ?Subroutine35 & 0xFFFF
   2512            msg += 2;
   2513            pReq->dstAddress.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_50:
   \   00003D   F8           MOV       R0,A
   \   00003E   EE           MOV       A,R6
   \   00003F   2413         ADD       A,#0x13
   \   000041   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000044   5002         JNC       ??ZDO_ParseBindUnbindReq_1
   \   000046   05..         INC       ?V1
   2514            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000048   7403         MOV       A,#0x3
   \   00004A   68           XRL       A,R0
   \   00004B   7013         JNZ       ??ZDO_ParseBindUnbindReq_2
   2515            {
   2516              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   00004D                ; Setup parameters for call to function sAddrExtCpy
   \   00004D   AC..         MOV       R4,?V0
   \   00004F   AD..         MOV       R5,?V1
   \   000051   EE           MOV       A,R6
   \   000052   240B         ADD       A,#0xb
   \   000054   12....       LCALL     ?Subroutine51 & 0xFFFF
   2517              msg += Z_EXTADDR_LEN;
   2518              pReq->dstEndpoint = *msg;
   2519            }
   \                     ??CrossCallReturnLabel_540:
   \   000057   C0E0         PUSH      A
   \   000059   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   00005C   D0E0         POP       A
   \   00005E   800C         SJMP      ??ZDO_ParseBindUnbindReq_3
   2520            else
   2521            {
   2522              // copy group address
   2523              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_2:
   \   000060   85..82       MOV       DPL,?V0
   \   000063   85..83       MOV       DPH,?V1
   \   000066   12....       LCALL     ?Subroutine76 & 0xFFFF
   2524            }
   \                     ??CrossCallReturnLabel_120:
   \   000069   F0           MOVX      @DPTR,A
   \   00006A   A3           INC       DPTR
   \   00006B   E9           MOV       A,R1
   \                     ??ZDO_ParseBindUnbindReq_3:
   \   00006C   F0           MOVX      @DPTR,A
   2525          }
   \   00006D   02....       LJMP      ??Subroutine206_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL     ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_655:
   \   000003   F9           MOV       R1,A
   \   000004   EE           MOV       A,R6
   \   000005   240B         ADD       A,#0xb
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3F           ADDC      A,R7
   \   00000B   F583         MOV       DPH,A
   \   00000D   EA           MOV       A,R2
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   22           RET
   2526          
   2527          /*********************************************************************
   2528           * @fn      ZDO_ParseAddrRsp
   2529           *
   2530           * @brief   Turns the inMsg (incoming message) into the out parsed
   2531           *          structure.
   2532           *
   2533           * @param   inMsg - incoming message
   2534           *
   2535           * @return  pointer to parsed structures.  This structure was
   2536           *          allocated using osal_mem_alloc, so it must be freed
   2537           *          by the calling function [osal_mem_free()].
   2538           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2539          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2540          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2541            ZDO_NwkIEEEAddrResp_t *rsp;
   2542            uint8 *msg;
   2543            byte cnt = 0;
   \   000009   75..00       MOV       ?V2,#0x0
   2544          
   2545            // Calculate the number of items in the list
   2546            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   00000C   EA           MOV       A,R2
   \   00000D   2410         ADD       A,#0x10
   \   00000F   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   000012   C3           CLR       C
   \   000013   940C         SUBB      A,#0xc
   \   000015   400D         JC        ??ZDO_ParseAddrRsp_0
   2547            {
   2548              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   000017   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   2549            }
   \                     ??CrossCallReturnLabel_387:
   \   00001A   12....       LCALL     ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_564:
   \   00001D   240B         ADD       A,#0xb
   \   00001F   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000022   F5..         MOV       ?V2,A
   2550            else
   2551            {
   2552              cnt = 0;
   2553            }
   2554          
   2555            // Make buffer
   2556            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_0:
   \   000024                ; Setup parameters for call to function osal_mem_alloc
   \   000024   A8..         MOV       R0,?V2
   \   000026   E8           MOV       A,R0
   \   000027   28           ADD       A,R0
   \   000028   F8           MOV       R0,A
   \   000029   E4           CLR       A
   \   00002A   33           RLC       A
   \   00002B   F9           MOV       R1,A
   \   00002C   E8           MOV       A,R0
   \   00002D   240D         ADD       A,#0xd
   \   00002F   12....       LCALL     ?Subroutine133 & 0xFFFF
   2557          
   2558            if ( rsp )
   \                     ??CrossCallReturnLabel_213:
   \   000032   7003         JNZ       $+5
   \   000034   02....       LJMP      ??ZDO_ParseAddrRsp_1 & 0xFFFF
   2559            {
   2560              msg = inMsg->asdu;
   \   000037   EE           MOV       A,R6
   \   000038   2413         ADD       A,#0x13
   \   00003A   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   00003D   FE           MOV       R6,A
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   FF           MOV       R7,A
   2561          
   2562              rsp->status = *msg++;
   \   000041   8E82         MOV       DPL,R6
   \   000043   F583         MOV       DPH,A
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F8           MOV       R0,A
   \   000047   8A82         MOV       DPL,R2
   \   000049   8B83         MOV       DPH,R3
   \   00004B   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00004E   AE82         MOV       R6,DPL
   \   000050   AF83         MOV       R7,DPH
   2563              if ( rsp->status == ZDO_SUCCESS )
   \   000052   7076         JNZ       ??ZDO_ParseAddrRsp_1
   2564              {
   2565                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000054                ; Setup parameters for call to function sAddrExtCpy
   \   000054   EE           MOV       A,R6
   \   000055   FC           MOV       R4,A
   \   000056   EF           MOV       A,R7
   \   000057   FD           MOV       R5,A
   \   000058   EA           MOV       A,R2
   \   000059   2403         ADD       A,#0x3
   \   00005B   12....       LCALL     ?Subroutine147 & 0xFFFF
   2566                msg += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_236:
   \   00005E   EE           MOV       A,R6
   \   00005F   2408         ADD       A,#0x8
   \   000061   FE           MOV       R6,A
   \   000062   5001         JNC       ??ZDO_ParseAddrRsp_2
   \   000064   0F           INC       R7
   2567                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_2:
   \   000065   F582         MOV       DPL,A
   \   000067   8F83         MOV       DPH,R7
   \   000069   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00006C   A3           INC       DPTR
   \   00006D   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   2568          
   2569                msg += 2;
   2570                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_595:
   \   000070   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000073   E4           CLR       A
   \   000074   F0           MOVX      @DPTR,A
   2571          
   2572                // StartIndex field is only present if NumAssocDev field is non-zero.
   2573                if ( cnt > 0 )
   \   000075   E5..         MOV       A,?V2
   \   000077   6051         JZ        ??ZDO_ParseAddrRsp_1
   2574                {
   2575                  uint16 *pList = &(rsp->devList[0]);
   \   000079   E5..         MOV       A,?V0
   \   00007B   240D         ADD       A,#0xd
   \   00007D   F8           MOV       R0,A
   \   00007E   E4           CLR       A
   \   00007F   35..         ADDC      A,?V1
   \   000081   F9           MOV       R1,A
   2576                  byte n = cnt;
   2577          
   2578                  rsp->numAssocDevs = *msg++;
   \   000082   8E82         MOV       DPL,R6
   \   000084   8F83         MOV       DPH,R7
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   E0           MOVX      A,@DPTR
   \   000089   C0E0         PUSH      A
   \   00008B   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   00008E   D0E0         POP       A
   \   000090   12....       LCALL     ?Subroutine44 & 0xFFFF
   2579                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_64:
   \   000093   C0E0         PUSH      A
   \   000095   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000098   D0E0         POP       A
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   EE           MOV       A,R6
   \   00009C   2404         ADD       A,#0x4
   \   00009E   FE           MOV       R6,A
   \   00009F   5001         JNC       ??ZDO_ParseAddrRsp_3
   \   0000A1   0F           INC       R7
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000A2   85....       MOV       ?V3,?V2
   2580          
   2581                  while ( n != 0 )
   2582                  {
   2583                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_4:
   \   0000A5   8E82         MOV       DPL,R6
   \   0000A7   8F83         MOV       DPH,R7
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   FC           MOV       R4,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   FB           MOV       R3,A
   \   0000AE   EC           MOV       A,R4
   \   0000AF   8882         MOV       DPL,R0
   \   0000B1   8983         MOV       DPH,R1
   \   0000B3   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   0000B6   E8           MOV       A,R0
   \   0000B7   2402         ADD       A,#0x2
   \   0000B9   F8           MOV       R0,A
   \   0000BA   5001         JNC       ??ZDO_ParseAddrRsp_5
   \   0000BC   09           INC       R1
   2584                    msg += sizeof( uint16 );
   \                     ??ZDO_ParseAddrRsp_5:
   \   0000BD   EE           MOV       A,R6
   \   0000BE   2402         ADD       A,#0x2
   \   0000C0   FE           MOV       R6,A
   \   0000C1   5001         JNC       ??ZDO_ParseAddrRsp_6
   \   0000C3   0F           INC       R7
   2585                    n--;
   2586                  }
   \                     ??ZDO_ParseAddrRsp_6:
   \   0000C4   15..         DEC       ?V3
   \   0000C6   E5..         MOV       A,?V3
   \   0000C8   70DB         JNZ       ??ZDO_ParseAddrRsp_4
   2587                }
   2588              }
   2589            }
   2590          
   2591            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_1:
   \   0000CA   AA..         MOV       R2,?V0
   \   0000CC   AB..         MOV       R3,?V1
   \   0000CE   02....       LJMP      ?Subroutine4 & 0xFFFF
   2592          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V1
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   E5..         MOV       A,?V0
   \   000002   240C         ADD       A,#0xc
   \   000004   12....       LCALL     ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_623:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   EA           MOV       A,R2
   \   000006   85..82       MOV       DPL,?V0
   \   000009   85..83       MOV       DPH,?V1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine202:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003                REQUIRE ??Subroutine263_0
   \   000003                ; // Fall through to label ??Subroutine263_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   E5..         MOV       A,?V0
   \   000002   240B         ADD       A,#0xb
   \   000004   12....       LCALL     ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_622:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   39           ADDC      A,R1
   \   000003   FB           MOV       R3,A
   \   000004   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EA           MOV       A,R2
   \   00000C   4B           ORL       A,R3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   2593          
   2594          /*********************************************************************
   2595           * @fn          ZDO_ParseNodeDescRsp
   2596           *
   2597           * @brief       This function parses the Node_Desc_rsp message.
   2598           *
   2599           * @param       inMsg - incoming message
   2600           * @param       pNDRsp - place to parse the message into
   2601           *
   2602           * @return      none
   2603           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2604          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2605          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2606            uint8 *msg;
   2607          
   2608            msg = inMsg->asdu;
   \   000005   12....       LCALL     ?Subroutine10 & 0xFFFF
   2609          
   2610            pNDRsp->status = *msg++;
   2611            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2612          
   2613            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000008   6003         JZ        $+5
   \   00000A   02....       LJMP      ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2614            {
   2615              msg += 2;
   2616              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \   00000D   E8           MOV       A,R0
   \   00000E   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_606:
   \   000011   39           ADDC      A,R1
   \   000012   FB           MOV       R3,A
   \   000013   EC           MOV       A,R4
   \   000014   2403         ADD       A,#0x3
   \   000016   FE           MOV       R6,A
   \   000017   E4           CLR       A
   \   000018   3D           ADDC      A,R5
   \   000019   FF           MOV       R7,A
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   5407         ANL       A,#0x7
   \   000021   F5..         MOV       ?V0,A
   \   000023   8E82         MOV       DPL,R6
   \   000025   8F83         MOV       DPH,R7
   \   000027   E0           MOVX      A,@DPTR
   \   000028   54F8         ANL       A,#0xf8
   \   00002A   45..         ORL       A,?V0
   \   00002C   F5..         MOV       ?V1,A
   \   00002E   12....       LCALL     ?Subroutine47 & 0xFFFF
   2617          
   2618              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_69:
   \   000031   A2E3         MOV       C,0xE0 /* A   */.3
   \   000033   E4           CLR       A
   \   000034   33           RLC       A
   \   000035   F5..         MOV       ?V0,A
   \   000037   A2E0         MOV       C,0xE0 /* A   */.0
   \   000039   E4           CLR       A
   \   00003A   33           RLC       A
   \   00003B   33           RLC       A
   \   00003C   33           RLC       A
   \   00003D   33           RLC       A
   \   00003E   F5..         MOV       ?V0,A
   \   000040   74F7         MOV       A,#-0x9
   \   000042   55..         ANL       A,?V1
   \   000044   45..         ORL       A,?V0
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   12....       LCALL     ?Subroutine47 & 0xFFFF
   2619              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_70:
   \   00004D   A2E4         MOV       C,0xE0 /* A   */.4
   \   00004F   E4           CLR       A
   \   000050   33           RLC       A
   \   000051   FA           MOV       R2,A
   \   000052   A2E0         MOV       C,0xE0 /* A   */.0
   \   000054   E4           CLR       A
   \   000055   33           RLC       A
   \   000056   C4           SWAP      A
   \   000057   FA           MOV       R2,A
   \   000058   8E82         MOV       DPL,R6
   \   00005A   8F83         MOV       DPH,R7
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   54EF         ANL       A,#0xef
   \   00005F   4A           ORL       A,R2
   \   000060   F0           MOVX      @DPTR,A
   2620          
   2621              msg++;  // Reserved bits.
   2622              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   000061   E8           MOV       A,R0
   \   000062   2403         ADD       A,#0x3
   \   000064   FA           MOV       R2,A
   \   000065   E4           CLR       A
   \   000066   39           ADDC      A,R1
   \   000067   FB           MOV       R3,A
   \   000068   EC           MOV       A,R4
   \   000069   2404         ADD       A,#0x4
   \   00006B   0E           INC       R6
   \   00006C   E4           CLR       A
   \   00006D   3D           ADDC      A,R5
   \   00006E   FF           MOV       R7,A
   \   00006F   8A82         MOV       DPL,R2
   \   000071   8B83         MOV       DPH,R3
   \   000073   E0           MOVX      A,@DPTR
   \   000074   54F8         ANL       A,#0xf8
   \   000076   F5..         MOV       ?V0,A
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   5407         ANL       A,#0x7
   \   00007F   45..         ORL       A,?V0
   \   000081   F5..         MOV       ?V0,A
   \   000083   12....       LCALL     ?Subroutine47 & 0xFFFF
   2623              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_71:
   \   000086   5407         ANL       A,#0x7
   \   000088   FA           MOV       R2,A
   \   000089   74F8         MOV       A,#-0x8
   \   00008B   55..         ANL       A,?V0
   \   00008D   4A           ORL       A,R2
   \   00008E   8E82         MOV       DPL,R6
   \   000090   8F83         MOV       DPH,R7
   \   000092   12....       LCALL     ?Subroutine37 & 0xFFFF
   2624              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_54:
   \   000095   8C82         MOV       DPL,R4
   \   000097   8D83         MOV       DPH,R5
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   12....       LCALL     ?Subroutine38 & 0xFFFF
   2625              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_57:
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   12....       LCALL     ??Subroutine262_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_615:
   \   0000A6   12....       LCALL     ?Subroutine32 & 0xFFFF
   2626              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_42:
   \   0000A9   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   0000AC   12....       LCALL     ?Subroutine32 & 0xFFFF
   2627              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_43:
   \   0000AF   A3           INC       DPTR
   \   0000B0   12....       LCALL     ??Subroutine262_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_616:
   \   0000B3   12....       LCALL     ?Subroutine24 & 0xFFFF
   2628              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_27:
   \   0000B6   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   0000B9   12....       LCALL     ?Subroutine24 & 0xFFFF
   2629              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_28:
   \   0000BC   A3           INC       DPTR
   \   0000BD   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   F0           MOVX      @DPTR,A
   \   0000CA   E8           MOV       A,R0
   \   0000CB   240A         ADD       A,#0xa
   \   0000CD   F8           MOV       R0,A
   \   0000CE   5001         JNC       ??ZDO_ParseNodeDescRsp_1
   \   0000D0   09           INC       R1
   2630              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseNodeDescRsp_1:
   \   0000D1   F582         MOV       DPL,A
   \   0000D3   8983         MOV       DPH,R1
   \   0000D5   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_610:
   \   0000D8   FB           MOV       R3,A
   \   0000D9   EC           MOV       A,R4
   \   0000DA   240B         ADD       A,#0xb
   \   0000DC   F582         MOV       DPL,A
   \   0000DE   E4           CLR       A
   \   0000DF   3D           ADDC      A,R5
   \   0000E0   F583         MOV       DPH,A
   \   0000E2   EE           MOV       A,R6
   \   0000E3   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   2631              msg += 2;
   2632              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_328:
   \   0000E6   8882         MOV       DPL,R0
   \   0000E8   8983         MOV       DPH,R1
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   C0E0         PUSH      A
   \   0000EF   EC           MOV       A,R4
   \   0000F0   240D         ADD       A,#0xd
   \   0000F2   F582         MOV       DPL,A
   \   0000F4   E4           CLR       A
   \   0000F5   3D           ADDC      A,R5
   \   0000F6   F583         MOV       DPH,A
   \   0000F8   D0E0         POP       A
   \   0000FA   12....       LCALL     ?Subroutine38 & 0xFFFF
   2633              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   2634              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   2635            }
   \                     ??CrossCallReturnLabel_58:
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   C0E0         PUSH      A
   \   000100   EC           MOV       A,R4
   \   000101   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   000104   3D           ADDC      A,R5
   \   000105   F583         MOV       DPH,A
   \   000107   D0E0         POP       A
   \   000109   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00010C   C0E0         PUSH      A
   \   00010E   EC           MOV       A,R4
   \   00010F   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000112   3D           ADDC      A,R5
   \   000113   F583         MOV       DPH,A
   \   000115   D0E0         POP       A
   \   000117   F0           MOVX      @DPTR,A
   2636          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   000118   02....       LJMP      ??Subroutine206_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000003   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000006   8C82         MOV       DPL,R4
   \   000008   8D83         MOV       DPH,R5
   \   00000A   12....       LCALL     ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   00000D   A3           INC       DPTR
   \   00000E   A882         MOV       R0,DPL
   \   000010   A983         MOV       R1,DPH
   \   000012   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_612:
   \   000015   FB           MOV       R3,A
   \   000016   EE           MOV       A,R6
   \   000017   8C82         MOV       DPL,R4
   \   000019   8D83         MOV       DPH,R5
   \   00001B   A3           INC       DPTR
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   EB           MOV       A,R3
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   8C82         MOV       DPL,R4
   \   000022   8D83         MOV       DPH,R5
   \   000024   E0           MOVX      A,@DPTR
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine187:
   \   000000   12....       LCALL     ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_557:
   \   000003   3B           ADDC      A,R3
   \   000004   22           RET
   2637          
   2638          /*********************************************************************
   2639           * @fn          ZDO_ParesPowerDescRsp
   2640           *
   2641           * @brief       This function parses the Power_Desc_rsp message.
   2642           *
   2643           * @param       inMsg  - incoming message
   2644           * @param       pNPRsp - place to parse the message into
   2645           *
   2646           * @return      none
   2647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   8C82         MOV       DPL,R4
   \   000002   8D83         MOV       DPH,R5
   \   000004                REQUIRE ??Subroutine259_0
   \   000004                ; // Fall through to label ??Subroutine259_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2648          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2649          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2650            uint8 *msg;
   2651          
   2652            msg = inMsg->asdu;
   \   000005   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000008   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   2653            pNPRsp->status = *msg++;
   \                     ??CrossCallReturnLabel_401:
   \   00000B   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00000E   AA82         MOV       R2,DPL
   \   000010   AB83         MOV       R3,DPH
   2654            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000012   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_611:
   \   000015   F9           MOV       R1,A
   \   000016   EE           MOV       A,R6
   \   000017   8C82         MOV       DPL,R4
   \   000019   8D83         MOV       DPH,R5
   \   00001B   A3           INC       DPTR
   \   00001C   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   2655          
   2656            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_596:
   \   00001F   8C82         MOV       DPL,R4
   \   000021   8D83         MOV       DPH,R5
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6003         JZ        $+5
   \   000026   02....       LJMP      ??ZDO_ParsePowerDescRsp_0 & 0xFFFF
   2657            {
   2658              msg += 2;
   2659              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \   000029   EA           MOV       A,R2
   \   00002A   2402         ADD       A,#0x2
   \   00002C   F8           MOV       R0,A
   \   00002D   E4           CLR       A
   \   00002E   3B           ADDC      A,R3
   \   00002F   F9           MOV       R1,A
   \   000030   E8           MOV       A,R0
   \   000031   FE           MOV       R6,A
   \   000032   E9           MOV       A,R1
   \   000033   FF           MOV       R7,A
   \   000034   EC           MOV       A,R4
   \   000035   2403         ADD       A,#0x3
   \   000037   E4           CLR       A
   \   000038   3D           ADDC      A,R5
   \   000039   0C           INC       R4
   \   00003A   0C           INC       R4
   \   00003B   0C           INC       R4
   \   00003C   FD           MOV       R5,A
   \   00003D   8C82         MOV       DPL,R4
   \   00003F   F583         MOV       DPH,A
   \   000041   E0           MOVX      A,@DPTR
   \   000042   540F         ANL       A,#0xf
   \   000044   F5..         MOV       ?V0,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F5..         MOV       ?V1,A
   \   00004A   8882         MOV       DPL,R0
   \   00004C   8983         MOV       DPH,R1
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   C4           SWAP      A
   \   000050   540F         ANL       A,#0xf
   \   000052   F5..         MOV       ?V2,A
   \   000054   75..00       MOV       ?V3,#0x0
   \   000057   7404         MOV       A,#0x4
   \   000059   78..         MOV       R0,#?V2
   \   00005B   12....       LCALL     ?S_SHL
   \   00005E   E5..         MOV       A,?V0
   \   000060   45..         ORL       A,?V2
   \   000062   F8           MOV       R0,A
   \   000063   A9..         MOV       R1,?V1
   \   000065   12....       LCALL     ?Subroutine46 & 0xFFFF
   2660              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_600:
   \   000068   E8           MOV       A,R0
   \   000069   54F0         ANL       A,#0xf0
   \   00006B   F8           MOV       R0,A
   \   00006C   8E82         MOV       DPL,R6
   \   00006E   8F83         MOV       DPH,R7
   \   000070   E0           MOVX      A,@DPTR
   \   000071   540F         ANL       A,#0xf
   \   000073   FE           MOV       R6,A
   \   000074   E8           MOV       A,R0
   \   000075   4E           ORL       A,R6
   \   000076   F5..         MOV       ?V0,A
   \   000078   12....       LCALL     ?Subroutine46 & 0xFFFF
   2661              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \                     ??CrossCallReturnLabel_601:
   \   00007B   EA           MOV       A,R2
   \   00007C   2403         ADD       A,#0x3
   \   00007E   F8           MOV       R0,A
   \   00007F   E4           CLR       A
   \   000080   3B           ADDC      A,R3
   \   000081   F9           MOV       R1,A
   \   000082   E8           MOV       A,R0
   \   000083   FE           MOV       R6,A
   \   000084   E9           MOV       A,R1
   \   000085   FF           MOV       R7,A
   \   000086   E5..         MOV       A,?V1
   \   000088   540F         ANL       A,#0xf
   \   00008A   F5..         MOV       ?V1,A
   \   00008C   8882         MOV       DPL,R0
   \   00008E   8983         MOV       DPH,R1
   \   000090   E0           MOVX      A,@DPTR
   \   000091   C4           SWAP      A
   \   000092   540F         ANL       A,#0xf
   \   000094   F5..         MOV       ?V2,A
   \   000096   740C         MOV       A,#0xc
   \   000098   78..         MOV       R0,#?V2
   \   00009A   12....       LCALL     ?S_SHL
   \   00009D   E5..         MOV       A,?V1
   \   00009F   45..         ORL       A,?V3
   \   0000A1   F9           MOV       R1,A
   \   0000A2   8C82         MOV       DPL,R4
   \   0000A4   8D83         MOV       DPH,R5
   \   0000A6   E5..         MOV       A,?V0
   \   0000A8   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   2662              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_597:
   \   0000AB   8E82         MOV       DPL,R6
   \   0000AD   8F83         MOV       DPH,R7
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   540F         ANL       A,#0xf
   \   0000B2   F8           MOV       R0,A
   \   0000B3   EA           MOV       A,R2
   \   0000B4   2404         ADD       A,#0x4
   \   0000B6   8C82         MOV       DPL,R4
   \   0000B8   8D83         MOV       DPH,R5
   \   0000BA   A3           INC       DPTR
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   54F0         ANL       A,#0xf0
   \   0000BE   F0           MOVX      @DPTR,A
   \   0000BF   E8           MOV       A,R0
   \   0000C0   F9           MOV       R1,A
   \   0000C1   8C82         MOV       DPL,R4
   \   0000C3   8D83         MOV       DPH,R5
   \   0000C5   A3           INC       DPTR
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   49           ORL       A,R1
   \   0000C8   F0           MOVX      @DPTR,A
   2663            }
   2664          }
   \                     ??ZDO_ParsePowerDescRsp_0:
   \   0000C9   02....       LJMP      ??Subroutine204_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000003   F583         MOV       DPH,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   8A82         MOV       DPL,R2
   \   000002   F583         MOV       DPH,A
   \   000004   E0           MOVX      A,@DPTR
   \   000005   8C82         MOV       DPL,R4
   \   000007   8D83         MOV       DPH,R5
   \   000009   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   00000C   22           RET
   2665          
   2666          /*********************************************************************
   2667           * @fn          ZDO_ParseSimpleDescRsp
   2668           *
   2669           * @brief       This function parse the Simple_Desc_rsp message.
   2670           *
   2671           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2672           *         in the SimpleDescriptionFormat_t structure are allocated
   2673           *         and the calling function needs to free [osal_msg_free()]
   2674           *         these buffers.
   2675           *
   2676           * @param       inMsg  - incoming message
   2677           * @param       pSimpleDescRsp - place to parse the message into
   2678           *
   2679           * @return      none
   2680           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2681          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2682          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2683            uint8 *msg;
   2684          
   2685            msg = inMsg->asdu;
   \   000005   12....       LCALL     ?Subroutine10 & 0xFFFF
   2686            pSimpleDescRsp->status = *msg++;
   2687            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2688            msg += sizeof ( uint16 );
   2689            msg++; // Skip past the length field.
   2690          
   2691            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_1:
   \   000008   7011         JNZ       ??ZDO_ParseSimpleDescRsp_0
   2692            {
   2693              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00000A                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00000A   EC           MOV       A,R4
   \   00000B   2403         ADD       A,#0x3
   \   00000D   FC           MOV       R4,A
   \   00000E   5001         JNC       ??ZDO_ParseSimpleDescRsp_1
   \   000010   0D           INC       R5
   \                     ??ZDO_ParseSimpleDescRsp_1:
   \   000011   E8           MOV       A,R0
   \   000012   2403         ADD       A,#0x3
   \   000014   FA           MOV       R2,A
   \   000015   E4           CLR       A
   \   000016   39           ADDC      A,R1
   \   000017   FB           MOV       R3,A
   \   000018   12....       LCALL     `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
   2694            }
   2695          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00001B                REQUIRE ?Subroutine8
   \   00001B                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   2696          
   2697          /*********************************************************************
   2698           * @fn          ZDO_ParseEPListRsp
   2699           *
   2700           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2701           *
   2702           * @param       inMsg  - incoming message
   2703           *
   2704           * @return      none
   2705           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2706          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2707          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   2708            ZDO_ActiveEndpointRsp_t *pRsp;
   2709            uint8 *msg;
   2710            uint8 Status;
   2711            uint8 cnt;
   2712          
   2713            msg = inMsg->asdu;
   \   000005   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F5..         MOV       ?V0,A
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   2714            Status = *msg++;
   \   00000D   85..82       MOV       DPL,?V0
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V3,A
   \   000015   A3           INC       DPTR
   \   000016   8582..       MOV       ?V0,DPL
   \   000019   8583..       MOV       ?V1,DPH
   2715            cnt = msg[2];
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V2,A
   2716          
   2717            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   000021                ; Setup parameters for call to function osal_mem_alloc
   \   000021   12....       LCALL     ?Subroutine139 & 0xFFFF
   2718            if ( pRsp )
   \                     ??CrossCallReturnLabel_224:
   \   000024   6030         JZ        ??ZDO_ParseEPListRsp_0
   2719            {
   2720              pRsp->status = Status;
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   E5..         MOV       A,?V3
   \   00002C   F0           MOVX      @DPTR,A
   2721              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00002D   85..82       MOV       DPL,?V0
   \   000030   85..83       MOV       DPH,?V1
   \   000033   E0           MOVX      A,@DPTR
   \   000034   FA           MOV       R2,A
   \   000035   12....       LCALL     ?Subroutine29 & 0xFFFF
   2722              msg += sizeof( uint16 );
   2723              pRsp->cnt = cnt;
   2724              msg++; // pass cnt
   2725              osal_memcpy( pRsp->epList, msg, cnt );
   2726            }
   \                     ??CrossCallReturnLabel_38:
   \   000038   E5..         MOV       A,?V2
   \   00003A   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A982         MOV       R1,DPL
   \   000041   AA83         MOV       R2,DPH
   \   000043   89..         MOV       ?V4,R1
   \   000045   8A..         MOV       ?V5,R2
   \   000047   88..         MOV       ?V6,R0
   \   000049   78..         MOV       R0,#?V4
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004E   AC..         MOV       R4,?V2
   \   000050   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_643:
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   2727          
   2728            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   000056   EE           MOV       A,R6
   \   000057   FA           MOV       R2,A
   \   000058   EF           MOV       A,R7
   \   000059   FB           MOV       R3,A
   \   00005A   02....       LJMP      ??Subroutine226_0 & 0xFFFF
   2729          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   2404         ADD       A,#0x4
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   3400         ADDC      A,#0x0
   \   000006   FB           MOV       R3,A
   \   000007   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   AE..         MOV       R6,?V4
   \   000010   AF..         MOV       R7,?V5
   \   000012   EA           MOV       A,R2
   \   000013   4F           ORL       A,R7
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   C8           XCH       A,R0
   \   000005   F9           MOV       R1,A
   \   000006   EA           MOV       A,R2
   \   000007   8E82         MOV       DPL,R6
   \   000009   8B83         MOV       DPH,R3
   \   00000B   A3           INC       DPTR
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   E9           MOV       A,R1
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   8E82         MOV       DPL,R6
   \   000012   8B83         MOV       DPH,R3
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   EE           MOV       A,R6
   \   000003   2404         ADD       A,#0x4
   \   000005   FA           MOV       R2,A
   \   000006   E4           CLR       A
   \   000007   3F           ADDC      A,R7
   \   000008                REQUIRE ??Subroutine268_0
   \   000008                ; // Fall through to label ??Subroutine268_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine268_0:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine269_0
   \   000001                ; // Fall through to label ??Subroutine269_0
   2730          
   2731          /*********************************************************************
   2732           * @fn          ZDO_ParseServerDiscRsp
   2733           *
   2734           * @brief       Parse the Server_Discovery_rsp message.
   2735           *
   2736           * @param       inMsg - incoming message.
   2737           * @param       pRsp - place to put the parsed information.
   2738           *
   2739           * @return      none
   2740           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2741          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2742          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2743            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV       A,R2
   \   000006   2413         ADD       A,#0x13
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F9           MOV       R1,A
   \   00000C   8882         MOV       DPL,R0
   \   00000E   F583         MOV       DPH,A
   \   000010   12....       LCALL     ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_654:
   \   000013   F583         MOV       DPH,A
   \   000015   8A82         MOV       DPL,R2
   \   000017   12....       LCALL     ??Subroutine262_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_617:
   \   00001A   12....       LCALL     ?Subroutine34 & 0xFFFF
   2744            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_48:
   \   00001D   8882         MOV       DPL,R0
   \   00001F   F583         MOV       DPH,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FA           MOV       R2,A
   \   000024   8882         MOV       DPL,R0
   \   000026   8983         MOV       DPH,R1
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F9           MOV       R1,A
   \   00002C   EA           MOV       A,R2
   \   00002D   8C82         MOV       DPL,R4
   \   00002F   8D83         MOV       DPH,R5
   \   000031   A3           INC       DPTR
   \   000032   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   2745          }
   \                     ??CrossCallReturnLabel_598:
   \   000035   02....       LJMP      ?Subroutine8 & 0xFFFF
   2746          
   2747          /*********************************************************************
   2748           * @fn          ZDO_ParseMgmtLqiRsp
   2749           *
   2750           * @brief       This function parses the incoming Management
   2751           *              LQI response
   2752           *
   2753           * @param       inMsg - incoming message
   2754           *
   2755           * @return      a pointer to parsed response structure (NULL if not allocated).
   2756           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2757           *          by the calling function [osal_mem_free()].
   2758           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2759          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2760          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2761            ZDO_MgmtLqiRsp_t *pRsp;
   2762            uint8 status;
   2763            uint8 startIndex = 0;
   \   000005   75..00       MOV       ?V5,#0x0
   2764            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV       ?V4,#0x0
   2765            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV       ?V6,#0x0
   2766            uint8 *msg;
   2767          
   2768            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine66 & 0xFFFF
   2769          
   2770            status = *msg++;
   2771            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_101:
   \   000011   7007         JNZ       ??ZDO_ParseMgmtLqiRsp_0
   2772            {
   2773              neighborLqiEntries = *msg++;
   \   000013   12....       LCALL     ?Subroutine64 & 0xFFFF
   2774              startIndex = *msg++;
   2775              neighborLqiCount = *msg++;
   2776            }
   \                     ??CrossCallReturnLabel_97:
   \   000016   5002         JNC       ??ZDO_ParseMgmtLqiRsp_0
   \   000018   05..         INC       ?V3
   2777          
   2778            // Allocate a buffer big enough to handle the list.
   2779            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   2780                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( neighborLqiItem_t )) );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   00001A                ; Setup parameters for call to function osal_mem_alloc
   \   00001A   E5..         MOV       A,?V4
   \   00001C   75F00E       MOV       B,#0xe
   \   00001F   A4           MUL       AB
   \   000020   A9F0         MOV       R1,B
   \   000022   2404         ADD       A,#0x4
   \   000024   FA           MOV       R2,A
   \   000025   E4           CLR       A
   \   000026   39           ADDC      A,R1
   \   000027   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   00002A   AE..         MOV       R6,?V0
   \   00002C   AF..         MOV       R7,?V1
   2781            if ( pRsp )
   \   00002E   EA           MOV       A,R2
   \   00002F   4F           ORL       A,R7
   \   000030   605C         JZ        ??ZDO_ParseMgmtLqiRsp_1
   2782            {
   2783              uint8 x;
   2784              neighborLqiItem_t *pList = pRsp->list;
   \   000032   EA           MOV       A,R2
   \   000033   2404         ADD       A,#0x4
   \   000035   F5..         MOV       ?V0,A
   \   000037   E4           CLR       A
   \   000038   3F           ADDC      A,R7
   \   000039   F5..         MOV       ?V1,A
   2785              pRsp->status = status;
   \   00003B   12....       LCALL     ?Subroutine11 & 0xFFFF
   2786              pRsp->neighborLqiEntries = neighborLqiEntries;
   2787              pRsp->startIndex = startIndex;
   2788              pRsp->neighborLqiCount = neighborLqiCount;
   2789          
   2790              for ( x = 0; x < neighborLqiCount; x++ )
   \                     ??CrossCallReturnLabel_2:
   \   00003E   8047         SJMP      ??ZDO_ParseMgmtLqiRsp_2
   2791              {
   2792                osal_cpyExtAddr(pList->extPANId, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   000040                ; Setup parameters for call to function sAddrExtCpy
   \   000040   AC..         MOV       R4,?V2
   \   000042   AD..         MOV       R5,?V3
   \   000044   E5..         MOV       A,?V0
   \   000046   2404         ADD       A,#0x4
   \   000048   12....       LCALL     ?Subroutine147 & 0xFFFF
   2793                msg += Z_EXTADDR_LEN;
   2794          
   2795                msg += Z_EXTADDR_LEN;  // Throwing away IEEE.
   \                     ??CrossCallReturnLabel_237:
   \   00004B   E5..         MOV       A,?V2
   \   00004D   2410         ADD       A,#0x10
   \   00004F   F5..         MOV       ?V2,A
   \   000051   5002         JNC       ??ZDO_ParseMgmtLqiRsp_4
   \   000053   05..         INC       ?V3
   2796                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtLqiRsp_4:
   \   000055   F582         MOV       DPL,A
   \   000057   85..83       MOV       DPH,?V3
   \   00005A   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00005D   12....       LCALL     ?Subroutine26 & 0xFFFF
   2797                msg += 2 + 1 + 1 + 1;      // Skip DeviceType, RxOnIdle, Rlationship, PermitJoining and Depth
   2798                pList->rxLqi = *msg++;
   \                     ??CrossCallReturnLabel_32:
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   C0E0         PUSH      A
   \   000066   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000069   D0E0         POP       A
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   E5..         MOV       A,?V2
   \   00006E   2406         ADD       A,#0x6
   \   000070   F5..         MOV       ?V2,A
   \   000072   5002         JNC       ??ZDO_ParseMgmtLqiRsp_5
   \   000074   05..         INC       ?V3
   2799                pList->txQuality = 0;  // This is not specified OTA by ZigBee 1.1.
   \                     ??ZDO_ParseMgmtLqiRsp_5:
   \   000076   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000079   E4           CLR       A
   \   00007A   F0           MOVX      @DPTR,A
   2800                pList++;
   \   00007B   E5..         MOV       A,?V0
   \   00007D   240E         ADD       A,#0xe
   \   00007F   F5..         MOV       ?V0,A
   \   000081   5002         JNC       ??ZDO_ParseMgmtLqiRsp_6
   \   000083   05..         INC       ?V1
   2801              }
   \                     ??ZDO_ParseMgmtLqiRsp_6:
   \   000085   05..         INC       ?V5
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   000087   E5..         MOV       A,?V5
   \   000089   C3           CLR       C
   \   00008A   95..         SUBB      A,?V4
   \   00008C   40B2         JC        ??ZDO_ParseMgmtLqiRsp_3
   2802            }
   2803          
   2804            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   00008E   EE           MOV       A,R6
   \   00008F   FA           MOV       R2,A
   \   000090   EF           MOV       A,R7
   \   000091   FB           MOV       R3,A
   \   000092                REQUIRE ?Subroutine2
   \   000092                ; // Fall through to label ?Subroutine2
   2805          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   E5..         MOV       A,?V0
   \   000002   240D         ADD       A,#0xd
   \   000004   12....       LCALL     ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_624:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000003   F5..         MOV       ?V2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   85..82       MOV       DPL,?V2
   \   00000A   F583         MOV       DPH,A
   \   00000C   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V6,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   85..82       MOV       DPL,?V2
   \   00000A   85..83       MOV       DPH,?V3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F5..         MOV       ?V4,A
   \   000012   E5..         MOV       A,?V2
   \   000014   2403         ADD       A,#0x3
   \   000016   F5..         MOV       ?V2,A
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   E5..         MOV       A,?V7
   \   000006   F0           MOVX      @DPTR,A
   \   000007   A3           INC       DPTR
   \   000008   E5..         MOV       A,?V6
   \   00000A   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   00000D   A3           INC       DPTR
   \   00000E   E5..         MOV       A,?V5
   \   000010   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000013   E5..         MOV       A,?V4
   \   000015   F0           MOVX      @DPTR,A
   \   000016   75..00       MOV       ?V5,#0x0
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine186:
   \   000000   12....       LCALL     ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_556:
   \   000003   3B           ADDC      A,R3
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET
   2806          
   2807          /*********************************************************************
   2808           * @fn          ZDO_ParseMgmNwkDiscRsp
   2809           *
   2810           * @brief       This function parses the incoming Management
   2811           *              Network Discover response.
   2812           *
   2813           * @param       inMsg - incoming message
   2814           *
   2815           * @return      pointer to parsed response.  This structure was
   2816           *          allocated using osal_mem_alloc, so it must be freed
   2817           *          by the calling function [osal_mem_free()].
   2818           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2819          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2820          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2821            ZDO_MgmNwkDiscRsp_t *pRsp;
   2822            uint8 status;
   2823            uint8 networkCount = 0;
   \   000005   75..00       MOV       ?V1,#0x0
   2824            uint8 startIndex = 0;
   \   000008   75..00       MOV       ?V0,#0x0
   2825            uint8 networkListCount = 0;
   \   00000B   75..00       MOV       ?V4,#0x0
   2826            uint8 *msg;
   2827          
   2828            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine77 & 0xFFFF
   2829            status = *msg++;
   \                     ??CrossCallReturnLabel_122:
   \   000011   F5..         MOV       ?V5,A
   \   000013   A3           INC       DPTR
   \   000014   AE82         MOV       R6,DPL
   \   000016   AF83         MOV       R7,DPH
   2830          
   2831            if ( status == ZSuccess )
   \   000018   7017         JNZ       ??ZDO_ParseMgmNwkDiscRsp_0
   2832            {
   2833              networkCount = *msg++;
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V1,A
   2834              startIndex = *msg++;
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V0,A
   2835              networkListCount = *msg++;
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V4,A
   \   00002A   EE           MOV       A,R6
   \   00002B   2403         ADD       A,#0x3
   \   00002D   FE           MOV       R6,A
   \   00002E   5001         JNC       ??ZDO_ParseMgmNwkDiscRsp_0
   \   000030   0F           INC       R7
   2836            }
   2837          
   2838            // Allocate a buffer big enough to handle the list.
   2839            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   2840                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   E5..         MOV       A,?V4
   \   000033   F5..         MOV       ?V2,A
   \   000035   75..00       MOV       ?V3,#0x0
   \   000038   7404         MOV       A,#0x4
   \   00003A   78..         MOV       R0,#?V2
   \   00003C   12....       LCALL     ?S_SHL
   \   00003F   E5..         MOV       A,?V2
   \   000041   2404         ADD       A,#0x4
   \   000043   FA           MOV       R2,A
   \   000044   E4           CLR       A
   \   000045   35..         ADDC      A,?V3
   \   000047   FB           MOV       R3,A
   \   000048   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004B   8A..         MOV       ?V2,R2
   \   00004D   8B..         MOV       ?V3,R3
   2841            if ( pRsp )
   \   00004F   EA           MOV       A,R2
   \   000050   4B           ORL       A,R3
   \   000051   7003         JNZ       $+5
   \   000053   02....       LJMP      ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   2842            {
   2843              uint8 x;
   2844              mgmtNwkDiscItem_t *pList;
   2845          
   2846              pRsp->status = status;
   \   000056   8A82         MOV       DPL,R2
   \   000058   8B83         MOV       DPH,R3
   \   00005A   E5..         MOV       A,?V5
   \   00005C   F0           MOVX      @DPTR,A
   2847              pRsp->networkCount = networkCount;
   \   00005D   A3           INC       DPTR
   \   00005E   E5..         MOV       A,?V1
   \   000060   12....       LCALL     ?Subroutine33 & 0xFFFF
   2848              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_45:
   \   000063   E5..         MOV       A,?V0
   \   000065   12....       LCALL     ?Subroutine23 & 0xFFFF
   2849              pRsp->networkListCount = networkListCount;
   \                     ??CrossCallReturnLabel_25:
   \   000068   E5..         MOV       A,?V4
   \   00006A   F0           MOVX      @DPTR,A
   2850              pList = pRsp->list;
   \   00006B   EA           MOV       A,R2
   \   00006C   2404         ADD       A,#0x4
   \   00006E   F5..         MOV       ?V0,A
   \   000070   E4           CLR       A
   \   000071   35..         ADDC      A,?V3
   \   000073   F5..         MOV       ?V1,A
   2851          
   2852              for ( x = 0; x < networkListCount; x++ )
   \   000075   75..00       MOV       ?V5,#0x0
   \   000078   807A         SJMP      ??ZDO_ParseMgmNwkDiscRsp_2
   2853              {
   2854                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   00007A                ; Setup parameters for call to function sAddrExtCpy
   \   00007A   EE           MOV       A,R6
   \   00007B   FC           MOV       R4,A
   \   00007C   EF           MOV       A,R7
   \   00007D   FD           MOV       R5,A
   \   00007E   AA..         MOV       R2,?V0
   \   000080   AB..         MOV       R3,?V1
   \   000082   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2855                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   000085   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000088   A3           INC       DPTR
   \   000089   F0           MOVX      @DPTR,A
   \   00008A   A3           INC       DPTR
   \   00008B   E9           MOV       A,R1
   \   00008C   12....       LCALL     ?Subroutine22 & 0xFFFF
   2856                msg += Z_EXTADDR_LEN;
   2857          
   2858                pList->logicalChannel = *msg++;
   \                     ??CrossCallReturnLabel_23:
   \   00008F   85..82       MOV       DPL,?V0
   \   000092   85..83       MOV       DPH,?V1
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   F0           MOVX      @DPTR,A
   2859                pList->stackProfile = (*msg) & 0x0F;
   \   0000A0   EE           MOV       A,R6
   \   0000A1   2409         ADD       A,#0x9
   \   0000A3   F8           MOV       R0,A
   \   0000A4   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   0000A7   C0E0         PUSH      A
   \   0000A9   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   0000AC   D0E0         POP       A
   \   0000AE   12....       LCALL     ?Subroutine48 & 0xFFFF
   2860                pList->version = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_72:
   \   0000B1   C0E0         PUSH      A
   \   0000B3   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   0000B6   D0E0         POP       A
   \   0000B8   F0           MOVX      @DPTR,A
   2861                pList->beaconOrder = (*msg) & 0x0F;
   \   0000B9   EE           MOV       A,R6
   \   0000BA   240A         ADD       A,#0xa
   \   0000BC   08           INC       R0
   \   0000BD   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   0000C0   C0E0         PUSH      A
   \   0000C2   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   0000C5   D0E0         POP       A
   \   0000C7   12....       LCALL     ?Subroutine48 & 0xFFFF
   2862                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_73:
   \   0000CA   C0E0         PUSH      A
   \   0000CC   E5..         MOV       A,?V0
   \   0000CE   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   0000D1   12....       LCALL     ??Subroutine263_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_620:
   \   0000D4   D0E0         POP       A
   \   0000D6   12....       LCALL     ?Subroutine31 & 0xFFFF
   2863                pList->permitJoining = *msg++;
   \                     ??CrossCallReturnLabel_41:
   \   0000D9   C0E0         PUSH      A
   \   0000DB   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   0000DE   D0E0         POP       A
   \   0000E0   F0           MOVX      @DPTR,A
   \   0000E1   EE           MOV       A,R6
   \   0000E2   240C         ADD       A,#0xc
   \   0000E4   FE           MOV       R6,A
   \   0000E5   5001         JNC       ??ZDO_ParseMgmNwkDiscRsp_4
   \   0000E7   0F           INC       R7
   2864                pList++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   0000E8   E5..         MOV       A,?V0
   \   0000EA   2410         ADD       A,#0x10
   \   0000EC   F5..         MOV       ?V0,A
   \   0000EE   5002         JNC       ??ZDO_ParseMgmNwkDiscRsp_5
   \   0000F0   05..         INC       ?V1
   2865              }
   \                     ??ZDO_ParseMgmNwkDiscRsp_5:
   \   0000F2   05..         INC       ?V5
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0000F4   E5..         MOV       A,?V5
   \   0000F6   C3           CLR       C
   \   0000F7   95..         SUBB      A,?V4
   \   0000F9   5003         JNC       $+5
   \   0000FB   02....       LJMP      ??ZDO_ParseMgmNwkDiscRsp_3 & 0xFFFF
   2866            }
   2867          
   2868            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   0000FE   AA..         MOV       R2,?V2
   \   000100   AB..         MOV       R3,?V3
   \   000102   02....       LJMP      ?Subroutine2 & 0xFFFF
   2869          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   E4           CLR       A
   \   000001   3F           ADDC      A,R7
   \   000002   F9           MOV       R1,A
   \   000003   8882         MOV       DPL,R0
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   540F         ANL       A,#0xf
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL     ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C4           SWAP      A
   \   000005   540F         ANL       A,#0xf
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000003   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_614:
   \   000006   8E82         MOV       DPL,R6
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   22           RET
   2870          
   2871          /*********************************************************************
   2872           * @fn          ZDO_ParseMgmtRtgRsp
   2873           *
   2874           * @brief       This function parses the incoming Management
   2875           *              Routing response.
   2876           *
   2877           * @param       inMsg - incoming message
   2878           *
   2879           * @return      a pointer to parsed response structure (NULL if not allocated).
   2880           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2881           *          by the calling function [osal_mem_free()].
   2882           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2883          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   2884          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2885            ZDO_MgmtRtgRsp_t *pRsp;
   2886            uint8 status;
   2887            uint8 rtgCount = 0;
   \   000005   75..00       MOV       ?V2,#0x0
   2888            uint8 startIndex = 0;
   \   000008   75..00       MOV       ?V1,#0x0
   2889            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV       ?V0,#0x0
   2890            uint8 *msg;
   2891          
   2892            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine77 & 0xFFFF
   2893          
   2894            status = *msg++;
   \                     ??CrossCallReturnLabel_123:
   \   000011   F5..         MOV       ?V3,A
   \   000013   A3           INC       DPTR
   \   000014   AE82         MOV       R6,DPL
   \   000016   AF83         MOV       R7,DPH
   2895            if ( status == ZSuccess )
   \   000018   7017         JNZ       ??ZDO_ParseMgmtRtgRsp_0
   2896            {
   2897              rtgCount = *msg++;
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V2,A
   2898              startIndex = *msg++;
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V1,A
   2899              rtgListCount = *msg++;
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V0,A
   \   00002A   EE           MOV       A,R6
   \   00002B   2403         ADD       A,#0x3
   \   00002D   FE           MOV       R6,A
   \   00002E   5001         JNC       ??ZDO_ParseMgmtRtgRsp_0
   \   000030   0F           INC       R7
   2900            }
   2901          
   2902            // Allocate a buffer big enough to handle the list
   2903            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   2904                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   E5..         MOV       A,?V0
   \   000033   75F007       MOV       B,#0x7
   \   000036   A4           MUL       AB
   \   000037   A9F0         MOV       R1,B
   \   000039   2404         ADD       A,#0x4
   \   00003B   FA           MOV       R2,A
   \   00003C   E4           CLR       A
   \   00003D   39           ADDC      A,R1
   \   00003E   FB           MOV       R3,A
   \   00003F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   2905            if ( pRsp )
   \   000042   EA           MOV       A,R2
   \   000043   4B           ORL       A,R3
   \   000044   605C         JZ        ??ZDO_ParseMgmtRtgRsp_1
   2906            {
   2907              uint8 x;
   2908              rtgItem_t *pList = pRsp->list;
   \   000046   EA           MOV       A,R2
   \   000047   2404         ADD       A,#0x4
   \   000049   F8           MOV       R0,A
   \   00004A   E4           CLR       A
   \   00004B   3B           ADDC      A,R3
   \   00004C   F9           MOV       R1,A
   2909              pRsp->status = status;
   \   00004D   8A82         MOV       DPL,R2
   \   00004F   8B83         MOV       DPH,R3
   \   000051   E5..         MOV       A,?V3
   \   000053   F0           MOVX      @DPTR,A
   2910              pRsp->rtgCount = rtgCount;
   \   000054   A3           INC       DPTR
   \   000055   E5..         MOV       A,?V2
   \   000057   12....       LCALL     ?Subroutine33 & 0xFFFF
   2911              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_46:
   \   00005A   E5..         MOV       A,?V1
   \   00005C   12....       LCALL     ?Subroutine23 & 0xFFFF
   2912              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_26:
   \   00005F   E5..         MOV       A,?V0
   \   000061   F0           MOVX      @DPTR,A
   2913          
   2914              for ( x = 0; x < rtgListCount; x++ )
   \   000062   7C00         MOV       R4,#0x0
   \   000064   8036         SJMP      ??ZDO_ParseMgmtRtgRsp_2
   2915              {
   2916                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   000066   8E82         MOV       DPL,R6
   \   000068   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   E5..         MOV       A,?V3
   \   00006F   12....       LCALL     ?Subroutine25 & 0xFFFF
   2917                msg += 2;
   2918                pList->status = *msg++;
   \                     ??CrossCallReturnLabel_30:
   \   000072   8882         MOV       DPL,R0
   \   000074   8983         MOV       DPH,R1
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   EE           MOV       A,R6
   \   00007D   2403         ADD       A,#0x3
   \   00007F   FE           MOV       R6,A
   \   000080   5001         JNC       ??ZDO_ParseMgmtRtgRsp_4
   \   000082   0F           INC       R7
   2919                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   000083   F582         MOV       DPL,A
   \   000085   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   A3           INC       DPTR
   \   00008C   E5..         MOV       A,?V3
   \   00008E   12....       LCALL     ??Subroutine267_0 & 0xFFFF
   2920                msg += 2;
   \                     ??CrossCallReturnLabel_641:
   \   000091   5001         JNC       ??ZDO_ParseMgmtRtgRsp_5
   \   000093   0F           INC       R7
   2921                pList++;
   \                     ??ZDO_ParseMgmtRtgRsp_5:
   \   000094   E8           MOV       A,R0
   \   000095   2407         ADD       A,#0x7
   \   000097   F8           MOV       R0,A
   \   000098   5001         JNC       ??ZDO_ParseMgmtRtgRsp_6
   \   00009A   09           INC       R1
   2922              }
   \                     ??ZDO_ParseMgmtRtgRsp_6:
   \   00009B   0C           INC       R4
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   00009C   EC           MOV       A,R4
   \   00009D   C3           CLR       C
   \   00009E   95..         SUBB      A,?V0
   \   0000A0   40C4         JC        ??ZDO_ParseMgmtRtgRsp_3
   2923            }
   2924          
   2925            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   0000A2                REQUIRE ?Subroutine4
   \   0000A2                ; // Fall through to label ?Subroutine4
   2926          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   8F83         MOV       DPH,R7
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F5..         MOV       ?V4,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V3,A
   \   000009   E5..         MOV       A,?V4
   \   00000B   8882         MOV       DPL,R0
   \   00000D   8983         MOV       DPH,R1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine267_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   2402         ADD       A,#0x2
   \   000004   FE           MOV       R6,A
   \   000005   22           RET
   2927          
   2928          /*********************************************************************
   2929           * @fn          ZDO_ParseMgmtBindRsp
   2930           *
   2931           * @brief       This function parses the incoming Management
   2932           *              Binding response.
   2933           *
   2934           * @param       inMsg - pointer to message to parse
   2935           *
   2936           * @return      a pointer to parsed response structure (NULL if not allocated).
   2937           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2938           *          by the calling function [osal_mem_free()].
   2939           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2940          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   2941          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   2942            ZDO_MgmtBindRsp_t *pRsp;
   2943            uint8 status;
   2944            uint8 bindingCount = 0;
   \   000005   75..00       MOV       ?V6,#0x0
   2945            uint8 startIndex = 0;
   \   000008   75..00       MOV       ?V5,#0x0
   2946            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV       ?V4,#0x0
   2947            uint8 *msg;
   2948          
   2949            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine66 & 0xFFFF
   2950          
   2951            status = *msg++;
   2952            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_102:
   \   000011   7007         JNZ       ??ZDO_ParseMgmtBindRsp_0
   2953            {
   2954              bindingCount = *msg++;
   \   000013   12....       LCALL     ?Subroutine64 & 0xFFFF
   2955              startIndex = *msg++;
   2956              bindingListCount = *msg++;
   2957            }
   \                     ??CrossCallReturnLabel_98:
   \   000016   5002         JNC       ??ZDO_ParseMgmtBindRsp_0
   \   000018   05..         INC       ?V3
   2958          
   2959            // Allocate a buffer big enough to handle the list
   2960            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   2961                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   00001A                ; Setup parameters for call to function osal_mem_alloc
   \   00001A   E5..         MOV       A,?V4
   \   00001C   75F015       MOV       B,#0x15
   \   00001F   A4           MUL       AB
   \   000020   A9F0         MOV       R1,B
   \   000022   2404         ADD       A,#0x4
   \   000024   12....       LCALL     ?Subroutine133 & 0xFFFF
   2962            if ( pRsp )
   \                     ??CrossCallReturnLabel_214:
   \   000027   7003         JNZ       $+5
   \   000029   02....       LJMP      ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   2963            {
   2964              uint8 x;
   2965              apsBindingItem_t *pList = pRsp->list;
   \   00002C   EA           MOV       A,R2
   \   00002D   2404         ADD       A,#0x4
   \   00002F   FE           MOV       R6,A
   \   000030   E4           CLR       A
   \   000031   35..         ADDC      A,?V1
   \   000033   FF           MOV       R7,A
   2966              pRsp->status = status;
   \   000034   12....       LCALL     ?Subroutine11 & 0xFFFF
   2967              pRsp->bindingCount = bindingCount;
   2968              pRsp->startIndex = startIndex;
   2969              pRsp->bindingListCount = bindingListCount;
   2970          
   2971              for ( x = 0; x < bindingListCount; x++ )
   \                     ??CrossCallReturnLabel_3:
   \   000037   801F         SJMP      ??ZDO_ParseMgmtBindRsp_2
   2972              {
   2973                osal_cpyExtAddr( pList->srcAddr, msg );
   2974                msg += Z_EXTADDR_LEN;
   2975                pList->srcEP = *msg++;
   2976          
   2977                // Get the Cluster ID
   2978          
   2979                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   2980                msg += 2;
   2981                pList->dstAddr.addrMode = *msg++;
   2982                if ( pList->dstAddr.addrMode == Addr64Bit )
   2983                {
   2984                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   2985                  msg += Z_EXTADDR_LEN;
   2986                  pList->dstEP = *msg++;
   2987                }
   2988                else
   2989                {
   2990                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   000039   85..82       MOV       DPL,?V2
   \   00003C   85..83       MOV       DPH,?V3
   \   00003F   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000042   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   2991                  msg += 2;
   \                     ??CrossCallReturnLabel_599:
   \   000045   E5..         MOV       A,?V2
   \   000047   2402         ADD       A,#0x2
   \   000049   F5..         MOV       ?V2,A
   \   00004B   5002         JNC       ??ZDO_ParseMgmtBindRsp_4
   \   00004D   05..         INC       ?V3
   2992                }
   2993          
   2994                pList++;
   \                     ??ZDO_ParseMgmtBindRsp_4:
   \   00004F   EE           MOV       A,R6
   \   000050   2415         ADD       A,#0x15
   \   000052   FE           MOV       R6,A
   \   000053   5001         JNC       ??ZDO_ParseMgmtBindRsp_5
   \   000055   0F           INC       R7
   \                     ??ZDO_ParseMgmtBindRsp_5:
   \   000056   05..         INC       ?V5
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   000058   E5..         MOV       A,?V5
   \   00005A   C3           CLR       C
   \   00005B   95..         SUBB      A,?V4
   \   00005D   5064         JNC       ??ZDO_ParseMgmtBindRsp_1
   \   00005F                ; Setup parameters for call to function sAddrExtCpy
   \   00005F   AC..         MOV       R4,?V2
   \   000061   AD..         MOV       R5,?V3
   \   000063   EE           MOV       A,R6
   \   000064   FA           MOV       R2,A
   \   000065   EF           MOV       A,R7
   \   000066   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000069   8E82         MOV       DPL,R6
   \   00006B   8F83         MOV       DPH,R7
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   F0           MOVX      @DPTR,A
   \   000076   E5..         MOV       A,?V2
   \   000078   2409         ADD       A,#0x9
   \   00007A   F5..         MOV       ?V2,A
   \   00007C   5002         JNC       ??ZDO_ParseMgmtBindRsp_6
   \   00007E   05..         INC       ?V3
   \                     ??ZDO_ParseMgmtBindRsp_6:
   \   000080   F582         MOV       DPL,A
   \   000082   85..83       MOV       DPH,?V3
   \   000085   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000088   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   F8           MOV       R0,A
   \   00008D   EE           MOV       A,R6
   \   00008E   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   000091   E8           MOV       A,R0
   \   000092   F0           MOVX      @DPTR,A
   \   000093   E5..         MOV       A,?V2
   \   000095   2403         ADD       A,#0x3
   \   000097   F5..         MOV       ?V2,A
   \   000099   5002         JNC       ??ZDO_ParseMgmtBindRsp_7
   \   00009B   05..         INC       ?V3
   \                     ??ZDO_ParseMgmtBindRsp_7:
   \   00009D   7403         MOV       A,#0x3
   \   00009F   68           XRL       A,R0
   \   0000A0   7097         JNZ       ??ZDO_ParseMgmtBindRsp_3
   \   0000A2                ; Setup parameters for call to function sAddrExtCpy
   \   0000A2   AC..         MOV       R4,?V2
   \   0000A4   AD..         MOV       R5,?V3
   \   0000A6   EE           MOV       A,R6
   \   0000A7   240B         ADD       A,#0xb
   \   0000A9   FA           MOV       R2,A
   \   0000AA   E4           CLR       A
   \   0000AB   3F           ADDC      A,R7
   \   0000AC   12....       LCALL     ?Subroutine52 & 0xFFFF
   2995              }
   2996            }
   \                     ??CrossCallReturnLabel_79:
   \   0000AF   C0E0         PUSH      A
   \   0000B1   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_547:
   \   0000B4   D0E0         POP       A
   \   0000B6   F0           MOVX      @DPTR,A
   \   0000B7   E5..         MOV       A,?V2
   \   0000B9   2409         ADD       A,#0x9
   \   0000BB   F5..         MOV       ?V2,A
   \   0000BD   5090         JNC       ??ZDO_ParseMgmtBindRsp_4
   \   0000BF   05..         INC       ?V3
   \                     ??ZDO_ParseMgmtBindRsp_8:
   \   0000C1   808C         SJMP      ??ZDO_ParseMgmtBindRsp_4
   2997          
   2998            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   0000C3   AA..         MOV       R2,?V0
   \   0000C5   AB..         MOV       R3,?V1
   \   0000C7   02....       LJMP      ??Subroutine216_0 & 0xFFFF
   2999          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   FB           MOV       R3,A
   \   000001   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000004   85..82       MOV       DPL,?V2
   \   000007   85..83       MOV       DPH,?V3
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   22           RET
   3000          
   3001          /*********************************************************************
   3002           * @fn          ZDO_ParseUserDescRsp
   3003           *
   3004           * @brief       This function parses the incoming User
   3005           *              Descriptor Response.
   3006           *
   3007           * @param       inMsg - incoming response message
   3008           *
   3009           * @return      a pointer to parsed response structure (NULL if not allocated).
   3010           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3011           *          by the calling function [osal_mem_free()].
   3012           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3013          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   3014          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   3015            ZDO_UserDescRsp_t *pRsp;
   3016            uint8 *msg;
   3017            uint8 descLen = 0;
   \   000005   75..00       MOV       ?V3,#0x0
   3018          
   3019            msg = inMsg->asdu;
   \   000008   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   00000B   88..         MOV       ?V0,R0
   \   00000D   F5..         MOV       ?V1,A
   3020          
   3021            if ( msg[0] == ZSuccess )
   \   00000F   8882         MOV       DPL,R0
   \   000011   F583         MOV       DPH,A
   \   000013   E0           MOVX      A,@DPTR
   \   000014   7006         JNZ       ??ZDO_ParseUserDescRsp_0
   3022            {
   3023              descLen = msg[3];
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V3,A
   3024            }
   3025          
   3026            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   00001C                ; Setup parameters for call to function osal_mem_alloc
   \   00001C   E5..         MOV       A,?V3
   \   00001E   12....       LCALL     ?Subroutine139 & 0xFFFF
   3027            if ( pRsp )
   \                     ??CrossCallReturnLabel_225:
   \   000021   6036         JZ        ??ZDO_ParseUserDescRsp_1
   3028            {
   3029              pRsp->status = msg[0];
   \   000023   85..82       MOV       DPL,?V0
   \   000026   85..83       MOV       DPH,?V1
   \   000029   12....       LCALL     ??Subroutine266_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_634:
   \   00002C   12....       LCALL     ?Subroutine36 & 0xFFFF
   3030              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_52:
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   FA           MOV       R2,A
   \   000031   85..82       MOV       DPL,?V0
   \   000034   85..83       MOV       DPH,?V1
   \   000037   A3           INC       DPTR
   \   000038   12....       LCALL     ?Subroutine29 & 0xFFFF
   3031              pRsp->length = descLen;
   \                     ??CrossCallReturnLabel_39:
   \   00003B   E5..         MOV       A,?V3
   \   00003D   F0           MOVX      @DPTR,A
   3032              if ( descLen )
   \   00003E   6019         JZ        ??ZDO_ParseUserDescRsp_1
   3033              {
   3034                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000040                ; Setup parameters for call to function osal_memcpy
   \   000040   E5..         MOV       A,?V0
   \   000042   2404         ADD       A,#0x4
   \   000044   F5..         MOV       ?V0,A
   \   000046   5002         JNC       ??ZDO_ParseUserDescRsp_2
   \   000048   05..         INC       ?V1
   \                     ??ZDO_ParseUserDescRsp_2:
   \   00004A   88..         MOV       ?V2,R0
   \   00004C   78..         MOV       R0,#?V0
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000051   AC..         MOV       R4,?V3
   \   000053   12....       LCALL     ?Subroutine138 & 0xFFFF
   3035              }
   3036            }
   \                     ??CrossCallReturnLabel_644:
   \   000056   12....       LCALL     ?DEALLOC_XSTACK8
   3037          
   3038            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   000059   EE           MOV       A,R6
   \   00005A   FA           MOV       R2,A
   \   00005B   EF           MOV       A,R7
   \   00005C   FB           MOV       R3,A
   \   00005D   02....       LJMP      ?Subroutine4 & 0xFFFF
   3039          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET
   3040          
   3041          /*********************************************************************
   3042           * @fn          ZDO_ParseSimpleDescBuf
   3043           *
   3044           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   3045           *
   3046           * @param       buf  - pointer to a byte array representing a Simple Desc.
   3047           * @param       desc - SimpleDescriptionFormat_t *
   3048           *
   3049           *              This routine allocates storage for the cluster IDs because
   3050           *              they are 16-bit and need to be aligned to be properly processed.
   3051           *              This routine returns non-zero if an allocation fails.
   3052           *
   3053           *              NOTE: This means that the caller or user of the input structure
   3054           *                    is responsible for freeing the memory
   3055           *
   3056           * @return      0: success
   3057           *              1: failure due to malloc failure.
   3058           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3059          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   3060          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EB           MOV       A,R3
   \   000006   8C..         MOV       ?V0,R4
   \   000008   8D..         MOV       ?V1,R5
   3061            uint8 num, i;
   3062          
   3063            desc->EndPoint = *buf++;
   \   00000A   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   00000D   AE82         MOV       R6,DPL
   \   00000F   AF83         MOV       R7,DPH
   3064            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \   000011   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000014   8C82         MOV       DPL,R4
   \   000016   8D83         MOV       DPH,R5
   \   000018   A3           INC       DPTR
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   A3           INC       DPTR
   \   00001B   E9           MOV       A,R1
   \   00001C   12....       LCALL     ??Subroutine267_0 & 0xFFFF
   3065            buf += 2;
   \                     ??CrossCallReturnLabel_642:
   \   00001F   5001         JNC       ??ZDO_ParseSimpleDescBuf_0
   \   000021   0F           INC       R7
   3066            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   000022   F582         MOV       DPL,A
   \   000024   8F83         MOV       DPH,R7
   \   000026   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   E9           MOV       A,R1
   \   00002C   12....       LCALL     ?Subroutine25 & 0xFFFF
   3067            buf += 2;
   3068            desc->AppDevVer = *buf >> 4;
   \                     ??CrossCallReturnLabel_31:
   \   00002F   C4           SWAP      A
   \   000030   540F         ANL       A,#0xf
   3069          
   3070            desc->Reserved = 0;
   \   000032   8C82         MOV       DPL,R4
   \   000034   8D83         MOV       DPH,R5
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   12....       LCALL     ?Subroutine44 & 0xFFFF
   3071            buf++;
   3072          
   3073            // move in input cluster list (if any). allocate aligned memory.
   3074            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_65:
   \   00003E   F5..         MOV       ?V4,A
   \   000040   EE           MOV       A,R6
   \   000041   2404         ADD       A,#0x4
   \   000043   FE           MOV       R6,A
   \   000044   5001         JNC       ??ZDO_ParseSimpleDescBuf_1
   \   000046   0F           INC       R7
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000047   8C82         MOV       DPL,R4
   \   000049   8D83         MOV       DPH,R5
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   E5..         MOV       A,?V4
   \   000053   F0           MOVX      @DPTR,A
   3075            if ( num )
   \   000054   6026         JZ        ??ZDO_ParseSimpleDescBuf_2
   3076            {
   3077              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   000056                ; Setup parameters for call to function osal_mem_alloc
   \   000056   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000059   E5..         MOV       A,?V0
   \   00005B   2407         ADD       A,#0x7
   \   00005D   F8           MOV       R0,A
   \   00005E   E4           CLR       A
   \   00005F   35..         ADDC      A,?V1
   \   000061   8882         MOV       DPL,R0
   \   000063   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   000066   6077         JZ        ??ZDO_ParseSimpleDescBuf_3
   3078              {
   3079                // malloc failed. we're done.
   3080                return 1;
   3081              }
   3082              for (i=0; i<num; ++i)
   \   000068   7800         MOV       R0,#0x0
   \   00006A   800A         SJMP      ??ZDO_ParseSimpleDescBuf_4
   3083              {
   3084                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   00006C   12....       LCALL     ?Subroutine61 & 0xFFFF
   3085                buf += 2;
   3086              }
   \                     ??CrossCallReturnLabel_92:
   \   00006F   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_639:
   \   000072   5001         JNC       ??ZDO_ParseSimpleDescBuf_6
   \   000074   0F           INC       R7
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   000075   08           INC       R0
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   000076   E8           MOV       A,R0
   \   000077   C3           CLR       C
   \   000078   95..         SUBB      A,?V4
   \   00007A   40F0         JC        ??ZDO_ParseSimpleDescBuf_5
   3087            }
   3088          
   3089            // move in output cluster list (if any). allocate aligned memory.
   3090            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   00007C   8E82         MOV       DPL,R6
   \   00007E   8F83         MOV       DPH,R7
   \   000080   E0           MOVX      A,@DPTR
   \   000081   F5..         MOV       ?V2,A
   \   000083   A3           INC       DPTR
   \   000084   AE82         MOV       R6,DPL
   \   000086   AF83         MOV       R7,DPH
   \   000088   85..82       MOV       DPL,?V0
   \   00008B   85..83       MOV       DPH,?V1
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   F0           MOVX      @DPTR,A
   3091            if (num)
   \   000098   6060         JZ        ??ZDO_ParseSimpleDescBuf_7
   3092            {
   3093              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   00009A                ; Setup parameters for call to function osal_mem_alloc
   \   00009A   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   00009D   85..82       MOV       DPL,?V0
   \   0000A0   85..83       MOV       DPH,?V1
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   12....       LCALL     ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   0000B0   7031         JNZ       ??ZDO_ParseSimpleDescBuf_8
   3094              {
   3095                // malloc failed. free input cluster list memory if there is any
   3096                if ( desc->pAppInClusterList != NULL )
   \   0000B2   85..82       MOV       DPL,?V0
   \   0000B5   85..83       MOV       DPH,?V1
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   0000C2   601B         JZ        ??ZDO_ParseSimpleDescBuf_3
   3097                {
   3098                  osal_mem_free(desc->pAppInClusterList);
   \   0000C4   E5..         MOV       A,?V0
   \   0000C6   2407         ADD       A,#0x7
   \   0000C8   F5..         MOV       ?V2,A
   \   0000CA   E4           CLR       A
   \   0000CB   35..         ADDC      A,?V1
   \   0000CD   F5..         MOV       ?V3,A
   \   0000CF                ; Setup parameters for call to function osal_mem_free
   \   0000CF   85..82       MOV       DPL,?V2
   \   0000D2   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   3099          
   3100                  desc->pAppInClusterList = NULL;
   \                     ??CrossCallReturnLabel_497:
   \   0000D5   85..82       MOV       DPL,?V2
   \   0000D8   85..83       MOV       DPH,?V3
   \   0000DB   E4           CLR       A
   \   0000DC   F0           MOVX      @DPTR,A
   \   0000DD   A3           INC       DPTR
   \   0000DE   F0           MOVX      @DPTR,A
   3101                }
   3102                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   0000DF   7901         MOV       R1,#0x1
   \   0000E1   8019         SJMP      ??ZDO_ParseSimpleDescBuf_9
   3103              }
   3104              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   0000E3   7800         MOV       R0,#0x0
   \   0000E5   800D         SJMP      ??ZDO_ParseSimpleDescBuf_10
   3105              {
   3106                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   0000E7   12....       LCALL     ?Subroutine61 & 0xFFFF
   3107                buf += 2;
   3108              }
   \                     ??CrossCallReturnLabel_93:
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   A3           INC       DPTR
   \   0000ED   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_640:
   \   0000F0   5001         JNC       ??ZDO_ParseSimpleDescBuf_12
   \   0000F2   0F           INC       R7
   \                     ??ZDO_ParseSimpleDescBuf_12:
   \   0000F3   08           INC       R0
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   0000F4   E8           MOV       A,R0
   \   0000F5   C3           CLR       C
   \   0000F6   95..         SUBB      A,?V2
   \   0000F8   40ED         JC        ??ZDO_ParseSimpleDescBuf_11
   3109            }
   3110            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   0000FA   7900         MOV       R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   0000FC   02....       LJMP      ?Subroutine4 & 0xFFFF
   3111          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FC           MOV       R4,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FA           MOV       R2,A
   \   000009   E4           CLR       A
   \   00000A   CA           XCH       A,R2
   \   00000B   FB           MOV       R3,A
   \   00000C   EC           MOV       A,R4
   \   00000D   2A           ADD       A,R2
   \   00000E   E4           CLR       A
   \   00000F   3B           ADDC      A,R3
   \   000010   FD           MOV       R5,A
   \   000011   E8           MOV       A,R0
   \   000012   25E0         ADD       A,0xE0 /* A   */
   \   000014   FA           MOV       R2,A
   \   000015   E4           CLR       A
   \   000016   33           RLC       A
   \   000017   FB           MOV       R3,A
   \   000018   85..82       MOV       DPL,?V0
   \   00001B   85..83       MOV       DPH,?V1
   \   00001E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   2A           ADD       A,R2
   \   000009   F9           MOV       R1,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   3B           ADDC      A,R3
   \   00000D   8982         MOV       DPL,R1
   \   00000F   F583         MOV       DPH,A
   \   000011   EC           MOV       A,R4
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   ED           MOV       A,R5
   \   000015                REQUIRE ??Subroutine267_0
   \   000015                ; // Fall through to label ??Subroutine267_0
   3112          
   3113          /*********************************************************************
   3114           * @fn          ZDO_ParseDeviceAnnce
   3115           *
   3116           * @brief       Parse a Device Announce message.
   3117           *
   3118           * @param       inMsg - Incoming message
   3119           * @param       pAnnce - place to put the parsed information
   3120           *
   3121           * @return      none
   3122           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3123          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3124          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV       ?V0,R4
   \   000007   8D..         MOV       ?V1,R5
   3125            uint8 *msg;
   3126          
   3127            // Parse incoming message
   3128            msg = inMsg->asdu;
   \   000009   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   00000C   FF           MOV       R7,A
   3129            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00000D   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000010   12....       LCALL     ?Subroutine46 & 0xFFFF
   3130            msg += 2;
   \                     ??CrossCallReturnLabel_602:
   \   000013   E8           MOV       A,R0
   \   000014   2402         ADD       A,#0x2
   \   000016   FE           MOV       R6,A
   \   000017   5001         JNC       ??ZDO_ParseDeviceAnnce_0
   \   000019   0F           INC       R7
   3131            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??ZDO_ParseDeviceAnnce_0:
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   FC           MOV       R4,A
   \   00001B   EF           MOV       A,R7
   \   00001C   FD           MOV       R5,A
   \   00001D   E5..         MOV       A,?V0
   \   00001F   2402         ADD       A,#0x2
   \   000021   12....       LCALL     ?Subroutine147 & 0xFFFF
   3132            msg += Z_EXTADDR_LEN;
   3133            pAnnce->capabilities = *msg;
   \                     ??CrossCallReturnLabel_238:
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   F0           MOVX      @DPTR,A
   3134          }
   \   000033   02....       LJMP      ??Subroutine206_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   85..82       MOV       DPL,?V0
   \   000009   85..83       MOV       DPH,?V1
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   22           RET
   3135          
   3136          /*********************************************************************
   3137           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3138           *
   3139           * @brief       This function handles parsing of the incoming Management
   3140           *              Network Update notify.
   3141           *
   3142           * @param       inMsg - incoming message (request)
   3143           *
   3144           * @return      a pointer to parsed response structure (NULL if not allocated).
   3145           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3146           *          by the calling function [osal_mem_free()].
   3147           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3148          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3149          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   3150            uint8 status;
   3151            uint32 scannedChannels = 0;
   \   000005   75..00       MOV       ?V4,#0x0
   \   000008   75..00       MOV       ?V5,#0x0
   \   00000B   75..00       MOV       ?V6,#0x0
   \   00000E   75..00       MOV       ?V7,#0x0
   3152            uint16 totalTransmissions = 0;
   \   000011   75..00       MOV       ?V0,#0x0
   \   000014   75..00       MOV       ?V1,#0x0
   3153            uint16 transmissionFailures = 0;
   \   000017   75..00       MOV       ?V2,#0x0
   \   00001A   75..00       MOV       ?V3,#0x0
   3154            uint8 listCount = 0;
   \   00001D   75..00       MOV       ?V10,#0x0
   3155            uint8 *msg = inMsg->asdu;
   \   000020   12....       LCALL     ?Subroutine77 & 0xFFFF
   3156            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3157          
   3158            status = *msg++;
   \                     ??CrossCallReturnLabel_124:
   \   000023   F5..         MOV       ?V11,A
   \   000025   A3           INC       DPTR
   \   000026   AE82         MOV       R6,DPL
   \   000028   AF83         MOV       R7,DPH
   3159            if ( status == ZSuccess )
   \   00002A   7041         JNZ       ??ZDO_ParseMgmtNwkUpdateNotify_0
   3160            {
   3161              scannedChannels = osal_build_uint32( msg, 4 );
   \   00002C                ; Setup parameters for call to function osal_build_uint32
   \   00002C   7904         MOV       R1,#0x4
   \   00002E   EE           MOV       A,R6
   \   00002F   FA           MOV       R2,A
   \   000030   EF           MOV       A,R7
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000035   8A..         MOV       ?V4,R2
   \   000037   8B..         MOV       ?V5,R3
   \   000039   8C..         MOV       ?V6,R4
   \   00003B   8D..         MOV       ?V7,R5
   3162              msg += 4;
   \   00003D   EE           MOV       A,R6
   \   00003E   2404         ADD       A,#0x4
   \   000040   FE           MOV       R6,A
   \   000041   5001         JNC       ??ZDO_ParseMgmtNwkUpdateNotify_1
   \   000043   0F           INC       R7
   3163              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_1:
   \   000044   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_651:
   \   000047   F5..         MOV       ?V0,A
   \   000049   E4           CLR       A
   \   00004A   39           ADDC      A,R1
   \   00004B   F5..         MOV       ?V1,A
   3164              msg += 2;
   \   00004D   EE           MOV       A,R6
   \   00004E   2402         ADD       A,#0x2
   \   000050   FE           MOV       R6,A
   \   000051   5001         JNC       ??ZDO_ParseMgmtNwkUpdateNotify_2
   \   000053   0F           INC       R7
   3165              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_2:
   \   000054   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_652:
   \   000057   F5..         MOV       ?V2,A
   \   000059   E4           CLR       A
   \   00005A   39           ADDC      A,R1
   \   00005B   F5..         MOV       ?V3,A
   3166              msg += 2;
   3167              listCount = *msg++;
   \   00005D   8E82         MOV       DPL,R6
   \   00005F   8F83         MOV       DPH,R7
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F5..         MOV       ?V10,A
   \   000066   EE           MOV       A,R6
   \   000067   2403         ADD       A,#0x3
   \   000069   FE           MOV       R6,A
   \   00006A   5001         JNC       ??ZDO_ParseMgmtNwkUpdateNotify_0
   \   00006C   0F           INC       R7
   3168            }
   3169          
   3170            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   00006D                ; Setup parameters for call to function osal_mem_alloc
   \   00006D   E5..         MOV       A,?V10
   \   00006F   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000072   3400         ADDC      A,#0x0
   \   000074   FB           MOV       R3,A
   \   000075   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000078   8A..         MOV       ?V8,R2
   \   00007A   8B..         MOV       ?V9,R3
   3171          
   3172            if ( pRsp )
   \   00007C   EA           MOV       A,R2
   \   00007D   4B           ORL       A,R3
   \   00007E   604A         JZ        ??ZDO_ParseMgmtNwkUpdateNotify_3
   3173            {
   3174              pRsp->status = status;
   \   000080   8A82         MOV       DPL,R2
   \   000082   8B83         MOV       DPH,R3
   \   000084   E5..         MOV       A,?V11
   \   000086   F0           MOVX      @DPTR,A
   3175              pRsp->scannedChannels = scannedChannels;
   \   000087   A3           INC       DPTR
   \   000088   78..         MOV       R0,#?V4
   \   00008A   12....       LCALL     ?L_MOV_TO_X
   3176              pRsp->totalTransmissions = totalTransmissions;
   \   00008D   8A82         MOV       DPL,R2
   \   00008F   8B83         MOV       DPH,R3
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   E5..         MOV       A,?V0
   \   000098   F0           MOVX      @DPTR,A
   \   000099   A3           INC       DPTR
   \   00009A   E5..         MOV       A,?V1
   \   00009C   12....       LCALL     ?Subroutine15 & 0xFFFF
   3177              pRsp->transmissionFailures = transmissionFailures;
   \                     ??CrossCallReturnLabel_11:
   \   00009F   E5..         MOV       A,?V2
   \   0000A1   F0           MOVX      @DPTR,A
   \   0000A2   A3           INC       DPTR
   \   0000A3   E5..         MOV       A,?V3
   \   0000A5   12....       LCALL     ?Subroutine15 & 0xFFFF
   3178              pRsp->listCount = listCount;
   \                     ??CrossCallReturnLabel_12:
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   E5..         MOV       A,?V10
   \   0000AC   F0           MOVX      @DPTR,A
   3179          
   3180              // Allocate a buffer big enough to handle the list.
   3181              if ( listCount > 0 )
   \   0000AD   601B         JZ        ??ZDO_ParseMgmtNwkUpdateNotify_3
   3182              {
   3183                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   0000AF                ; Setup parameters for call to function osal_memcpy
   \   0000AF   8E..         MOV       ?V0,R6
   \   0000B1   8F..         MOV       ?V1,R7
   \   0000B3   75..00       MOV       ?V2,#0x0
   \   0000B6   78..         MOV       R0,#?V0
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BB   AC..         MOV       R4,?V10
   \   0000BD   7D00         MOV       R5,#0x0
   \   0000BF   12....       LCALL     ?Subroutine188 & 0xFFFF
   3184              }
   3185            }
   \                     ??CrossCallReturnLabel_351:
   \   0000C2   35..         ADDC      A,?V9
   \   0000C4   12....       LCALL     ??Subroutine268_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_645:
   \   0000C7   12....       LCALL     ?DEALLOC_XSTACK8
   3186          
   3187            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_3:
   \   0000CA   AA..         MOV       R2,?V8
   \   0000CC   AB..         MOV       R3,?V9
   \   0000CE   02....       LJMP      ?Subroutine5 & 0xFFFF
   3188          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   F582         MOV       DPL,A
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine270_0
   \   000004                ; // Fall through to label ??Subroutine270_0
   3189          
   3190          /*********************************************************************
   3191           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3192           *
   3193           * @brief       This function handles parsing the incoming Management
   3194           *              Network Update request and starts the request (if needed).
   3195           *
   3196           * @param       inMsg - incoming message (request)
   3197           * @param       pReq - pointer to place to parse message to
   3198           *
   3199           * @return      none
   3200           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3201          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3202          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV       ?V0,R4
   \   000007   8D..         MOV       ?V1,R5
   3203            uint8 *msg = inMsg->asdu;
   \   000009   12....       LCALL     ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_555:
   \   00000C   3B           ADDC      A,R3
   \   00000D   12....       LCALL     ?Subroutine65 & 0xFFFF
   3204          
   3205            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_100:
   \   000010   85..82       MOV       DPL,?V0
   \   000013   85..83       MOV       DPH,?V1
   \   000016   12....       LCALL     ?XSTORE_R0123
   3206            msg += 4;
   3207            pReq->scanDuration = *msg++;
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F8           MOV       R0,A
   \   000023   85..82       MOV       DPL,?V0
   \   000026   85..83       MOV       DPH,?V1
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   F0           MOVX      @DPTR,A
   3208          
   3209            if ( pReq->scanDuration <= 0x05 )
   \   00002E   C3           CLR       C
   \   00002F   9406         SUBB      A,#0x6
   \   000031   5009         JNC       ??ZDO_ParseMgmtNwkUpdateReq_0
   3210            {
   3211              // Request is to scan over channelMask
   3212              pReq->scanCount = *msg;
   \   000033   8E82         MOV       DPL,R6
   \   000035   8F83         MOV       DPH,R7
   \   000037   12....       LCALL     ?Subroutine173 & 0xFFFF
   3213            }
   \                     ??CrossCallReturnLabel_285:
   \   00003A   8040         SJMP      ??ZDO_ParseMgmtNwkUpdateReq_1
   3214            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   00003C   85..82       MOV       DPL,?V0
   \   00003F   85..83       MOV       DPH,?V1
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   64FE         XRL       A,#0xfe
   \   000049   600E         JZ        ??ZDO_ParseMgmtNwkUpdateReq_2
   \   00004B   85..82       MOV       DPL,?V0
   \   00004E   85..83       MOV       DPH,?V1
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   E0           MOVX      A,@DPTR
   \   000056   F4           CPL       A
   \   000057   7024         JNZ       ??ZDO_ParseMgmtNwkUpdateReq_3
   3215            {
   3216              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3217              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   000059   8E82         MOV       DPL,R6
   \   00005B   8F83         MOV       DPH,R7
   \   00005D   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000060   F0           MOVX      @DPTR,A
   \   000061   EE           MOV       A,R6
   \   000062   2406         ADD       A,#0x6
   \   000064   FE           MOV       R6,A
   \   000065   5001         JNC       ??ZDO_ParseMgmtNwkUpdateReq_4
   \   000067   0F           INC       R7
   3218          
   3219              if ( pReq->scanDuration == 0xFF )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_4:
   \   000068   85..82       MOV       DPL,?V0
   \   00006B   85..83       MOV       DPH,?V1
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   E0           MOVX      A,@DPTR
   \   000073   F4           CPL       A
   \   000074   7007         JNZ       ??ZDO_ParseMgmtNwkUpdateReq_3
   3220              {
   3221                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000076   12....       LCALL     ?Subroutine70 & 0xFFFF
   3222              }
   3223            }
   \                     ??CrossCallReturnLabel_111:
   \   000079   F0           MOVX      @DPTR,A
   \   00007A   A3           INC       DPTR
   \   00007B   E9           MOV       A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   00007C   F0           MOVX      @DPTR,A
   3224          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   00007D   02....       LJMP      ??Subroutine206_0 & 0xFFFF

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "StartDevice ERR">`:
   \   000000   53746172     DB "StartDevice ERR"
   \            74446576
   \            69636520
   \            45525200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MODE unknown">`:
   \   000000   4D4F4445     DB "MODE unknown"
   \            20756E6B
   \            6E6F776E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End Device Bind">`:
   \   000000   456E6420     DB "End Device Bind"
   \            44657669
   \            63652042
   \            696E6400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Success Sent">`:
   \   000000   53756363     DB "Success Sent"
   \            65737320
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Timeout">`:
   \   000000   54696D65     DB "Timeout"
   \            6F757400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Match Desc Req">`:
   \   000000   4D617463     DB "Match Desc Req"
   \            68204465
   \            73632052
   \            657100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rsp Sent">`:
   \   000000   52737020     DB "Rsp Sent"
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rsp Non Matched">`:
   \   000000   52737020     DB "Rsp Non Matched"
   \            4E6F6E20
   \            4D617463
   \            68656400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Non Matched">`:
   \   000000   4E6F6E20     DB "Non Matched"
   \            4D617463
   \            68656400
   3225          
   3226          /*********************************************************************
   3227          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   NLME_PermitJoiningTimeout
      1     70   ZDMatchSendState
        0     37   -> APS_SetEndDeviceBindTimeout
        0     37   -> ZDO_RemoveMatchMemory
        0     45   -> ZDP_BindUnbindReq
        0     42   -> ZDP_SendData
        0     37   -> sAddrExtCpy
      0     42   ZDO_AnyClusterMatches
      1     10   ZDO_BuildSimpleDescBuf
      0     45   ZDO_CompareClusterLists
      0     38   ZDO_ConvertOTAClusters
      0     43   ZDO_CopyMatchInfo
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      2      0   ZDO_EndDeviceBindMatchTimeoutCB
        2      0   -> ZDMatchSendState
      1     17   ZDO_EndDeviceTimeoutCB
        0     12   -> HalLcdWriteString
        0     17   -> ZDP_SendData
        0     12   -> osal_mem_free
      2      0   ZDO_Init
        2      0   -> APS_ReflectorInit
        2      0   -> NLME_CoordinatorInit
        2      0   -> sAddrExtCpy
      1     30   ZDO_MatchEndDeviceBind
        0     25   -> APS_SetEndDeviceBindTimeout
        0     25   -> ZDMatchSendState
        0     29   -> ZDO_CompareClusterLists
        0     25   -> ZDO_CopyMatchInfo
        0     25   -> ZDO_RemoveMatchMemory
        0     30   -> ZDP_SendData
        0     25   -> osal_mem_alloc
        0     28   -> osal_memcpy
        0     25   -> osal_memset
      1     14   ZDO_ParseAddrRsp
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     10   ZDO_ParseBindUnbindReq
        0     10   -> sAddrExtCpy
      1     52   ZDO_ParseDeviceAnnce
        0     10   -> sAddrExtCpy
      1     18   ZDO_ParseEPListRsp
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
      1     12   ZDO_ParseEndDeviceBindReq
        0     12   -> ZDO_ConvertOTAClusters
        0     12   -> osal_mem_alloc
        0     12   -> sAddrExtCpy
      1     16   ZDO_ParseMgmNwkDiscRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     18   ZDO_ParseMgmtBindRsp
        0     18   -> osal_mem_alloc
        0     18   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtLqiRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     25   ZDO_ParseMgmtNwkUpdateNotify
        0     22   -> osal_build_uint32
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
      1     10   ZDO_ParseMgmtNwkUpdateReq
        0     10   -> osal_build_uint32
      1     14   ZDO_ParseMgmtRtgRsp
        0     14   -> osal_mem_alloc
      1     10   ZDO_ParseNodeDescRsp
      1     12   ZDO_ParsePowerDescRsp
      1      9   ZDO_ParseServerDiscRsp
      1     23   ZDO_ParseSimpleDescBuf
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      1      9   ZDO_ParseSimpleDescRsp
        0      9   -> ZDO_ParseSimpleDescBuf
      1     17   ZDO_ParseUserDescRsp
        0     14   -> osal_mem_alloc
        0     17   -> osal_memcpy
      0     21   ZDO_ProcessActiveEPReq
        0     14   -> NLME_GetShortAddr
        0     21   -> ZDP_EPRsp
        0     14   -> afEndPoints
        0     14   -> afNumEndPoints
      0     29   ZDO_ProcessBindUnbindReq
        0     25   -> APSME_BindRequest
        0     24   -> APSME_LookupNwkAddr
        0     25   -> APSME_UnBindRequest
        0     24   -> NLME_GetExtAddr
        0     24   -> ZDApp_NVUpdate
        0     24   -> ZDP_NwkAddrReq
        0     29   -> ZDP_SendData
        0     24   -> sAddrExtCmp
        0     24   -> sAddrExtCpy
      0     42   ZDO_ProcessDeviceAnnce
        0     42   -> AddrMgrEntryLookupExt
        0     42   -> AddrMgrEntryLookupNwk
        0     42   -> AddrMgrEntryUpdate
        0     42   -> AddrMgrExtAddrSet
        0     42   -> AssocChangeNwkAddr
        0     42   -> AssocGetWithExt
        0     42   -> AssocRemove
        0     42   -> NLME_CheckNewAddrSet
        0     42   -> NLME_GetCoordExtAddr
        0     42   -> NLME_GetCoordShortAddr
        0     42   -> NLME_GetShortAddr
        0     42   -> RTG_RemoveRtgEntry
        0     42   -> ZDApp_NVUpdate
        0     42   -> ZDO_ParseDeviceAnnce
        0     42   -> ZMacSetReq
        0     42   -> nwkNeighborRemoveAllStranded
        0     42   -> nwkNeighborUpdateNwkAddr
        0     42   -> osal_memset
        0     42   -> sAddrExtCmp
      1     35   ZDO_ProcessMatchDescReq
        0     28   -> HalLcdWriteScreen
        0     28   -> NLME_IsAddressBroadcast
        0     30   -> ZDO_AnyClusterMatches
        0     28   -> ZDO_ConvertOTAClusters
        0     35   -> ZDP_EPRsp
        0     28   -> osal_mem_alloc
        0     28   -> osal_mem_free
        0     31   -> osal_memcpy
        0     28   -> osal_msg_allocate
        0     28   -> osal_msg_send
      0     25   ZDO_ProcessMgmtBindReq
        0     20   -> APSME_GetRequest
        0     25   -> ZDP_MgmtBindRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      1     16   ZDO_ProcessMgmtDirectJoinReq
        0     11   -> NLME_DirectJoinRequest
        0     16   -> ZDP_SendData
      1     23   ZDO_ProcessMgmtLeaveReq
        0     18   -> AddrMgrExtAddrValid
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_LeaveReq
        0     23   -> ZDP_SendData
        0     18   -> sAddrExtCmp
      1     64   ZDO_ProcessMgmtLqiReq
        0     59   -> AddrMgrEntryLookupNwk
        0     59   -> AssocCount
        0     59   -> AssocFindDevice
        0     59   -> NLME_GetRequest
        0     64   -> ZDP_MgmtLqiRsp
        0     59   -> osal_mem_alloc
        0     59   -> osal_mem_free
        0     59   -> osal_memset
        0     59   -> sAddrExtCpy
      1     17   ZDO_ProcessMgmtNwkDiscReq
        0     17   -> NLME_NwkDiscReq2
        0     17   -> NLME_NwkDiscTerm
        0     17   -> osal_build_uint32
      1     16   ZDO_ProcessMgmtPermitJoinReq
        0     11   -> NLME_PermitJoiningRequest
        0     16   -> ZDP_SendData
      0     22   ZDO_ProcessMgmtRtgReq
        0     17   -> NLME_GetRequest
        0     22   -> ZDP_MgmtRtgRsp
        0     17   -> osal_mem_alloc
        0     17   -> osal_mem_free
      0     14   ZDO_ProcessNodeDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_NodeDescMsg
      0     14   ZDO_ProcessPowerDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_PowerDescMsg
      0     14   ZDO_ProcessServerDiscReq
        0     14   -> ZDP_ServerDiscRsp
      0     12   ZDO_ProcessSimpleDescReq
        0     12   -> ZDP_SimpleDescMsg
        0     12   -> afFindSimpleDesc
        0     12   -> osal_mem_free
      0     33   ZDO_ProcessUserDescReq
        0     33   -> ZDP_GenericRsp
        0     32   -> ZDP_UserDescRsp
        0     33   -> osal_nv_read
      1     41   ZDO_ProcessUserDescSet
        0     41   -> ZDP_SendData
        0     39   -> osal_memcpy
        0     40   -> osal_nv_write
      2     37   ZDO_RemoveMatchMemory
        2      0   -> osal_mem_free
      0     18   ZDO_StartDevice
        0     11   -> HalLcdWriteScreen
        0     18   -> NLME_NetworkFormationRequest
        0     11   -> NLME_StartRouterRequest
        0     11   -> osal_start_timerEx
      2     13   ZDO_UpdateAddrManager
        2     13   -> AddrMgrEntryUpdate
        2     13   -> AddrMgrExtAddrSet
      1     12   ZDO_UpdateNwkStatus
        0     12   -> NLME_GetExtAddr
        0     12   -> NLME_GetShortAddr
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_find
        0     12   -> osal_msg_send
        0     12   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "End Device Bind">
      13  ?<Constant "MODE unknown">
      15  ?<Constant "Match Desc Req">
      12  ?<Constant "Non Matched">
      16  ?<Constant "Rsp Non Matched">
       9  ?<Constant "Rsp Sent">
      16  ?<Constant "StartDevice ERR">
      13  ?<Constant "Success Sent">
       8  ?<Constant "Timeout">
       5  ??Subroutine204_0
       3  ??Subroutine205_0
       5  ??Subroutine206_0
       6  ??Subroutine207_0
       1  ??Subroutine208_0
       5  ??Subroutine209_0
       4  ??Subroutine210_0
       7  ??Subroutine211_0
       5  ??Subroutine212_0
       2  ??Subroutine213_0
       9  ??Subroutine214_0
       4  ??Subroutine215_0
       5  ??Subroutine216_0
       8  ??Subroutine217_0
       1  ??Subroutine218_0
       5  ??Subroutine219_0
       1  ??Subroutine220_0
       4  ??Subroutine221_0
      10  ??Subroutine222_0
       6  ??Subroutine223_0
       4  ??Subroutine224_0
       6  ??Subroutine225_0
       5  ??Subroutine226_0
       6  ??Subroutine227_0
       2  ??Subroutine228_0
       6  ??Subroutine229_0
       3  ??Subroutine230_0
       4  ??Subroutine231_0
       6  ??Subroutine232_0
       4  ??Subroutine233_0
       2  ??Subroutine234_0
       6  ??Subroutine235_0
       9  ??Subroutine236_0
       2  ??Subroutine237_0
       6  ??Subroutine238_0
      10  ??Subroutine239_0
       5  ??Subroutine240_0
       5  ??Subroutine241_0
       5  ??Subroutine242_0
       2  ??Subroutine243_0
       7  ??Subroutine244_0
       7  ??Subroutine245_0
       3  ??Subroutine246_0
       4  ??Subroutine247_0
       6  ??Subroutine248_0
       8  ??Subroutine249_0
       5  ??Subroutine250_0
       6  ??Subroutine251_0
       8  ??Subroutine252_0
       2  ??Subroutine253_0
       8  ??Subroutine254_0
      13  ??Subroutine255_0
       9  ??Subroutine256_0
       4  ??Subroutine257_0
       4  ??Subroutine258_0
       5  ??Subroutine259_0
       5  ??Subroutine260_0
       5  ??Subroutine261_0
       6  ??Subroutine262_0
       5  ??Subroutine263_0
       5  ??Subroutine264_0
       5  ??Subroutine265_0
       6  ??Subroutine266_0
       6  ??Subroutine267_0
       1  ??Subroutine268_0
       6  ??Subroutine269_0
      10  ??Subroutine270_0
       7  ?Subroutine0
       3  ?Subroutine1
      38  ?Subroutine10
      15  ?Subroutine100
      14  ?Subroutine101
       4  ?Subroutine102
       8  ?Subroutine103
      12  ?Subroutine104
       4  ?Subroutine105
      13  ?Subroutine106
      13  ?Subroutine107
       7  ?Subroutine108
       6  ?Subroutine109
      26  ?Subroutine11
       4  ?Subroutine110
      11  ?Subroutine111
      17  ?Subroutine112
      12  ?Subroutine113
      12  ?Subroutine114
       2  ?Subroutine115
       4  ?Subroutine116
       1  ?Subroutine117
      15  ?Subroutine118
       8  ?Subroutine119
      20  ?Subroutine12
       9  ?Subroutine120
      11  ?Subroutine121
      11  ?Subroutine122
       3  ?Subroutine123
       3  ?Subroutine124
       8  ?Subroutine125
       4  ?Subroutine126
       9  ?Subroutine127
       4  ?Subroutine128
       7  ?Subroutine129
      16  ?Subroutine13
       6  ?Subroutine130
       4  ?Subroutine131
      23  ?Subroutine132
      14  ?Subroutine133
       8  ?Subroutine134
       1  ?Subroutine135
       9  ?Subroutine136
       4  ?Subroutine137
       8  ?Subroutine138
      21  ?Subroutine139
      17  ?Subroutine14
       1  ?Subroutine140
      16  ?Subroutine141
      16  ?Subroutine142
       1  ?Subroutine143
       8  ?Subroutine144
       4  ?Subroutine145
       8  ?Subroutine146
       9  ?Subroutine147
      14  ?Subroutine148
       8  ?Subroutine149
       8  ?Subroutine15
       1  ?Subroutine150
       1  ?Subroutine151
       4  ?Subroutine152
      10  ?Subroutine153
       8  ?Subroutine154
       1  ?Subroutine155
       9  ?Subroutine156
      10  ?Subroutine157
      13  ?Subroutine158
      11  ?Subroutine159
       7  ?Subroutine16
      10  ?Subroutine160
       7  ?Subroutine161
       6  ?Subroutine162
       9  ?Subroutine163
       4  ?Subroutine164
      11  ?Subroutine165
      22  ?Subroutine166
       2  ?Subroutine167
      16  ?Subroutine168
      13  ?Subroutine169
      25  ?Subroutine17
       7  ?Subroutine170
       3  ?Subroutine171
      13  ?Subroutine172
      18  ?Subroutine173
      11  ?Subroutine174
      12  ?Subroutine175
       5  ?Subroutine176
       6  ?Subroutine177
       7  ?Subroutine178
       2  ?Subroutine179
      20  ?Subroutine18
       8  ?Subroutine180
       7  ?Subroutine181
      15  ?Subroutine182
       3  ?Subroutine183
      10  ?Subroutine184
      11  ?Subroutine185
       8  ?Subroutine186
       5  ?Subroutine187
       1  ?Subroutine188
       1  ?Subroutine189
      19  ?Subroutine19
       3  ?Subroutine190
      10  ?Subroutine191
       9  ?Subroutine192
       7  ?Subroutine193
       9  ?Subroutine194
       6  ?Subroutine195
       6  ?Subroutine196
       3  ?Subroutine197
       9  ?Subroutine198
       7  ?Subroutine199
       5  ?Subroutine2
       3  ?Subroutine20
       1  ?Subroutine200
       6  ?Subroutine201
       3  ?Subroutine202
       9  ?Subroutine203
       6  ?Subroutine21
      10  ?Subroutine22
       4  ?Subroutine23
       8  ?Subroutine24
       6  ?Subroutine25
       7  ?Subroutine26
      11  ?Subroutine27
       6  ?Subroutine28
      24  ?Subroutine29
       2  ?Subroutine3
       1  ?Subroutine30
       8  ?Subroutine31
       4  ?Subroutine32
       5  ?Subroutine33
       7  ?Subroutine34
       6  ?Subroutine35
       4  ?Subroutine36
       6  ?Subroutine37
       4  ?Subroutine38
      13  ?Subroutine39
       5  ?Subroutine4
       4  ?Subroutine40
       5  ?Subroutine41
       8  ?Subroutine42
      21  ?Subroutine43
       5  ?Subroutine44
       4  ?Subroutine45
       4  ?Subroutine46
       7  ?Subroutine47
       8  ?Subroutine48
       8  ?Subroutine49
       5  ?Subroutine5
       4  ?Subroutine50
       3  ?Subroutine51
      20  ?Subroutine52
       4  ?Subroutine53
       4  ?Subroutine54
       6  ?Subroutine55
       9  ?Subroutine56
      35  ?Subroutine57
      17  ?Subroutine58
       6  ?Subroutine59
       3  ?Subroutine6
      18  ?Subroutine60
      31  ?Subroutine61
       4  ?Subroutine62
       4  ?Subroutine63
      25  ?Subroutine64
      22  ?Subroutine65
      16  ?Subroutine66
      30  ?Subroutine67
      38  ?Subroutine68
      17  ?Subroutine69
       3  ?Subroutine7
      15  ?Subroutine70
       4  ?Subroutine71
       4  ?Subroutine72
       7  ?Subroutine73
      10  ?Subroutine74
      10  ?Subroutine75
      15  ?Subroutine76
      12  ?Subroutine77
       4  ?Subroutine78
       6  ?Subroutine79
       5  ?Subroutine8
       1  ?Subroutine80
       9  ?Subroutine81
      11  ?Subroutine82
      11  ?Subroutine83
       8  ?Subroutine84
       6  ?Subroutine85
      16  ?Subroutine86
       1  ?Subroutine87
       5  ?Subroutine88
       4  ?Subroutine89
       5  ?Subroutine9
      13  ?Subroutine90
       6  ?Subroutine91
       6  ?Subroutine92
       3  ?Subroutine93
       6  ?Subroutine94
       6  ?Subroutine95
       6  ?Subroutine96
       3  ?Subroutine97
      13  ?Subroutine98
      10  ?Subroutine99
       3  NLME_PermitJoiningTimeout
     589  ZDMatchSendState
      52  ZDOBuildBuf
      77  ZDO_AnyClusterMatches
     210  ZDO_BuildSimpleDescBuf
     121  ZDO_CompareClusterLists
      69  ZDO_ConvertOTAClusters
     179  ZDO_CopyMatchInfo
       2  ZDO_EDBind
      16  ZDO_EndDeviceBindMatchTimeoutCB
     223  ZDO_EndDeviceTimeoutCB
      33  ZDO_Init
     547  ZDO_MatchEndDeviceBind
     209  ZDO_ParseAddrRsp
     112  ZDO_ParseBindUnbindReq
      54  ZDO_ParseDeviceAnnce
      93  ZDO_ParseEPListRsp
     233  ZDO_ParseEndDeviceBindReq
     261  ZDO_ParseMgmNwkDiscRsp
     202  ZDO_ParseMgmtBindRsp
     146  ZDO_ParseMgmtLqiRsp
     209  ZDO_ParseMgmtNwkUpdateNotify
     128  ZDO_ParseMgmtNwkUpdateReq
     162  ZDO_ParseMgmtRtgRsp
     283  ZDO_ParseNodeDescRsp
     204  ZDO_ParsePowerDescRsp
      56  ZDO_ParseServerDiscRsp
     255  ZDO_ParseSimpleDescBuf
      27  ZDO_ParseSimpleDescRsp
      96  ZDO_ParseUserDescRsp
     120  ZDO_ProcessActiveEPReq
     294  ZDO_ProcessBindUnbindReq
     417  ZDO_ProcessDeviceAnnce
     993  ZDO_ProcessMatchDescReq
     258  ZDO_ProcessMgmtBindReq
      80  ZDO_ProcessMgmtDirectJoinReq
     159  ZDO_ProcessMgmtLeaveReq
     621  ZDO_ProcessMgmtLqiReq
     122  ZDO_ProcessMgmtNwkDiscReq
      74  ZDO_ProcessMgmtPermitJoinReq
     299  ZDO_ProcessMgmtRtgReq
      66  ZDO_ProcessNodeDescReq
      66  ZDO_ProcessPowerDescReq
      71  ZDO_ProcessServerDiscReq
     143  ZDO_ProcessSimpleDescReq
     155  ZDO_ProcessUserDescReq
     278  ZDO_ProcessUserDescSet
     115  ZDO_RemoveMatchMemory
     132  ZDO_StartDevice
      51  ZDO_UpdateAddrManager
     128  ZDO_UpdateNwkStatus
       4  apsChannelMask
       2  matchED
     294  -- Other

 
 11 635 bytes in segment BANKED_CODE
    294 bytes in segment BANK_RELAYS
    118 bytes in segment XDATA_ROM_C
     60 bytes in segment XDATA_Z
 
    294 bytes of CODE     memory
    118 bytes of CONST    memory
 11 635 bytes of HUGECODE memory
     60 bytes of XDATA    memory

Errors: none
Warnings: none
