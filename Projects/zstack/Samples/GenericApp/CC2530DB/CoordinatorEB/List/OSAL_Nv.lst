###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               30/Aug/2019  09:21:31
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\ZStack-CC2530-2.5.1a\Components\osal\mcu\cc2530\OSAL_Nv.c
#    Command line       =  
#        -f C:\Users\Ð¡»ðÁú\AppData\Local\Temp\EW7958.tmp
#        (D:\ZStack-CC2530-2.5.1a\Components\osal\mcu\cc2530\OSAL_Nv.c -D
#        ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x02000000 -DZDAPP_CONFIG_PAN_ID=0xFFF0
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\List\OSAL_Nv.lst
#    Object file        =  
#        D:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\OSAL_Nv.r51
#
###############################################################################

D:\ZStack-CC2530-2.5.1a\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /******************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2011-06-05 18:52:21 -0700 (Sun, 05 Jun 2011) $
      4            Revision:       $Revision: 26212 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /******************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id
     43                is to be reserved for use by this module.
     44          ******************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "OSAL_Nv.h"
     54          #include "ZComDef.h"
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     61          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     62          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     63          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     64          
     65          #define OSAL_NV_ACTIVE          0x00
     66          #define OSAL_NV_ERASED          0xFF
     67          #define OSAL_NV_ERASED_ID       0xFFFF
     68          #define OSAL_NV_ZEROED_ID       0x0000
     69          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     70          #define OSAL_NV_SOURCE_ID       0x8000
     71          
     72          // In case pages 0-1 are ever used, define a null page value.
     73          #define OSAL_NV_PAGE_NULL       0
     74          
     75          // In case item Id 0 is ever used, define a null item value.
     76          #define OSAL_NV_ITEM_NULL       0
     77          
     78          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     79          
     80          #define OSAL_NV_PAGE_HDR_OFFSET 0
     81          
     82          #define OSAL_NV_MAX_HOT         3

   \                                 In  segment XDATA_ROM_C, align 1
     83          static const uint16 hotIds[OSAL_NV_MAX_HOT] = {
   \                     hotIds:
   \   000000   8200         DW 130
   \   000002   3A00         DW 58
   \   000004   3B00         DW 59
     84            ZCD_NV_NWKKEY,
     85            ZCD_NV_NWK_ACTIVE_KEY_INFO,
     86            ZCD_NV_NWK_ALTERN_KEY_INFO,
     87          };
     88          
     89          /*********************************************************************
     90           * MACROS
     91           */
     92          
     93          #define OSAL_NV_CHECK_BUS_VOLTAGE  HalAdcCheckVdd(VDD_MIN_NV)
     94          
     95          #define OSAL_NV_DATA_SIZE( LEN )                      \
     96            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE))) ? \
     97                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))  : \
     98                       ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE))
     99          
    100          #define OSAL_NV_ITEM_SIZE( LEN )                                         \
    101            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE - OSAL_NV_HDR_SIZE))) ? \
    102                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))                     : \
    103            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE))
    104          
    105          #define COMPACT_PAGE_CLEANUP( COM_PG ) st ( \
    106            /* In order to recover from a page compaction that is interrupted,\
    107             * the logic in osal_nv_init() depends upon the following order:\
    108             * 1. State of the target of compaction is changed to ePgInUse.\
    109             * 2. Compacted page is erased.\
    110             */\
    111            setPageUse( pgRes, TRUE );  /* Mark the reserve page as being in use. */\
    112            erasePage( (COM_PG) ); \
    113            \
    114            pgRes = (COM_PG);           /* Set the reserve page to be the newly erased page. */\
    115          )
    116          
    117          /*********************************************************************
    118           * TYPEDEFS
    119           */
    120          
    121          typedef struct
    122          {
    123            uint16 id;
    124            uint16 len;   // Enforce Flash-WORD size on len.
    125            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    126            uint16 stat;  // Item status.
    127          } osalNvHdr_t;
    128          // Struct member offsets.
    129          #define OSAL_NV_HDR_ID    0
    130          #define OSAL_NV_HDR_LEN   2
    131          #define OSAL_NV_HDR_CHK   4
    132          #define OSAL_NV_HDR_STAT  6
    133          
    134          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    135          #define OSAL_NV_HDR_SIZE  8
    136          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    137          
    138          typedef struct
    139          {
    140            uint16 active;
    141            uint16 inUse;
    142            uint16 xfer;
    143            uint16 spare;
    144          } osalNvPgHdr_t;
    145          // Struct member offsets.
    146          #define OSAL_NV_PG_ACTIVE 0
    147          #define OSAL_NV_PG_INUSE  2
    148          #define OSAL_NV_PG_XFER   4
    149          #define OSAL_NV_PG_SPARE  6
    150          
    151          #define OSAL_NV_PAGE_HDR_SIZE  8
    152          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    153          
    154          typedef enum
    155          {
    156            eNvXfer,
    157            eNvZero
    158          } eNvHdrEnum;
    159          
    160          typedef enum
    161          {
    162            ePgActive,
    163            ePgInUse,
    164            ePgXfer,
    165            ePgSpare
    166          } ePgHdrEnum;
    167          
    168          /*********************************************************************
    169           * GLOBAL VARIABLES
    170           */
    171          
    172          #ifndef OAD_KEEP_NV_PAGES
    173          // When NV pages are to remain intact during OAD download,
    174          // the image itself should not include NV pages.
    175          #pragma location="ZIGNV_ADDRESS_SPACE"

   \                                 In  segment ZIGNV_ADDRESS_SPACE, align 1
    176          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
   \                     _nvBuf:
   \   000000                DS 12288
    177          #pragma required=_nvBuf
    178          #endif // OAD_KEEP_NV_PAGES
    179          
    180          /*********************************************************************
    181           * LOCAL VARIABLES
    182           */
    183          
    184          // Offset into the page of the first available erased space.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          static uint16 pgOff[OSAL_NV_PAGES_USED];
   \                     pgOff:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   \   00000C                REQUIRE _nvBuf
    186          
    187          // Count of the bytes lost for the zeroed-out items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          static uint16 pgLost[OSAL_NV_PAGES_USED];
   \                     pgLost:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          static uint8 pgRes;  // Page reserved for item compacting transfer.
   \                     pgRes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    191          
    192          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          static uint8 findPg;
   \                     findPg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    194          
    195          // NV page and offsets for hot items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          static uint8 hotPg[OSAL_NV_MAX_HOT];
   \                     hotPg:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          static uint16 hotOff[OSAL_NV_MAX_HOT];
   \                     hotOff:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    198          
    199          /*********************************************************************
    200           * LOCAL FUNCTIONS
    201           */
    202          
    203          static uint8  initNV( void );
    204          
    205          static void   setPageUse( uint8 pg, uint8 inUse );
    206          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    207          static void   erasePage( uint8 pg );
    208          static uint8  compactPage( uint8 srcPg, uint16 skipId );
    209          
    210          static uint16 findItem( uint16 id );
    211          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    212          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    213          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk );
    214          
    215          static uint16 calcChkB( uint16 len, uint8 *buf );
    216          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len );
    217          
    218          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    219          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    220          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    221          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    222          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    223          
    224          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    225          static uint8  hotItem(uint16 id);
    226          static void   hotItemUpdate(uint8 pg, uint16 off, uint16 id);
    227          
    228          /*********************************************************************
    229           * @fn      initNV
    230           *
    231           * @brief   Initialize the NV flash pages.
    232           *
    233           * @param   none
    234           *
    235           * @return  TRUE
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          static uint8 initNV( void )
   \                     initNV:
    238          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    239            osalNvPgHdr_t pgHdr;
    240            uint8 oldPg = OSAL_NV_PAGE_NULL;
   \   00000A   75..00       MOV       ?V0,#0x0
    241            uint8 findDups = FALSE;
   \   00000D   7F00         MOV       R7,#0x0
    242            uint8 pg;
    243          
    244            pgRes = OSAL_NV_PAGE_NULL;
   \   00000F   90....       MOV       DPTR,#pgRes
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
    245          
    246            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000014   7E79         MOV       R6,#0x79
    247            {
    248              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
   \                     ??initNV_0:
   \   000016                ; Setup parameters for call to function HalFlashRead
   \   000016   75..08       MOV       ?V2,#0x8
   \   000019   8F..         MOV       ?V3,R7
   \   00001B   78..         MOV       R0,#?V2
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?XSTACK_DISP102_8
   \   000025   7A00         MOV       R2,#0x0
   \   000027   7B00         MOV       R3,#0x0
   \   000029   EE           MOV       A,R6
   \   00002A   F9           MOV       R1,A
   \   00002B   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
    249          
    250              if ( pgHdr.active == OSAL_NV_ERASED_ID )
   \   000031   85..82       MOV       DPL,?XSP + 0
   \   000034   85..83       MOV       DPH,?XSP + 1
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F4           CPL       A
   \   000039   7003         JNZ       ??initNV_1
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F4           CPL       A
   \                     ??initNV_1:
   \   00003E   7013         JNZ       ??initNV_2
    251              {
    252                if ( pgRes == OSAL_NV_PAGE_NULL )
   \   000040   90....       MOV       DPTR,#pgRes
   \   000043   E0           MOVX      A,@DPTR
   \   000044   7004         JNZ       ??initNV_3
    253                {
    254                  pgRes = pg;
   \   000046   EE           MOV       A,R6
   \   000047   F0           MOVX      @DPTR,A
   \   000048   8019         SJMP      ??initNV_4
    255                }
    256                else
    257                {
    258                  setPageUse( pg, TRUE );
   \                     ??initNV_3:
   \   00004A                ; Setup parameters for call to function setPageUse
   \   00004A   7A01         MOV       R2,#0x1
   \   00004C   EE           MOV       A,R6
   \   00004D   F9           MOV       R1,A
   \   00004E   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   000051   8010         SJMP      ??initNV_4
    259                }
    260              }
    261              // An Xfer from this page was in progress.
    262              else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
   \                     ??initNV_2:
   \   000053   7404         MOV       A,#0x4
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F4           CPL       A
   \   00005A   7003         JNZ       ??initNV_5
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F4           CPL       A
   \                     ??initNV_5:
   \   00005F   6002         JZ        ??initNV_4
    263              {
    264                oldPg = pg;
   \   000061   8E..         MOV       ?V0,R6
    265              }
    266            }
   \                     ??initNV_4:
   \   000063   0E           INC       R6
   \   000064   EE           MOV       A,R6
   \   000065   C3           CLR       C
   \   000066   947F         SUBB      A,#0x7f
   \   000068   40AC         JC        ??initNV_0
    267          
    268            // If a page compaction was interrupted before the old page was erased.
    269            if ( oldPg != OSAL_NV_PAGE_NULL )
   \   00006A   E5..         MOV       A,?V0
   \   00006C   90....       MOV       DPTR,#pgRes
   \   00006F   6017         JZ        ??initNV_6
    270            {
    271              /* Interrupted compaction before the target of compaction was put in use;
    272               * so erase the target of compaction and start again.
    273               */
    274              if ( pgRes != OSAL_NV_PAGE_NULL )
   \   000071   E0           MOVX      A,@DPTR
   \   000072   600F         JZ        ??initNV_7
    275              {
    276                erasePage( pgRes );
   \   000074                ; Setup parameters for call to function erasePage
   \   000074   F9           MOV       R1,A
   \   000075   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    277                (void)compactPage( oldPg, OSAL_NV_ITEM_NULL );
   \   000078                ; Setup parameters for call to function compactPage
   \   000078   7A00         MOV       R2,#0x0
   \   00007A   7B00         MOV       R3,#0x0
   \   00007C   A9..         MOV       R1,?V0
   \   00007E   12....       LCALL     `??compactPage::?relay`; Banked call to: compactPage
   \   000081   800C         SJMP      ??initNV_8
    278              }
    279              /* Interrupted compaction after the target of compaction was put in use,
    280               * but before the old page was erased; so erase it now and create a new reserve page.
    281               */
    282              else
    283              {
    284                erasePage( oldPg );
   \                     ??initNV_7:
   \   000083                ; Setup parameters for call to function erasePage
   \   000083   12....       LCALL     ?Subroutine29 & 0xFFFF
    285                pgRes = oldPg;
    286              }
    287            }
   \                     ??CrossCallReturnLabel_50:
   \   000086   8007         SJMP      ??initNV_8
    288            else if ( pgRes != OSAL_NV_PAGE_NULL )
   \                     ??initNV_6:
   \   000088   E0           MOVX      A,@DPTR
   \   000089   6004         JZ        ??initNV_8
    289            {
    290              erasePage( pgRes );  // The last page erase could have been interrupted by a power-cycle.
   \   00008B                ; Setup parameters for call to function erasePage
   \   00008B   F9           MOV       R1,A
   \   00008C   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    291            }
    292            /* else if there is no reserve page, COMPACT_PAGE_CLEANUP() must have succeeded to put the old
    293             * reserve page (i.e. the target of the compacted items) into use but got interrupted by a reset
    294             * while trying to erase the page to be compacted. Such a page should only contain duplicate items
    295             * (i.e. all items will be marked 'Xfer') and thus should have the lost count equal to the page
    296             * size less the page header.
    297             */
    298          
    299            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_8:
   \   00008F   7E79         MOV       R6,#0x79
    300            {
    301              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    302              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
   \                     ??initNV_9:
   \   000091                ; Setup parameters for call to function initPage
   \   000091   EF           MOV       A,R7
   \   000092   FC           MOV       R4,A
   \   000093   7A00         MOV       R2,#0x0
   \   000095   7B00         MOV       R3,#0x0
   \   000097   EE           MOV       A,R6
   \   000098   F9           MOV       R1,A
   \   000099   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
   \   00009C   EA           MOV       A,R2
   \   00009D   4B           ORL       A,R3
   \   00009E   6004         JZ        ??initNV_10
    303              {
    304                findDups = TRUE;
   \   0000A0   7F01         MOV       R7,#0x1
    305                pg = (OSAL_NV_PAGE_BEG - 1);  // Pre-decrement so that loop increment will start over at zero.
   \   0000A2   7E78         MOV       R6,#0x78
    306                continue;
    307              }
    308            }
   \                     ??initNV_10:
   \   0000A4   0E           INC       R6
   \   0000A5   EE           MOV       A,R6
   \   0000A6   C3           CLR       C
   \   0000A7   947F         SUBB      A,#0x7f
   \   0000A9   40E6         JC        ??initNV_9
    309          
    310            if (findDups)
   \   0000AB   EF           MOV       A,R7
   \   0000AC   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000AE   5014         JNC       ??initNV_11
    311            {
    312              // Final pass to calculate page lost after invalidating duplicate items.
    313              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   0000B0   7E79         MOV       R6,#0x79
    314              {
    315                (void)initPage( pg, OSAL_NV_ITEM_NULL, FALSE );
   \                     ??initNV_12:
   \   0000B2                ; Setup parameters for call to function initPage
   \   0000B2   7C00         MOV       R4,#0x0
   \   0000B4   7A00         MOV       R2,#0x0
   \   0000B6   7B00         MOV       R3,#0x0
   \   0000B8   EE           MOV       A,R6
   \   0000B9   F9           MOV       R1,A
   \   0000BA   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
    316              }
   \   0000BD   0E           INC       R6
   \   0000BE   EE           MOV       A,R6
   \   0000BF   C3           CLR       C
   \   0000C0   947F         SUBB      A,#0x7f
   \   0000C2   40EE         JC        ??initNV_12
    317            }
    318          
    319            if ( pgRes == OSAL_NV_PAGE_NULL )
   \                     ??initNV_11:
   \   0000C4   90....       MOV       DPTR,#pgRes
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   7047         JNZ       ??initNV_13
    320            {
    321              uint8 idx, mostLost = 0;
   \   0000CA   7E00         MOV       R6,#0x0
    322          
    323              for ( idx = 0; idx < OSAL_NV_PAGES_USED; idx++ )
   \   0000CC   7A00         MOV       R2,#0x0
    324              {
    325                // Is this the page that was compacted?
    326                if (pgLost[idx] == (OSAL_NV_PAGE_SIZE - OSAL_NV_PAGE_HDR_SIZE))
   \                     ??initNV_14:
   \   0000CE   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000D1   64F8         XRL       A,#0xf8
   \   0000D3   7004         JNZ       ??initNV_15
   \   0000D5   A3           INC       DPTR
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   6407         XRL       A,#0x7
   \                     ??initNV_15:
   \   0000D9   7004         JNZ       ??initNV_16
    327                {
    328                  mostLost = idx;
   \   0000DB   EA           MOV       A,R2
   \   0000DC   FE           MOV       R6,A
    329                  break;
   \   0000DD   8027         SJMP      ??initNV_17
    330                }
    331                /* This check is not expected to be necessary because the above test should always succeed
    332                 * with an early loop exit.
    333                 */
    334                else if (pgLost[idx] > pgLost[mostLost])
   \                     ??initNV_16:
   \   0000DF   EE           MOV       A,R6
   \   0000E0   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000E3   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0000E6   C082         PUSH      DPL
   \   0000E8   C083         PUSH      DPH
   \   0000EA   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000ED   F8           MOV       R0,A
   \   0000EE   A3           INC       DPTR
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   F9           MOV       R1,A
   \   0000F1   D083         POP       DPH
   \   0000F3   D082         POP       DPL
   \   0000F5   C3           CLR       C
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   98           SUBB      A,R0
   \   0000F8   A3           INC       DPTR
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   99           SUBB      A,R1
   \   0000FB   5002         JNC       ??initNV_18
    335                {
    336                  mostLost = idx;
   \   0000FD   EA           MOV       A,R2
   \   0000FE   FE           MOV       R6,A
    337                }
    338              }
   \                     ??initNV_18:
   \   0000FF   0A           INC       R2
   \   000100   EA           MOV       A,R2
   \   000101   C3           CLR       C
   \   000102   9406         SUBB      A,#0x6
   \   000104   40C8         JC        ??initNV_14
    339          
    340              pgRes = mostLost + OSAL_NV_PAGE_BEG;
   \                     ??initNV_17:
   \   000106   7479         MOV       A,#0x79
   \   000108   2E           ADD       A,R6
   \   000109   90....       MOV       DPTR,#pgRes
   \   00010C   F0           MOVX      @DPTR,A
    341              erasePage( pgRes );  // The last page erase had been interrupted by a power-cycle.
   \   00010D                ; Setup parameters for call to function erasePage
   \   00010D   F9           MOV       R1,A
   \   00010E   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    342            }
    343          
    344            return TRUE;
   \                     ??initNV_13:
   \   000111   7901         MOV       R1,#0x1
   \   000113   7408         MOV       A,#0x8
   \   000115   80..         SJMP      ??Subroutine47_0
    345          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   EA           MOV       A,R2
   \   000001   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000004   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine48_0
   \   000003                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A9..         MOV       R1,?V0
   \   000002   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   000005   E5..         MOV       A,?V0
   \   000007   90....       MOV       DPTR,#pgRes
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   74..         MOV       A,#pgLost & 0xff
   \   000002   28           ADD       A,R0
   \   000003   F582         MOV       DPL,A
   \   000005   74..         MOV       A,#(pgLost >> 8) & 0xff
   \   000007   39           ADDC      A,R1
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET
    346          
    347          /*********************************************************************
    348           * @fn      setPageUse
    349           *
    350           * @brief   Set page header active/inUse state according to 'inUse'.
    351           *
    352           * @param   pg - Valid NV page to verify and init.
    353           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    354           *
    355           * @return  none
    356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          static void setPageUse( uint8 pg, uint8 inUse )
   \                     setPageUse:
    358          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    359            osalNvPgHdr_t pgHdr;
    360          
    361            pgHdr.active = OSAL_NV_ZEROED_ID;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
    362          
    363            if ( inUse )
   \   000014   EA           MOV       A,R2
   \   000015   6008         JZ        ??setPageUse_0
    364            {
    365              pgHdr.inUse = OSAL_NV_ZEROED_ID;
   \   000017   7402         MOV       A,#0x2
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E4           CLR       A
   \   00001D   8007         SJMP      ??setPageUse_1
    366            }
    367            else
    368            {
    369              pgHdr.inUse = OSAL_NV_ERASED_ID;
   \                     ??setPageUse_0:
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   74FF         MOV       A,#-0x1
    370            }
   \                     ??setPageUse_1:
   \   000026   12....       LCALL     ??Subroutine53_0 & 0xFFFF
    371          
    372            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
   \                     ??CrossCallReturnLabel_90:
   \   000029   7A00         MOV       R2,#0x0
   \   00002B   7B00         MOV       R3,#0x0
   \   00002D   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    373          }
   \   000030   7408         MOV       A,#0x8
   \   000032                REQUIRE ?Subroutine1
   \   000032                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine49_0
   \   000003                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function writeWordH
   \   000003                ; Setup parameters for call to function writeWord
   \   000003                ; Setup parameters for call to function writeWord
   \   000003   AC..         MOV       R4,?XSP + 0
   \   000005   AD..         MOV       R5,?XSP + 1
   \   000007   22           RET
    374          
    375          /*********************************************************************
    376           * @fn      initPage
    377           *
    378           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    379           *
    380           * @param   pg - Valid NV page to verify and init.
    381           * @param   id - Valid NV item Id to use function as a "findItem".
    382           *               If set to NULL then just perform the page initialization.
    383           * @param   findDups - TRUE on recursive call from initNV() to find and zero-out duplicate items
    384           *                     left from a write that is interrupted by a reset/power-cycle.
    385           *                     FALSE otherwise.
    386           *
    387           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    388           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
   \                     initPage:
    391          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V4,R1
   \   00000C   8A..         MOV       ?V6,R2
   \   00000E   8B..         MOV       ?V7,R3
   \   000010   8C..         MOV       ?V5,R4
    392            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
   \   000012   75..08       MOV       ?V0,#0x8
   \   000015   75..00       MOV       ?V1,#0x0
    393            uint16 sz, lost = 0;
   \   000018   75..00       MOV       ?V2,#0x0
   \   00001B   75..00       MOV       ?V3,#0x0
    394            osalNvHdr_t hdr;
    395          
    396            do
    397            {
    398              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??initPage_0:
   \   00001E                ; Setup parameters for call to function HalFlashRead
   \   00001E   75..08       MOV       ?V8,#0x8
   \   000021   75..00       MOV       ?V9,#0x0
   \   000024   78..         MOV       R0,#?V8
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7402         MOV       A,#0x2
   \   00002B   12....       LCALL     ?XSTACK_DISP102_8
   \   00002E   AA..         MOV       R2,?V0
   \   000030   AB..         MOV       R3,?V1
   \   000032   A9..         MOV       R1,?V4
   \   000034   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000037   12....       LCALL     ?DEALLOC_XSTACK8
    399          
    400              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   00003A   85..82       MOV       DPL,?XSP + 0
   \   00003D   85..83       MOV       DPH,?XSP + 1
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F4           CPL       A
   \   000042   7003         JNZ       ??initPage_1
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F4           CPL       A
   \                     ??initPage_1:
   \   000047   7003         JNZ       $+5
   \   000049   02....       LJMP      ??initPage_2 & 0xFFFF
    401              {
    402                break;
    403              }
    404          
    405              // Get the actual size in bytes which is the ceiling(hdr.len)
    406              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   00004C   7402         MOV       A,#0x2
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000054   4006         JC        ??initPage_3
   \   000056   7EFC         MOV       R6,#-0x4
   \   000058   7FFF         MOV       R7,#-0x1
   \   00005A   800B         SJMP      ??initPage_4
   \                     ??initPage_3:
   \   00005C   7402         MOV       A,#0x2
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000064   FE           MOV       R6,A
   \   000065   E9           MOV       A,R1
   \   000066   FF           MOV       R7,A
    407          
    408              // A bad 'len' write has blown away the rest of the page.
    409              if (sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - offset))
   \                     ??initPage_4:
   \   000067   74F8         MOV       A,#-0x8
   \   000069   C3           CLR       C
   \   00006A   95..         SUBB      A,?V0
   \   00006C   F8           MOV       R0,A
   \   00006D   7407         MOV       A,#0x7
   \   00006F   95..         SUBB      A,?V1
   \   000071   F9           MOV       R1,A
   \   000072   C3           CLR       C
   \   000073   E8           MOV       A,R0
   \   000074   9E           SUBB      A,R6
   \   000075   E9           MOV       A,R1
   \   000076   9F           SUBB      A,R7
   \   000077   5020         JNC       ??initPage_5
    410              {
    411                lost += (OSAL_NV_PAGE_SIZE - offset);
   \   000079   E5..         MOV       A,?V2
   \   00007B   2400         ADD       A,#0x0
   \   00007D   E5..         MOV       A,?V3
   \   00007F   3408         ADDC      A,#0x8
   \   000081   F5..         MOV       ?V3,A
   \   000083   C3           CLR       C
   \   000084   E5..         MOV       A,?V2
   \   000086   95..         SUBB      A,?V0
   \   000088   F5..         MOV       ?V2,A
   \   00008A   E5..         MOV       A,?V3
   \   00008C   95..         SUBB      A,?V1
   \   00008E   F5..         MOV       ?V3,A
    412                offset = OSAL_NV_PAGE_SIZE;
   \   000090   75..00       MOV       ?V0,#0x0
   \   000093   75..08       MOV       ?V1,#0x8
    413                break;
   \   000096   02....       LJMP      ??initPage_2 & 0xFFFF
    414              }
    415          
    416              offset += OSAL_NV_HDR_SIZE;
   \                     ??initPage_5:
   \   000099   E5..         MOV       A,?V0
   \   00009B   2408         ADD       A,#0x8
   \   00009D   F5..         MOV       ?V0,A
   \   00009F   E4           CLR       A
   \   0000A0   35..         ADDC      A,?V1
   \   0000A2   F5..         MOV       ?V1,A
    417          
    418              if ( hdr.id != OSAL_NV_ZEROED_ID )
   \   0000A4   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   0000A7   E8           MOV       A,R0
   \   0000A8   49           ORL       A,R1
   \   0000A9   7003         JNZ       $+5
   \   0000AB   02....       LJMP      ??initPage_6 & 0xFFFF
    419              {
    420                /* This trick allows function to do double duty for findItem() without
    421                 * compromising its essential functionality at powerup initialization.
    422                 */
    423                if ( id != OSAL_NV_ITEM_NULL )
   \   0000AE   E5..         MOV       A,?V6
   \   0000B0   45..         ORL       A,?V7
   \   0000B2   6047         JZ        ??initPage_7
    424                {
    425                  /* This trick allows asking to find the old/transferred item in case
    426                   * of a successful new item write that gets interrupted before the
    427                   * old item can be zeroed out.
    428                   */
    429                  if ( (id & 0x7fff) == hdr.id )
   \   0000B4   A8..         MOV       R0,?V6
   \   0000B6   E5..         MOV       A,?V7
   \   0000B8   547F         ANL       A,#0x7f
   \   0000BA   F9           MOV       R1,A
   \   0000BB   85..82       MOV       DPL,?XSP + 0
   \   0000BE   85..83       MOV       DPH,?XSP + 1
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   68           XRL       A,R0
   \   0000C3   7003         JNZ       ??initPage_8
   \   0000C5   A3           INC       DPTR
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   69           XRL       A,R1
   \                     ??initPage_8:
   \   0000C8   6003         JZ        $+5
   \   0000CA   02....       LJMP      ??CrossCallReturnLabel_54 & 0xFFFF
    430                  {
    431                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    432                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
   \   0000CD   E5..         MOV       A,?V7
   \   0000CF   5480         ANL       A,#0x80
   \   0000D1   7013         JNZ       ??initPage_9
   \   0000D3   7406         MOV       A,#0x6
   \   0000D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   F4           CPL       A
   \   0000DA   7003         JNZ       ??initPage_10
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   F4           CPL       A
   \                     ??initPage_10:
   \   0000DF   6003         JZ        $+5
   \   0000E1   02....       LJMP      ??CrossCallReturnLabel_54 & 0xFFFF
   \   0000E4   800E         SJMP      ??initPage_11
   \                     ??initPage_9:
   \   0000E6   7406         MOV       A,#0x6
   \   0000E8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   F4           CPL       A
   \   0000ED   7003         JNZ       ??initPage_12
   \   0000EF   A3           INC       DPTR
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   F4           CPL       A
   \                     ??initPage_12:
   \   0000F2   607E         JZ        ??CrossCallReturnLabel_54
    433                    {
    434                      return offset;
   \                     ??initPage_11:
   \   0000F4   AA..         MOV       R2,?V0
   \   0000F6   AB..         MOV       R3,?V1
   \   0000F8   02....       LJMP      ??initPage_13 & 0xFFFF
    435                    }
    436                  }
    437                }
    438                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    439                else
    440                {
    441                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
   \                     ??initPage_7:
   \   0000FB                ; Setup parameters for call to function calcChkF
   \   0000FB   7402         MOV       A,#0x2
   \   0000FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000100   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000103   AA..         MOV       R2,?V0
   \   000105   AB..         MOV       R3,?V1
   \   000107   A9..         MOV       R1,?V4
   \   000109   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00010C   7404         MOV       A,#0x4
   \   00010E   12....       LCALL     ?XSTACK_DISP0_8
   \   000111   E0           MOVX      A,@DPTR
   \   000112   68           XRL       A,R0
   \   000113   7003         JNZ       ??initPage_14
   \   000115   A3           INC       DPTR
   \   000116   E0           MOVX      A,@DPTR
   \   000117   69           XRL       A,R1
   \                     ??initPage_14:
   \   000118   7043         JNZ       ??initPage_15
    442                  {
    443                    if ( findDups )
   \   00011A   E5..         MOV       A,?V5
   \   00011C   602B         JZ        ??initPage_16
    444                    {
    445                      if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   00011E   7406         MOV       A,#0x6
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   E0           MOVX      A,@DPTR
   \   000124   F4           CPL       A
   \   000125   7003         JNZ       ??initPage_17
   \   000127   A3           INC       DPTR
   \   000128   E0           MOVX      A,@DPTR
   \   000129   F4           CPL       A
   \                     ??initPage_17:
   \   00012A   7046         JNZ       ??CrossCallReturnLabel_54
    446                      {
    447                        /* The trick of setting the MSB of the item Id causes the logic
    448                         * immediately above to return a valid page only if the header 'stat'
    449                         * indicates that it was the older item being transferred.
    450                         */
    451                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
   \   00012C                ; Setup parameters for call to function findItem
   \   00012C   85..82       MOV       DPL,?XSP + 0
   \   00012F   85..83       MOV       DPH,?XSP + 1
   \   000132   E0           MOVX      A,@DPTR
   \   000133   FA           MOV       R2,A
   \   000134   A3           INC       DPTR
   \   000135   E0           MOVX      A,@DPTR
   \   000136   4480         ORL       A,#0x80
   \   000138   12....       LCALL     ??Subroutine59_0 & 0xFFFF
    452          
    453                        if ( off != OSAL_NV_ITEM_NULL )
   \                     ??CrossCallReturnLabel_127:
   \   00013B   6035         JZ        ??CrossCallReturnLabel_54
    454                        {
    455                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
   \   00013D                ; Setup parameters for call to function setItem
   \   00013D   7C01         MOV       R4,#0x1
   \   00013F   90....       MOV       DPTR,#findPg
   \   000142   E0           MOVX      A,@DPTR
   \   000143   F9           MOV       R1,A
   \   000144   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   \   000147   8029         SJMP      ??CrossCallReturnLabel_54
    456                        }
    457                      }
    458                    }
    459                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    460                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
   \                     ??initPage_16:
   \   000149   7406         MOV       A,#0x6
   \   00014B   12....       LCALL     ?XSTACK_DISP0_8
   \   00014E   E0           MOVX      A,@DPTR
   \   00014F   F4           CPL       A
   \   000150   7003         JNZ       ??initPage_18
   \   000152   A3           INC       DPTR
   \   000153   E0           MOVX      A,@DPTR
   \   000154   F4           CPL       A
   \                     ??initPage_18:
   \   000155   601B         JZ        ??CrossCallReturnLabel_54
    461                    {
    462                      return OSAL_NV_ERASED_ID;
   \   000157   7AFF         MOV       R2,#-0x1
   \   000159   7BFF         MOV       R3,#-0x1
   \   00015B   8048         SJMP      ??initPage_13
    463                    }
    464                  }
    465                  else
    466                  {
    467                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
   \                     ??initPage_15:
   \   00015D                ; Setup parameters for call to function setItem
   \   00015D   7C01         MOV       R4,#0x1
   \   00015F   AA..         MOV       R2,?V0
   \   000161   AB..         MOV       R3,?V1
   \   000163   A9..         MOV       R1,?V4
   \   000165   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
    468                    lost += (OSAL_NV_HDR_SIZE + sz);
    469                  }
    470                }
    471              }
    472              else
    473              {
    474                lost += (OSAL_NV_HDR_SIZE + sz);
   \                     ??initPage_6:
   \   000168   EE           MOV       A,R6
   \   000169   2408         ADD       A,#0x8
   \   00016B   F8           MOV       R0,A
   \   00016C   E4           CLR       A
   \   00016D   3F           ADDC      A,R7
   \   00016E   F9           MOV       R1,A
   \   00016F   12....       LCALL     ?Subroutine31 & 0xFFFF
    475              }
    476              offset += sz;
   \                     ??CrossCallReturnLabel_54:
   \   000172   E5..         MOV       A,?V0
   \   000174   2E           ADD       A,R6
   \   000175   F5..         MOV       ?V0,A
   \   000177   E5..         MOV       A,?V1
   \   000179   3F           ADDC      A,R7
   \   00017A   F5..         MOV       ?V1,A
    477          
    478            } while (offset < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE));
   \   00017C   C3           CLR       C
   \   00017D   E5..         MOV       A,?V0
   \   00017F   94F8         SUBB      A,#-0x8
   \   000181   E5..         MOV       A,?V1
   \   000183   9407         SUBB      A,#0x7
   \   000185   5003         JNC       $+5
   \   000187   02....       LJMP      ??initPage_0 & 0xFFFF
    479          
    480            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
   \                     ??initPage_2:
   \   00018A   A8..         MOV       R0,?V4
   \   00018C   E8           MOV       A,R0
   \   00018D   28           ADD       A,R0
   \   00018E   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000191   E5..         MOV       A,?V0
   \   000193   F0           MOVX      @DPTR,A
   \   000194   A3           INC       DPTR
   \   000195   E5..         MOV       A,?V1
   \   000197   12....       LCALL     ?Subroutine11 & 0xFFFF
    481            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
   \                     ??CrossCallReturnLabel_4:
   \   00019A   E5..         MOV       A,?V2
   \   00019C   F0           MOVX      @DPTR,A
   \   00019D   A3           INC       DPTR
   \   00019E   E5..         MOV       A,?V3
   \   0001A0   F0           MOVX      @DPTR,A
    482          
    483            return OSAL_NV_ITEM_NULL;
   \   0001A1   7A00         MOV       R2,#0x0
   \   0001A3   7B00         MOV       R3,#0x0
   \                     ??initPage_13:
   \   0001A5   7408         MOV       A,#0x8
   \   0001A7   80..         SJMP      ??Subroutine51_0
    484          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine50_0
   \   000006                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F0A         MOV       R7,#0xa
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   74..         MOV       A,#(pgLost + 14) & 0xff
   \   000003   28           ADD       A,R0
   \   000004   F582         MOV       DPL,A
   \   000006   74..         MOV       A,#((pgLost - 242) >> 8) & 0xff
   \   000008   39           ADDC      A,R1
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   000003   8A..         MOV       ?V8,R2
   \   000005   8B..         MOV       ?V9,R3
   \   000007   A8..         MOV       R0,?V8
   \   000009   A9..         MOV       R1,?V9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   74..         MOV       A,#(pgOff + 14) & 0xff
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   00000B   39           ADDC      A,R1
   \   00000C   F583         MOV       DPH,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   C3           CLR       C
   \   000001   E0           MOVX      A,@DPTR
   \   000002   94FC         SUBB      A,#-0x4
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   94FF         SUBB      A,#-0x1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2403         ADD       A,#0x3
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   F9           MOV       R1,A
   \   000009   E8           MOV       A,R0
   \   00000A   54FC         ANL       A,#0xfc
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E5..         MOV       A,?V2
   \   000002   28           ADD       A,R0
   \   000003   F5..         MOV       ?V2,A
   \   000005   E5..         MOV       A,?V3
   \   000007   39           ADDC      A,R1
   \   000008   F5..         MOV       ?V3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   FB           MOV       R3,A
   \   000001   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   22           RET
    485          
    486          /*********************************************************************
    487           * @fn      erasePage
    488           *
    489           * @brief   Erases a page in Flash.
    490           *
    491           * @param   pg - Valid NV page to erase.
    492           *
    493           * @return  none
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          static void erasePage( uint8 pg )
   \                     erasePage:
    496          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    497            HalFlashErase(pg);
   \   000007                ; Setup parameters for call to function HalFlashErase
   \   000007   12....       LCALL     `??HalFlashErase::?relay`; Banked call to: HalFlashErase
    498          
    499            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
   \   00000A   EE           MOV       A,R6
   \   00000B   2E           ADD       A,R6
   \   00000C   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00000F   7408         MOV       A,#0x8
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   E4           CLR       A
   \   000014   12....       LCALL     ?Subroutine11 & 0xFFFF
    500            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
   \                     ??CrossCallReturnLabel_5:
   \   000017   E4           CLR       A
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   F0           MOVX      @DPTR,A
    501          }
   \   00001B   02....       LJMP      ??Subroutine49_0 & 0xFFFF
    502          
    503          /*********************************************************************
    504           * @fn      compactPage
    505           *
    506           * @brief   Compacts the page specified.
    507           *
    508           * @param   srcPg - Valid NV page to erase.
    509           * @param   skipId - Item Id to not compact.
    510           *
    511           * @return  TRUE if valid items from 'srcPg' are successully compacted onto the 'pgRes';
    512           *          FALSE otherwise.
    513           *          Note that on a failure, this could loop, re-erasing the 'pgRes' and re-compacting with
    514           *          the risk of infinitely looping on HAL flash failure.
    515           *          Worst case scenario: HAL flash starts failing in general, perhaps low Vdd?
    516           *          All page compactions will fail which will cause all osal_nv_write() calls to return
    517           *          NV_OPER_FAILED.
    518           *          Eventually, all pages in use may also be in the state of "pending compaction" where
    519           *          the page header member OSAL_NV_PG_XFER is zeroed out.
    520           *          During this "HAL flash brown-out", the code will run and OTA should work (until low Vdd
    521           *          causes an actual chip brown-out, of course.) Although no new NV items will be created
    522           *          or written, the last value written with a return value of SUCCESS can continue to be
    523           *          read successfully.
    524           *          If eventually HAL flash starts working again, all of the pages marked as
    525           *          "pending compaction" may or may not be eventually compacted. But, initNV() will
    526           *          deterministically clean-up one page pending compaction per power-cycle
    527           *          (if HAL flash is working.) Nevertheless, one erased reserve page will be maintained
    528           *          through such a scenario.
    529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          static uint8 compactPage( uint8 srcPg, uint16 skipId )
   \                     compactPage:
    531          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
    532            uint16 srcOff;
    533            uint8 rtrn;
    534          
    535            // To minimize code size, only check for a clean page here where it's absolutely required.
    536            for (srcOff = 0; srcOff < OSAL_NV_PAGE_SIZE; srcOff++)
   \   000010   7E00         MOV       R6,#0x0
   \   000012   7F00         MOV       R7,#0x0
    537            {
    538              HalFlashRead(pgRes, srcOff, &rtrn, 1);
   \                     ??compactPage_0:
   \   000014                ; Setup parameters for call to function HalFlashRead
   \   000014   75..01       MOV       ?V4,#0x1
   \   000017   75..00       MOV       ?V5,#0x0
   \   00001A   78..         MOV       R0,#?V4
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?XSTACK_DISP102_8
   \   000024   EE           MOV       A,R6
   \   000025   FA           MOV       R2,A
   \   000026   EF           MOV       A,R7
   \   000027   FB           MOV       R3,A
   \   000028   90....       MOV       DPTR,#pgRes
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
    539              if (rtrn != OSAL_NV_ERASED)
   \   000033   85..82       MOV       DPL,?XSP + 0
   \   000036   85..83       MOV       DPH,?XSP + 1
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F4           CPL       A
   \   00003B   6008         JZ        ??compactPage_1
    540              {
    541                erasePage(pgRes);
   \   00003D                ; Setup parameters for call to function erasePage
   \   00003D   12....       LCALL     ?Subroutine23 & 0xFFFF
    542                return FALSE;
   \                     ??CrossCallReturnLabel_84:
   \   000040   7900         MOV       R1,#0x0
   \   000042   02....       LJMP      ??compactPage_2 & 0xFFFF
    543              }
    544            }
   \                     ??compactPage_1:
   \   000045   0E           INC       R6
   \   000046   EE           MOV       A,R6
   \   000047   7001         JNZ       ??compactPage_3
   \   000049   0F           INC       R7
   \                     ??compactPage_3:
   \   00004A   C3           CLR       C
   \   00004B   EF           MOV       A,R7
   \   00004C   9408         SUBB      A,#0x8
   \   00004E   40C4         JC        ??compactPage_0
    545          
    546            srcOff = OSAL_NV_PAGE_HDR_SIZE;
   \   000050   7E08         MOV       R6,#0x8
   \   000052   7F00         MOV       R7,#0x0
    547            rtrn = TRUE;
   \   000054   7401         MOV       A,#0x1
   \   000056   F0           MOVX      @DPTR,A
    548          
    549            while ( srcOff < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE ) )
    550            {
    551              osalNvHdr_t hdr;
    552              uint16 sz, dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
   \                     ??compactPage_4:
   \   000057   90....       MOV       DPTR,#pgRes
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   25E0         ADD       A,0xE0 /* A   */
   \   00005D   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000060   12....       LCALL     ?Subroutine20 & 0xFFFF
    553          
    554              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??CrossCallReturnLabel_30:
   \   000063                ; Setup parameters for call to function HalFlashRead
   \   000063   75..08       MOV       ?V6,#0x8
   \   000066   75..00       MOV       ?V7,#0x0
   \   000069   78..         MOV       R0,#?V6
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006E   7403         MOV       A,#0x3
   \   000070   12....       LCALL     ?XSTACK_DISP102_8
   \   000073   EE           MOV       A,R6
   \   000074   FA           MOV       R2,A
   \   000075   EF           MOV       A,R7
   \   000076   FB           MOV       R3,A
   \   000077   A9..         MOV       R1,?V0
   \   000079   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
    555          
    556              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   00007F   7401         MOV       A,#0x1
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   E0           MOVX      A,@DPTR
   \   000085   F4           CPL       A
   \   000086   7003         JNZ       ??compactPage_5
   \   000088   A3           INC       DPTR
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   F4           CPL       A
   \                     ??compactPage_5:
   \   00008B   7003         JNZ       $+5
   \   00008D   02....       LJMP      ??compactPage_6 & 0xFFFF
    557              {
    558                break;
    559              }
    560          
    561              // Get the actual size in bytes which is the ceiling(hdr.len)
    562              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   000090   7403         MOV       A,#0x3
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000098   4008         JC        ??compactPage_7
   \   00009A   75..FC       MOV       ?V6,#-0x4
   \   00009D   75..FF       MOV       ?V7,#-0x1
   \   0000A0   800D         SJMP      ??compactPage_8
   \                     ??compactPage_7:
   \   0000A2   7403         MOV       A,#0x3
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000AA   F5..         MOV       ?V6,A
   \   0000AC   E9           MOV       A,R1
   \   0000AD   F5..         MOV       ?V7,A
    563          
    564              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - srcOff) )
   \                     ??compactPage_8:
   \   0000AF   74F8         MOV       A,#-0x8
   \   0000B1   C3           CLR       C
   \   0000B2   9E           SUBB      A,R6
   \   0000B3   F8           MOV       R0,A
   \   0000B4   7407         MOV       A,#0x7
   \   0000B6   9F           SUBB      A,R7
   \   0000B7   F9           MOV       R1,A
   \   0000B8   C3           CLR       C
   \   0000B9   E8           MOV       A,R0
   \   0000BA   95..         SUBB      A,?V6
   \   0000BC   E9           MOV       A,R1
   \   0000BD   95..         SUBB      A,?V7
   \   0000BF   5003         JNC       $+5
   \   0000C1   02....       LJMP      ??compactPage_6 & 0xFFFF
    565              {
    566                break;
    567              }
    568          
    569              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - dstOff) )
   \   0000C4   74F8         MOV       A,#-0x8
   \   0000C6   C3           CLR       C
   \   0000C7   95..         SUBB      A,?V4
   \   0000C9   F8           MOV       R0,A
   \   0000CA   7407         MOV       A,#0x7
   \   0000CC   95..         SUBB      A,?V5
   \   0000CE   F9           MOV       R1,A
   \   0000CF   C3           CLR       C
   \   0000D0   E8           MOV       A,R0
   \   0000D1   95..         SUBB      A,?V6
   \   0000D3   E9           MOV       A,R1
   \   0000D4   95..         SUBB      A,?V7
   \   0000D6   5003         JNC       $+5
   \   0000D8   02....       LJMP      ??compactPage_9 & 0xFFFF
    570              {
    571                rtrn = FALSE;
    572                break;
    573              }
    574          
    575              srcOff += OSAL_NV_HDR_SIZE;
   \   0000DB   EE           MOV       A,R6
   \   0000DC   2408         ADD       A,#0x8
   \   0000DE   FE           MOV       R6,A
   \   0000DF   E4           CLR       A
   \   0000E0   3F           ADDC      A,R7
   \   0000E1   FF           MOV       R7,A
    576          
    577              if ( (hdr.id != OSAL_NV_ZEROED_ID) && (hdr.id != skipId) )
   \   0000E2   7401         MOV       A,#0x1
   \   0000E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E7   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0000EA   E8           MOV       A,R0
   \   0000EB   49           ORL       A,R1
   \   0000EC   7003         JNZ       $+5
   \   0000EE   02....       LJMP      ??compactPage_10 & 0xFFFF
   \   0000F1   7401         MOV       A,#0x1
   \   0000F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   65..         XRL       A,?V2
   \   0000F9   7004         JNZ       ??compactPage_11
   \   0000FB   A3           INC       DPTR
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   65..         XRL       A,?V3
   \                     ??compactPage_11:
   \   0000FF   7003         JNZ       $+5
   \   000101   02....       LJMP      ??compactPage_10 & 0xFFFF
    578              {
    579                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
   \   000104                ; Setup parameters for call to function calcChkF
   \   000104   7403         MOV       A,#0x3
   \   000106   12....       LCALL     ?XSTACK_DISP0_8
   \   000109   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00010C   EE           MOV       A,R6
   \   00010D   FA           MOV       R2,A
   \   00010E   EF           MOV       A,R7
   \   00010F   FB           MOV       R3,A
   \   000110   A9..         MOV       R1,?V0
   \   000112   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000115   12....       LCALL     ?XSTACK_DISP0_8
   \   000118   E0           MOVX      A,@DPTR
   \   000119   68           XRL       A,R0
   \   00011A   7003         JNZ       ??compactPage_12
   \   00011C   A3           INC       DPTR
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   69           XRL       A,R1
   \                     ??compactPage_12:
   \   00011F   6003         JZ        $+5
   \   000121   02....       LJMP      ??compactPage_10 & 0xFFFF
    580                {
    581                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
    582                   * OSAL_Nv interruptions caused by resets.
    583                   */
    584                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   000124   7407         MOV       A,#0x7
   \   000126   12....       LCALL     ?XSTACK_DISP0_8
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   F4           CPL       A
   \   00012B   7003         JNZ       ??compactPage_13
   \   00012D   A3           INC       DPTR
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   F4           CPL       A
   \                     ??compactPage_13:
   \   000130   700B         JNZ       ??compactPage_14
    585                  {
    586                    setItem( srcPg, srcOff, eNvXfer );
   \   000132                ; Setup parameters for call to function setItem
   \   000132   7C00         MOV       R4,#0x0
   \   000134   EE           MOV       A,R6
   \   000135   FA           MOV       R2,A
   \   000136   EF           MOV       A,R7
   \   000137   FB           MOV       R3,A
   \   000138   A9..         MOV       R1,?V0
   \   00013A   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
    587                  }
    588          
    589                  if ( writeItem( pgRes, hdr.id, hdr.len, NULL, FALSE ) )
   \                     ??compactPage_14:
   \   00013D                ; Setup parameters for call to function writeItem
   \   00013D   75..00       MOV       ?V1,#0x0
   \   000140   78..         MOV       R0,#?V1
   \   000142   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000145   E4           CLR       A
   \   000146   F5..         MOV       ?V8,A
   \   000148   F5..         MOV       ?V9,A
   \   00014A   78..         MOV       R0,#?V8
   \   00014C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014F   7406         MOV       A,#0x6
   \   000151   12....       LCALL     ?XSTACK_DISP0_8
   \   000154   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000157   7404         MOV       A,#0x4
   \   000159   12....       LCALL     ?XSTACK_DISP0_8
   \   00015C   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00015F   90....       MOV       DPTR,#pgRes
   \   000162   E0           MOVX      A,@DPTR
   \   000163   F9           MOV       R1,A
   \   000164   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   000167   7403         MOV       A,#0x3
   \   000169   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016C   E9           MOV       A,R1
   \   00016D   7003         JNZ       $+5
   \   00016F   02....       LJMP      ??compactPage_9 & 0xFFFF
    590                  {
    591                    dstOff += OSAL_NV_HDR_SIZE;
   \   000172   E5..         MOV       A,?V4
   \   000174   2408         ADD       A,#0x8
   \   000176   F5..         MOV       ?V4,A
   \   000178   E4           CLR       A
   \   000179   35..         ADDC      A,?V5
   \   00017B   F5..         MOV       ?V5,A
    592                    xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
   \   00017D                ; Setup parameters for call to function xferBuf
   \   00017D   78..         MOV       R0,#?V6
   \   00017F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000182   78..         MOV       R0,#?V4
   \   000184   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000187   90....       MOV       DPTR,#pgRes
   \   00018A   E0           MOVX      A,@DPTR
   \   00018B   FC           MOV       R4,A
   \   00018C   EE           MOV       A,R6
   \   00018D   FA           MOV       R2,A
   \   00018E   EF           MOV       A,R7
   \   00018F   FB           MOV       R3,A
   \   000190   A9..         MOV       R1,?V0
   \   000192   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   000195   7404         MOV       A,#0x4
   \   000197   12....       LCALL     ?DEALLOC_XSTACK8
    593                    // Calculate and write the new checksum.
    594                    if (hdr.chk == calcChkF(pgRes, dstOff, hdr.len))
   \   00019A                ; Setup parameters for call to function calcChkF
   \   00019A   7403         MOV       A,#0x3
   \   00019C   12....       LCALL     ?XSTACK_DISP0_8
   \   00019F   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0001A2   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0001A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A8   E0           MOVX      A,@DPTR
   \   0001A9   68           XRL       A,R0
   \   0001AA   7003         JNZ       ??compactPage_15
   \   0001AC   A3           INC       DPTR
   \   0001AD   E0           MOVX      A,@DPTR
   \   0001AE   69           XRL       A,R1
   \                     ??compactPage_15:
   \   0001AF   704E         JNZ       ??compactPage_9
    595                    {
    596                      if ( hdr.chk != setChk( pgRes, dstOff, hdr.chk ) )
   \   0001B1                ; Setup parameters for call to function setChk
   \   0001B1   7405         MOV       A,#0x5
   \   0001B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B6   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0001B9   12....       LCALL     `??setChk::?relay`; Banked call to: setChk
   \   0001BC   8A..         MOV       ?V8,R2
   \   0001BE   8B..         MOV       ?V9,R3
   \   0001C0   A8..         MOV       R0,?V8
   \   0001C2   A9..         MOV       R1,?V9
   \   0001C4   7405         MOV       A,#0x5
   \   0001C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C9   E0           MOVX      A,@DPTR
   \   0001CA   68           XRL       A,R0
   \   0001CB   7003         JNZ       ??compactPage_16
   \   0001CD   A3           INC       DPTR
   \   0001CE   E0           MOVX      A,@DPTR
   \   0001CF   69           XRL       A,R1
   \                     ??compactPage_16:
   \   0001D0   702D         JNZ       ??compactPage_9
    597                      {
    598                        rtrn = FALSE;
    599                        break;
    600                      }
    601                      else
    602                      {
    603                        hotItemUpdate(pgRes, dstOff, hdr.id);
   \   0001D2                ; Setup parameters for call to function hotItemUpdate
   \   0001D2   7401         MOV       A,#0x1
   \   0001D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D7   12....       LCALL     ?Subroutine13 & 0xFFFF
    604                      }
    605                    }
    606                    else
    607                    {
    608                      rtrn = FALSE;
    609                      break;
    610                    }
    611                  }
   \                     ??CrossCallReturnLabel_11:
   \   0001DA   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
    612                  else
    613                  {
    614                    rtrn = FALSE;
    615                    break;
    616                  }
    617                }
    618              }
    619          
    620              srcOff += sz;
   \                     ??compactPage_10:
   \   0001DD   EE           MOV       A,R6
   \   0001DE   25..         ADD       A,?V6
   \   0001E0   FE           MOV       R6,A
   \   0001E1   EF           MOV       A,R7
   \   0001E2   35..         ADDC      A,?V7
   \   0001E4   FF           MOV       R7,A
   \   0001E5   C3           CLR       C
   \   0001E6   EE           MOV       A,R6
   \   0001E7   94F8         SUBB      A,#-0x8
   \   0001E9   EF           MOV       A,R7
   \   0001EA   9407         SUBB      A,#0x7
   \   0001EC   5003         JNC       $+5
   \   0001EE   02....       LJMP      ??compactPage_4 & 0xFFFF
    621            }
    622          
    623            if (rtrn == FALSE)
   \                     ??compactPage_6:
   \   0001F1   85..82       MOV       DPL,?XSP + 0
   \   0001F4   85..83       MOV       DPH,?XSP + 1
   \   0001F7   E0           MOVX      A,@DPTR
   \   0001F8   700F         JNZ       ??compactPage_17
    624            {
    625              erasePage(pgRes);
   \                     ??compactPage_18:
   \   0001FA                ; Setup parameters for call to function erasePage
   \   0001FA   12....       LCALL     ?Subroutine23 & 0xFFFF
    626            }
   \                     ??CrossCallReturnLabel_85:
   \   0001FD   8016         SJMP      ??CrossCallReturnLabel_51
   \                     ??compactPage_9:
   \   0001FF   85..82       MOV       DPL,?XSP + 0
   \   000202   85..83       MOV       DPH,?XSP + 1
   \   000205   E4           CLR       A
   \   000206   F0           MOVX      @DPTR,A
   \   000207   80F1         SJMP      ??compactPage_18
    627            else if (skipId == OSAL_NV_ITEM_NULL)
   \                     ??compactPage_17:
   \   000209   E5..         MOV       A,?V2
   \   00020B   45..         ORL       A,?V3
   \   00020D   7006         JNZ       ??CrossCallReturnLabel_51
    628            {
    629              COMPACT_PAGE_CLEANUP(srcPg);
   \   00020F                ; Setup parameters for call to function setPageUse
   \   00020F   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000212                ; Setup parameters for call to function erasePage
   \   000212   12....       LCALL     ?Subroutine29 & 0xFFFF
    630            }
    631            // else invoking function must cleanup.
    632          
    633            return rtrn;
   \                     ??CrossCallReturnLabel_51:
   \   000215   85..82       MOV       DPL,?XSP + 0
   \   000218   85..83       MOV       DPH,?XSP + 1
   \   00021B   E0           MOVX      A,@DPTR
   \   00021C   F9           MOV       R1,A
   \                     ??compactPage_2:
   \   00021D   7409         MOV       A,#0x9
   \   00021F   02....       LJMP      ??Subroutine51_0 & 0xFFFF
    634          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000003   7405         MOV       A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   90....       MOV       DPTR,#pgRes
   \   000003                REQUIRE ??Subroutine52_0
   \   000003                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   AA..         MOV       R2,?V4
   \   000005   AB..         MOV       R3,?V5
   \   000007   90....       MOV       DPTR,#pgRes
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   7A01         MOV       R2,#0x1
   \   000002   90....       MOV       DPTR,#pgRes
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   22           RET
    635          
    636          /*********************************************************************
    637           * @fn      findItem
    638           *
    639           * @brief   Find an item Id in NV and return the page and offset to its data.
    640           *
    641           * @param   id - Valid NV item Id.
    642           *
    643           * @return  Offset of data corresponding to item Id, if found;
    644           *          otherwise OSAL_NV_ITEM_NULL.
    645           *
    646           *          The page containing the item, if found;
    647           *          otherwise no valid assignment made - left equal to item Id.
    648           *
    649           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          static uint16 findItem( uint16 id )
   \                     findItem:
    651          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   8003         SJMP      ??findItem_0
    652            uint16 off;
    653            uint8 pg;
    654          
    655            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    656            {
    657              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
    658              {
    659                findPg = pg;
    660                return off;
    661              }
    662            }
    663          
    664            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    665            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
    666            {
    667              return findItem( id | OSAL_NV_SOURCE_ID );
   \                     ??findItem_1:
   \   00000A   7480         MOV       A,#-0x80
   \   00000C   4F           ORL       A,R7
   \                     ??findItem_0:
   \   00000D   FF           MOV       R7,A
    668            }
   \   00000E   75..79       MOV       ?V0,#0x79
   \                     ??findItem_2:
   \   000011                ; Setup parameters for call to function initPage
   \   000011   7C00         MOV       R4,#0x0
   \   000013   EE           MOV       A,R6
   \   000014   FA           MOV       R2,A
   \   000015   EF           MOV       A,R7
   \   000016   FB           MOV       R3,A
   \   000017   A9..         MOV       R1,?V0
   \   000019   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6008         JZ        ??findItem_3
   \   000020   E5..         MOV       A,?V0
   \   000022   90....       MOV       DPTR,#findPg
   \   000025   F0           MOVX      @DPTR,A
   \   000026   8015         SJMP      ??findItem_4
   \                     ??findItem_3:
   \   000028   05..         INC       ?V0
   \   00002A   E5..         MOV       A,?V0
   \   00002C   C3           CLR       C
   \   00002D   947F         SUBB      A,#0x7f
   \   00002F   40E0         JC        ??findItem_2
   \   000031   EF           MOV       A,R7
   \   000032   5480         ANL       A,#0x80
   \   000034   60D4         JZ        ??findItem_1
    669            else
    670            {
    671              findPg = OSAL_NV_PAGE_NULL;
   \   000036   90....       MOV       DPTR,#findPg
   \   000039   E4           CLR       A
   \   00003A   F0           MOVX      @DPTR,A
    672              return OSAL_NV_ITEM_NULL;
   \   00003B   FA           MOV       R2,A
   \   00003C   FB           MOV       R3,A
    673            }
   \                     ??findItem_4:
   \   00003D   02....       LJMP      ??Subroutine48_0 & 0xFFFF
    674          }
    675          
    676          /*********************************************************************
    677           * @fn      initItem
    678           *
    679           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    680           *
    681           * @param   flag - TRUE if the 'buf' parameter contains data for the call to writeItem().
    682           *                 (i.e. if invoked from osal_nv_item_init() ).
    683           *                 FALSE if writeItem() should just write the header and the 'buf' parameter
    684           *                 is ok to use as a return value of the page number to be cleaned with
    685           *                 COMPACT_PAGE_CLEANUP().
    686           *                 (i.e. if invoked from osal_nv_write() ).
    687           * @param   id  - Valid NV item Id.
    688           * @param   len - Item data length.
    689           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    690           *
    691           * @return  The OSAL Nv page number if item write and read back checksums ok;
    692           *          OSAL_NV_PAGE_NULL otherwise.
    693           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    694          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
   \                     initItem:
    695          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
    696            uint16 sz = OSAL_NV_ITEM_SIZE( len );
   \   000014   C3           CLR       C
   \   000015   EC           MOV       A,R4
   \   000016   94F4         SUBB      A,#-0xc
   \   000018   ED           MOV       A,R5
   \   000019   94FF         SUBB      A,#-0x1
   \   00001B   400E         JC        ??initItem_0
   \   00001D   85..82       MOV       DPL,?XSP + 0
   \   000020   85..83       MOV       DPH,?XSP + 1
   \   000023   74FC         MOV       A,#-0x4
   \   000025   F0           MOVX      @DPTR,A
   \   000026   A3           INC       DPTR
   \   000027   74FF         MOV       A,#-0x1
   \   000029   8019         SJMP      ??initItem_1
   \                     ??initItem_0:
   \   00002B   EC           MOV       A,R4
   \   00002C   2403         ADD       A,#0x3
   \   00002E   F8           MOV       R0,A
   \   00002F   E4           CLR       A
   \   000030   35..         ADDC      A,?V1
   \   000032   F9           MOV       R1,A
   \   000033   E8           MOV       A,R0
   \   000034   54FC         ANL       A,#0xfc
   \   000036   2408         ADD       A,#0x8
   \   000038   5001         JNC       ??initItem_2
   \   00003A   09           INC       R1
   \                     ??initItem_2:
   \   00003B   85..82       MOV       DPL,?XSP + 0
   \   00003E   85..83       MOV       DPH,?XSP + 1
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   E9           MOV       A,R1
   \                     ??initItem_1:
   \   000044   F0           MOVX      @DPTR,A
    697            uint8 rtrn = OSAL_NV_PAGE_NULL;
   \   000045   7F00         MOV       R7,#0x0
    698            uint8 cnt = OSAL_NV_PAGES_USED;
   \   000047   7C06         MOV       R4,#0x6
    699            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
   \   000049   90....       MOV       DPTR,#pgRes
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   04           INC       A
   \   00004E   FE           MOV       R6,A
    700          
    701            do {
    702              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
   \                     ??initItem_3:
   \   00004F   EE           MOV       A,R6
   \   000050   C3           CLR       C
   \   000051   947F         SUBB      A,#0x7f
   \   000053   4002         JC        ??initItem_4
    703              {
    704                pg = OSAL_NV_PAGE_BEG;
   \   000055   7E79         MOV       R6,#0x79
    705              }
    706              if ( pg != pgRes )
   \                     ??initItem_4:
   \   000057   90....       MOV       DPTR,#pgRes
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   6E           XRL       A,R6
   \   00005C   6029         JZ        ??initItem_5
    707              {
    708                uint8 idx = pg - OSAL_NV_PAGE_BEG;
   \   00005E   7487         MOV       A,#-0x79
   \   000060   2E           ADD       A,R6
    709                if ( sz <= (OSAL_NV_PAGE_SIZE - pgOff[idx] + pgLost[idx]) )
   \   000061   12....       LCALL     ?Subroutine43 & 0xFFFF
    710                {
    711                  break;
    712                }
    713              }
   \                     ??CrossCallReturnLabel_76:
   \   000064   74..         MOV       A,#pgOff & 0xff
   \   000066   28           ADD       A,R0
   \   000067   F582         MOV       DPL,A
   \   000069   74..         MOV       A,#(pgOff >> 8) & 0xff
   \   00006B   39           ADDC      A,R1
   \   00006C   F583         MOV       DPH,A
   \   00006E   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000071   E4           CLR       A
   \   000072   C3           CLR       C
   \   000073   9A           SUBB      A,R2
   \   000074   FA           MOV       R2,A
   \   000075   7408         MOV       A,#0x8
   \   000077   9B           SUBB      A,R3
   \   000078   FB           MOV       R3,A
   \   000079   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   2A           ADD       A,R2
   \   00007E   FA           MOV       R2,A
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \   000081   3B           ADDC      A,R3
   \   000082   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000085   5008         JNC       ??initItem_6
    714              pg++;
   \                     ??initItem_5:
   \   000087   0E           INC       R6
    715            } while (--cnt);
   \   000088   1C           DEC       R4
   \   000089   EC           MOV       A,R4
   \   00008A   70C3         JNZ       ??initItem_3
   \   00008C   02....       LJMP      ??initItem_7 & 0xFFFF
    716          
    717            if (cnt)
   \                     ??initItem_6:
   \   00008F   EC           MOV       A,R4
   \   000090   7003         JNZ       $+5
   \   000092   02....       LJMP      ??initItem_7 & 0xFFFF
   \   000095   741C         MOV       A,#0x1c
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   F5..         MOV       ?V6,A
   \   00009D   A3           INC       DPTR
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   F5..         MOV       ?V7,A
    718            {
    719              // Item fits if an old page is compacted.
    720              if ( sz > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]) )
   \   0000A1   EE           MOV       A,R6
   \   0000A2   25E0         ADD       A,0xE0 /* A   */
   \   0000A4   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0000A7   FA           MOV       R2,A
   \   0000A8   7408         MOV       A,#0x8
   \   0000AA   99           SUBB      A,R1
   \   0000AB   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000AE   4003         JC        $+5
   \   0000B0   02....       LJMP      ??initItem_8 & 0xFFFF
    721              {
    722                osalNvPgHdr_t pgHdr;
    723          
    724                /* Prevent excessive re-writes to page header caused by numerous, rapid, & successive
    725                 * OSAL_Nv interruptions caused by resets.
    726                 */
    727                HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_PAGE_HDR_SIZE);
   \   0000B3                ; Setup parameters for call to function HalFlashRead
   \   0000B3   75..08       MOV       ?V8,#0x8
   \   0000B6   8F..         MOV       ?V9,R7
   \   0000B8   78..         MOV       R0,#?V8
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BD   7404         MOV       A,#0x4
   \   0000BF   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C2   7A00         MOV       R2,#0x0
   \   0000C4   7B00         MOV       R3,#0x0
   \   0000C6   EE           MOV       A,R6
   \   0000C7   F9           MOV       R1,A
   \   0000C8   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0000CB   12....       LCALL     ?DEALLOC_XSTACK8
    728                if ( pgHdr.xfer == OSAL_NV_ERASED_ID )
   \   0000CE   7406         MOV       A,#0x6
   \   0000D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   F4           CPL       A
   \   0000D5   7003         JNZ       ??initItem_9
   \   0000D7   A3           INC       DPTR
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   F4           CPL       A
   \                     ??initItem_9:
   \   0000DA   700B         JNZ       ??initItem_10
    729                {
    730                  // Mark the old page as being in process of compaction.
    731                  sz = OSAL_NV_ZEROED_ID;
   \   0000DC   12....       LCALL     ?Subroutine10 & 0xFFFF
    732                  writeWordH( pg, OSAL_NV_PG_XFER, (uint8*)(&sz) );
    733                }
   \                     ??CrossCallReturnLabel_88:
   \   0000DF   7A04         MOV       R2,#0x4
   \   0000E1   FB           MOV       R3,A
   \   0000E2   EE           MOV       A,R6
   \   0000E3   F9           MOV       R1,A
   \   0000E4   12....       LCALL     `??writeWordH::?relay`; Banked call to: writeWordH
    734          
    735                /* First the old page is compacted, then the new item will be the last one written to what
    736                 * had been the reserved page.
    737                 */
    738                if (compactPage( pg, id ))
   \                     ??initItem_10:
   \   0000E7                ; Setup parameters for call to function compactPage
   \   0000E7   AA..         MOV       R2,?V4
   \   0000E9   AB..         MOV       R3,?V5
   \   0000EB   EE           MOV       A,R6
   \   0000EC   F9           MOV       R1,A
   \   0000ED   12....       LCALL     `??compactPage::?relay`; Banked call to: compactPage
   \   0000F0   E9           MOV       A,R1
   \   0000F1   606A         JZ        ??initItem_7
    739                {
    740                  if ( writeItem( pgRes, id, len, buf, flag ) )
   \   0000F3                ; Setup parameters for call to function writeItem
   \   0000F3   E5..         MOV       A,?V2
   \   0000F5   F5..         MOV       ?V3,A
   \   0000F7   78..         MOV       R0,#?V3
   \   0000F9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FC   78..         MOV       R0,#?V6
   \   0000FE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000101   AC..         MOV       R4,?V0
   \   000103   AD..         MOV       R5,?V1
   \   000105   AA..         MOV       R2,?V4
   \   000107   AB..         MOV       R3,?V5
   \   000109   90....       MOV       DPTR,#pgRes
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   F9           MOV       R1,A
   \   00010E   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   000111   7403         MOV       A,#0x3
   \   000113   12....       LCALL     ?DEALLOC_XSTACK8
   \   000116   E9           MOV       A,R1
   \   000117   6005         JZ        ??initItem_11
    741                  {
    742                    rtrn = pgRes;
   \   000119   90....       MOV       DPTR,#pgRes
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   FF           MOV       R7,A
    743                  }
    744          
    745                  if ( flag == FALSE )
   \                     ??initItem_11:
   \   00011E   E5..         MOV       A,?V2
   \   000120   7009         JNZ       ??initItem_12
    746                  {
    747                    /* Overload 'buf' as an OUT parameter to pass back to the calling function
    748                     * the old page to be cleaned up.
    749                     */
    750                    *(uint8 *)buf = pg;
   \   000122   EE           MOV       A,R6
   \   000123   85..82       MOV       DPL,?V6
   \   000126   85..83       MOV       DPH,?V7
   \   000129   800C         SJMP      ??initItem_13
    751                  }
    752                  else
    753                  {
    754                    /* Safe to do the compacted page cleanup even if writeItem() above failed because the
    755                     * item does not yet exist since this call with flag==TRUE is from osal_nv_item_init().
    756                     */
    757                    COMPACT_PAGE_CLEANUP( pg );
   \                     ??initItem_12:
   \   00012B                ; Setup parameters for call to function setPageUse
   \   00012B   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00012E                ; Setup parameters for call to function erasePage
   \   00012E   EE           MOV       A,R6
   \   00012F   F9           MOV       R1,A
   \   000130   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   000133   EE           MOV       A,R6
   \   000134   90....       MOV       DPTR,#pgRes
   \                     ??initItem_13:
   \   000137   F0           MOVX      @DPTR,A
   \   000138   8023         SJMP      ??initItem_7
    758                  }
    759                }
    760              }
    761              else
    762              {
    763                if ( writeItem( pg, id, len, buf, flag ) )
   \                     ??initItem_8:
   \   00013A                ; Setup parameters for call to function writeItem
   \   00013A   E5..         MOV       A,?V2
   \   00013C   F5..         MOV       ?V3,A
   \   00013E   78..         MOV       R0,#?V3
   \   000140   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000143   78..         MOV       R0,#?V6
   \   000145   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000148   AC..         MOV       R4,?V0
   \   00014A   AA..         MOV       R2,?V4
   \   00014C   AB..         MOV       R3,?V5
   \   00014E   EE           MOV       A,R6
   \   00014F   F9           MOV       R1,A
   \   000150   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   000153   7403         MOV       A,#0x3
   \   000155   12....       LCALL     ?DEALLOC_XSTACK8
   \   000158   E9           MOV       A,R1
   \   000159   6002         JZ        ??initItem_7
    764                {
    765                  rtrn = pg;
   \   00015B   EE           MOV       A,R6
   \   00015C   FF           MOV       R7,A
    766                }
    767              }
    768            }
    769          
    770            return rtrn;
   \                     ??initItem_7:
   \   00015D   EF           MOV       A,R7
   \   00015E   F9           MOV       R1,A
   \   00015F   740A         MOV       A,#0xa
   \   000161   02....       LJMP      ??Subroutine51_0 & 0xFFFF
    771          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   FB           MOV       R3,A
   \   000001   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000004   C3           CLR       C
   \   000005   EA           MOV       A,R2
   \   000006   98           SUBB      A,R0
   \   000007   EB           MOV       A,R3
   \   000008   99           SUBB      A,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E4           CLR       A
   \   000007                REQUIRE ??Subroutine53_0
   \   000007                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000003   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000006   E4           CLR       A
   \   000007   C3           CLR       C
   \   000008   98           SUBB      A,R0
   \   000009   22           RET
    772          
    773          /*********************************************************************
    774           * @fn      setItem
    775           *
    776           * @brief   Set an item Id or status to mark its state.
    777           *
    778           * @param   pg - Valid NV page.
    779           * @param   offset - Valid offset into the page of the item data - the header
    780           *                   offset is calculated from this.
    781           * @param   stat - Valid enum value for the item status.
    782           *
    783           * @return  none
    784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    785          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
   \                     setItem:
    786          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   8C..         MOV       ?V0,R4
    787            osalNvHdr_t hdr;
    788          
    789            offset -= OSAL_NV_HDR_SIZE;
   \   00000E   EA           MOV       A,R2
   \   00000F   24F8         ADD       A,#-0x8
   \   000011   F5..         MOV       ?V2,A
   \   000013   EB           MOV       A,R3
   \   000014   34FF         ADDC      A,#-0x1
   \   000016   F5..         MOV       ?V3,A
    790            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000018                ; Setup parameters for call to function HalFlashRead
   \   000018   75..08       MOV       ?V4,#0x8
   \   00001B   75..00       MOV       ?V5,#0x0
   \   00001E   78..         MOV       R0,#?V4
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP102_8
   \   000028   AA..         MOV       R2,?V2
   \   00002A   AB..         MOV       R3,?V3
   \   00002C   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
    791          
    792            if ( stat == eNvXfer )
   \   000032   E5..         MOV       A,?V0
   \   000034   7022         JNZ       ??setItem_0
    793            {
    794              hdr.stat = OSAL_NV_ACTIVE;
   \   000036   7406         MOV       A,#0x6
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   E4           CLR       A
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   F0           MOVX      @DPTR,A
    795              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
   \   00003F                ; Setup parameters for call to function writeWord
   \   00003F   7404         MOV       A,#0x4
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   AC82         MOV       R4,DPL
   \   000046   AD83         MOV       R5,DPH
   \   000048   E5..         MOV       A,?V2
   \   00004A   2404         ADD       A,#0x4
   \   00004C   FA           MOV       R2,A
   \   00004D   E4           CLR       A
   \   00004E   35..         ADDC      A,?V3
   \   000050   FB           MOV       R3,A
   \   000051   A9..         MOV       R1,?V1
   \   000053   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   \   000056   8019         SJMP      ??CrossCallReturnLabel_92
    796            }
    797            else // if ( stat == eNvZero )
    798            {
    799              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    800                                                                                    OSAL_NV_HDR_SIZE;
   \                     ??setItem_0:
   \   000058   7402         MOV       A,#0x2
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   12....       LCALL     ?Subroutine12 & 0xFFFF
    801              hdr.id = 0;
   \                     ??CrossCallReturnLabel_6:
   \   000060   12....       LCALL     ?Subroutine10 & 0xFFFF
    802              writeWord( pg, offset, (uint8 *)(&hdr) );
   \                     ??CrossCallReturnLabel_89:
   \   000063   AA..         MOV       R2,?V2
   \   000065   AB..         MOV       R3,?V3
   \   000067   A9..         MOV       R1,?V1
   \   000069   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    803              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
   \   00006C   A8..         MOV       R0,?V1
   \   00006E   12....       LCALL     ?Subroutine21 & 0xFFFF
    804            }
    805          }
   \                     ??CrossCallReturnLabel_92:
   \   000071   7408         MOV       A,#0x8
   \   000073   12....       LCALL     ?DEALLOC_XSTACK8
   \   000076                REQUIRE ?Subroutine3
   \   000076                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E8           MOV       A,R0
   \   000001   28           ADD       A,R0
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   74..         MOV       A,#(pgLost + 14) & 0xff
   \   000008   28           ADD       A,R0
   \   000009   F582         MOV       DPL,A
   \   00000B   74..         MOV       A,#((pgLost - 242) >> 8) & 0xff
   \   00000D                REQUIRE ??Subroutine54_0
   \   00000D                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   39           ADDC      A,R1
   \   000001   F583         MOV       DPH,A
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2E           ADD       A,R6
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   3F           ADDC      A,R7
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003   2408         ADD       A,#0x8
   \   000005   FE           MOV       R6,A
   \   000006   E4           CLR       A
   \   000007   39           ADDC      A,R1
   \   000008   FF           MOV       R7,A
   \   000009   22           RET
    806          
    807          /*********************************************************************
    808           * @fn      setChk
    809           *
    810           * @brief   Set the item header checksum given the data buffer offset.
    811           *
    812           * @param   pg - Valid NV page.
    813           * @param   offset - Valid offset into the page of the item data - the header
    814           *                   offset is calculated from this.
    815           * @param   chk - The checksum to set.
    816           *
    817           * @return  The checksum read back.
    818           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7402         MOV       A,#0x2
   \   000002                REQUIRE ??Subroutine47_0
   \   000002                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    819          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk )
   \                     setChk:
    820          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   89..         MOV       ?V0,R1
    821            offset -= OSAL_NV_WORD_SIZE;
   \   000017   EA           MOV       A,R2
   \   000018   24FC         ADD       A,#-0x4
   \   00001A   FE           MOV       R6,A
   \   00001B   EB           MOV       A,R3
   \   00001C   34FF         ADDC      A,#-0x1
   \   00001E   FF           MOV       R7,A
    822            writeWordH( pg, offset, (uint8 *)&chk );
   \   00001F                ; Setup parameters for call to function writeWordH
   \   00001F   AC..         MOV       R4,?XSP + 0
   \   000021   AD..         MOV       R5,?XSP + 1
   \   000023   EE           MOV       A,R6
   \   000024   FA           MOV       R2,A
   \   000025   EF           MOV       A,R7
   \   000026   FB           MOV       R3,A
   \   000027   12....       LCALL     `??writeWordH::?relay`; Banked call to: writeWordH
    823            HalFlashRead( pg, offset, (uint8 *)(&chk), sizeof( chk ) );
   \   00002A                ; Setup parameters for call to function HalFlashRead
   \   00002A   75..02       MOV       ?V2,#0x2
   \   00002D   75..00       MOV       ?V3,#0x0
   \   000030   78..         MOV       R0,#?V2
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7402         MOV       A,#0x2
   \   000037   12....       LCALL     ?XSTACK_DISP102_8
   \   00003A   EE           MOV       A,R6
   \   00003B   FA           MOV       R2,A
   \   00003C   EF           MOV       A,R7
   \   00003D   FB           MOV       R3,A
   \   00003E   A9..         MOV       R1,?V0
   \   000040   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
    824          
    825            return chk;
   \   000046   85..82       MOV       DPL,?XSP + 0
   \   000049   85..83       MOV       DPH,?XSP + 1
   \   00004C   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00004F   02....       LJMP      ?Subroutine0 & 0xFFFF
    826          }
    827          
    828          /*********************************************************************
    829           * @fn      calcChkB
    830           *
    831           * @brief   Calculates the data checksum over the 'buf' parameter.
    832           *
    833           * @param   len - Byte count of the data to be checksummed.
    834           * @param   buf - Data buffer to be checksummed.
    835           *
    836           * @return  Calculated checksum of the data bytes.
    837           */
    838          static uint16 calcChkB( uint16 len, uint8 *buf )
    839          {
    840            uint8 fill = len % OSAL_NV_WORD_SIZE;
    841            uint16 chk;
    842          
    843            if ( !buf )
    844            {
    845              chk = len * OSAL_NV_ERASED;
    846            }
    847            else
    848            {
    849              chk = 0;
    850              while ( len-- )
    851              {
    852                chk += *buf++;
    853              }
    854            }
    855          
    856            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    857            if ( fill )
    858            {
    859              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
    860            }
    861          
    862            return chk;
    863          }
    864          
    865          /*********************************************************************
    866           * @fn      calcChkF
    867           *
    868           * @brief   Calculates the data checksum by reading the data bytes from NV.
    869           *
    870           * @param   pg - A valid NV Flash page.
    871           * @param   offset - A valid offset into the page.
    872           * @param   len - Byte count of the data to be checksummed.
    873           *
    874           * @return  Calculated checksum of the data bytes.
    875           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    876          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len )
   \                     calcChkF:
    877          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V4,R1
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
    878            uint16 chk = 0;
   \   000012   75..00       MOV       ?V0,#0x0
   \   000015   75..00       MOV       ?V1,#0x0
    879          
    880            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
   \   000018   EC           MOV       A,R4
   \   000019   2403         ADD       A,#0x3
   \   00001B   F5..         MOV       ?V6,A
   \   00001D   E4           CLR       A
   \   00001E   3F           ADDC      A,R7
   \   00001F   F5..         MOV       ?V7,A
   \   000021   7402         MOV       A,#0x2
   \   000023   78..         MOV       R0,#?V6
   \   000025   12....       LCALL     ?US_SHR
   \   000028   AE..         MOV       R6,?V6
   \   00002A   AF..         MOV       R7,?V7
    881          
    882            while ( len-- )
   \                     ??calcChkF_0:
   \   00002C   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00002F   6050         JZ        ??calcChkF_1
    883            {
    884              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    885          
    886              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
   \   000031                ; Setup parameters for call to function HalFlashRead
   \   000031   75..04       MOV       ?V6,#0x4
   \   000034   75..00       MOV       ?V7,#0x0
   \   000037   78..         MOV       R0,#?V6
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?XSTACK_DISP102_8
   \   000041   AA..         MOV       R2,?V2
   \   000043   AB..         MOV       R3,?V3
   \   000045   A9..         MOV       R1,?V4
   \   000047   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
    887              offset += OSAL_NV_WORD_SIZE;
   \   00004D   E5..         MOV       A,?V2
   \   00004F   2404         ADD       A,#0x4
   \   000051   F5..         MOV       ?V2,A
   \   000053   E4           CLR       A
   \   000054   35..         ADDC      A,?V3
   \   000056   F5..         MOV       ?V3,A
    888          
    889              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
   \   000058   7800         MOV       R0,#0x0
    890              {
    891                chk += tmp[cnt];
   \                     ??calcChkF_2:
   \   00005A   E8           MOV       A,R0
   \   00005B   FA           MOV       R2,A
   \   00005C   85..82       MOV       DPL,?XSP + 0
   \   00005F   85..83       MOV       DPH,?XSP + 1
   \   000062   E582         MOV       A,DPL
   \   000064   2A           ADD       A,R2
   \   000065   F582         MOV       DPL,A
   \   000067   E4           CLR       A
   \   000068   3583         ADDC      A,DPH
   \   00006A   F583         MOV       DPH,A
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   FA           MOV       R2,A
   \   00006E   E5..         MOV       A,?V0
   \   000070   2A           ADD       A,R2
   \   000071   F5..         MOV       ?V0,A
   \   000073   E4           CLR       A
   \   000074   35..         ADDC      A,?V1
   \   000076   F5..         MOV       ?V1,A
    892              }
   \   000078   08           INC       R0
   \   000079   E8           MOV       A,R0
   \   00007A   C3           CLR       C
   \   00007B   9404         SUBB      A,#0x4
   \   00007D   50AD         JNC       ??calcChkF_0
   \   00007F   80D9         SJMP      ??calcChkF_2
    893            }
    894          
    895            return chk;
   \                     ??calcChkF_1:
   \   000081   AA..         MOV       R2,?V0
   \   000083   AB..         MOV       R3,?V1
   \   000085   7404         MOV       A,#0x4
   \   000087                REQUIRE ?Subroutine4
   \   000087                ; // Fall through to label ?Subroutine4
    896          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine55_0
   \   000003                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   EE           MOV       A,R6
   \   000001   F8           MOV       R0,A
   \   000002   EF           MOV       A,R7
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   24FF         ADD       A,#-0x1
   \   000007   1E           DEC       R6
   \   000008   E9           MOV       A,R1
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   FF           MOV       R7,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   22           RET
    897          
    898          /*********************************************************************
    899           * @fn      writeWord
    900           *
    901           * @brief   Writes a Flash-WORD to NV.
    902           *
    903           * @param   pg - A valid NV Flash page.
    904           * @param   offset - A valid offset into the page.
    905           * @param   buf - Pointer to source buffer.
    906           *
    907           * @return  none
    908           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    909          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWord:
    910          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    911            offset = (offset / HAL_FLASH_WORD_SIZE) +
    912                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    913          
    914            HalFlashWrite(offset, buf, 1);
   \   000005                ; Setup parameters for call to function HalFlashWrite
   \   000005   75..01       MOV       ?V0,#0x1
   \   000008   75..00       MOV       ?V1,#0x0
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   \   000014   7402         MOV       A,#0x2
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?US_SHR
   \   00001B   E9           MOV       A,R1
   \   00001C   F5..         MOV       ?V2,A
   \   00001E   75..00       MOV       ?V3,#0x0
   \   000021   7409         MOV       A,#0x9
   \   000023   78..         MOV       R0,#?V2
   \   000025   12....       LCALL     ?S_SHL
   \   000028   E5..         MOV       A,?V0
   \   00002A   2400         ADD       A,#0x0
   \   00002C   FA           MOV       R2,A
   \   00002D   E5..         MOV       A,?V1
   \   00002F   35..         ADDC      A,?V3
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   000035   02....       LJMP      ?Subroutine0 & 0xFFFF
    915          }
    916          
    917          /*********************************************************************
    918           * @fn      writeWordM
    919           *
    920           * @brief   Writes multiple Flash-WORDs to NV.
    921           *
    922           * @param   pg - A valid NV Flash page.
    923           * @param   offset - A valid offset into the page.
    924           * @param   buf - Pointer to source buffer.
    925           * @param   cnt - Number of 4-byte blocks to write.
    926           *
    927           * @return  none
    928           */
    929          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
    930          {
    931            offset = (offset / HAL_FLASH_WORD_SIZE) +
    932                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    933            HalFlashWrite(offset, buf, cnt);
    934          }
    935          
    936          /*********************************************************************
    937           * @fn      writeWordH
    938           *
    939           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    940           *
    941           * @param   pg - A valid NV Flash page.
    942           * @param   offset - A valid offset into the page.
    943           * @param   buf - Pointer to source buffer.
    944           *
    945           * @return  none
    946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWordH:
    948          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    949            uint8 tmp[4];
    950          
    951            tmp[0] = buf[0];
   \   00000A   8C82         MOV       DPL,R4
   \   00000C   8D83         MOV       DPH,R5
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   85..83       MOV       DPH,?XSP + 1
   \   000015   F0           MOVX      @DPTR,A
    952            tmp[1] = buf[1];
   \   000016   8C82         MOV       DPL,R4
   \   000018   8D83         MOV       DPH,R5
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   C0E0         PUSH      A
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   D0E0         POP       A
   \   000025   F0           MOVX      @DPTR,A
    953            tmp[2] = OSAL_NV_ERASED;
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   74FF         MOV       A,#-0x1
   \   00002D   F0           MOVX      @DPTR,A
    954            tmp[3] = OSAL_NV_ERASED;
   \   00002E   7403         MOV       A,#0x3
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   74FF         MOV       A,#-0x1
   \   000035   F0           MOVX      @DPTR,A
    955          
    956            writeWord( pg, offset, tmp );
   \   000036                ; Setup parameters for call to function writeWord
   \   000036   AC..         MOV       R4,?XSP + 0
   \   000038   AD..         MOV       R5,?XSP + 1
   \   00003A   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    957          }
   \   00003D   7404         MOV       A,#0x4
   \   00003F   02....       LJMP      ?Subroutine1 & 0xFFFF
    958          
    959          /*********************************************************************
    960           * @fn      writeBuf
    961           *
    962           * @brief   Writes a data buffer to NV.
    963           *
    964           * @param   dstPg - A valid NV Flash page.
    965           * @param   offset - A valid offset into the page.
    966           * @param   len  - Byte count of the data to write.
    967           * @param   buf  - The data to write.
    968           *
    969           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    970           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7404         MOV       A,#0x4
   \   000002                REQUIRE ??Subroutine51_0
   \   000002                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    971          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
   \                     writeBuf:
    972          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V4,R4
   \   000012   8D..         MOV       ?V5,R5
    973            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000014   EA           MOV       A,R2
   \   000015   5403         ANL       A,#0x3
   \   000017   F5..         MOV       ?V0,A
   \   000019   7416         MOV       A,#0x16
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V2,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F5..         MOV       ?V3,A
    974            uint8 tmp[OSAL_NV_WORD_SIZE];
    975          
    976            if ( rem )
   \   000025   E5..         MOV       A,?V0
   \   000027   605E         JZ        ??writeBuf_0
    977            {
    978              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
   \   000029   74FC         MOV       A,#-0x4
   \   00002B   5E           ANL       A,R6
   \   00002C   FE           MOV       R6,A
    979              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00002D                ; Setup parameters for call to function HalFlashRead
   \   00002D   75..04       MOV       ?V6,#0x4
   \   000030   75..00       MOV       ?V7,#0x0
   \   000033   78..         MOV       R0,#?V6
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7402         MOV       A,#0x2
   \   00003A   12....       LCALL     ?XSTACK_DISP102_8
   \   00003D   EE           MOV       A,R6
   \   00003E   FA           MOV       R2,A
   \   00003F   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??writeBuf_1:
   \   000045   E5..         MOV       A,?V4
   \   000047   45..         ORL       A,?V5
   \   000049   6028         JZ        ??writeBuf_2
    980          
    981              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    982              {
    983                tmp[rem++] = *buf++;
   \   00004B   85..82       MOV       DPL,?V2
   \   00004E   85..83       MOV       DPH,?V3
   \   000051   E0           MOVX      A,@DPTR
   \   000052   C0E0         PUSH      A
   \   000054   A8..         MOV       R0,?V0
   \   000056   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000059   D0E0         POP       A
   \   00005B   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00005E   05..         INC       ?V0
    984                len--;
   \   000060   E5..         MOV       A,?V4
   \   000062   24FF         ADD       A,#-0x1
   \   000064   F5..         MOV       ?V4,A
   \   000066   E5..         MOV       A,?V5
   \   000068   34FF         ADDC      A,#-0x1
   \   00006A   F5..         MOV       ?V5,A
    985              }
   \   00006C   E5..         MOV       A,?V0
   \   00006E   C3           CLR       C
   \   00006F   9404         SUBB      A,#0x4
   \   000071   40D2         JC        ??writeBuf_1
    986          
    987              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_2:
   \   000073                ; Setup parameters for call to function writeWord
   \   000073   AC..         MOV       R4,?XSP + 0
   \   000075   AD..         MOV       R5,?XSP + 1
   \   000077   EE           MOV       A,R6
   \   000078   FA           MOV       R2,A
   \   000079   EF           MOV       A,R7
   \   00007A   FB           MOV       R3,A
   \   00007B   A9..         MOV       R1,?V1
   \   00007D   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    988              dstOff += OSAL_NV_WORD_SIZE;
   \   000080   EE           MOV       A,R6
   \   000081   2404         ADD       A,#0x4
   \   000083   FE           MOV       R6,A
   \   000084   E4           CLR       A
   \   000085   3F           ADDC      A,R7
   \   000086   FF           MOV       R7,A
    989            }
    990          
    991            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??writeBuf_0:
   \   000087   E5..         MOV       A,?V4
   \   000089   5403         ANL       A,#0x3
   \   00008B   F5..         MOV       ?V0,A
    992            len /= OSAL_NV_WORD_SIZE;
   \   00008D   85....       MOV       ?V6,?V4
   \   000090   85....       MOV       ?V7,?V5
   \   000093   7402         MOV       A,#0x2
   \   000095   78..         MOV       R0,#?V6
   \   000097   12....       LCALL     ?US_SHR
   \   00009A   85....       MOV       ?V4,?V6
   \   00009D   85....       MOV       ?V5,?V7
    993          
    994            if ( len )
   \   0000A0   E5..         MOV       A,?V4
   \   0000A2   45..         ORL       A,?V5
   \   0000A4   6048         JZ        ??CrossCallReturnLabel_55
    995            {
    996              writeWordM( dstPg, dstOff, buf, len );
   \   0000A6                ; Setup parameters for call to function HalFlashWrite
   \   0000A6   78..         MOV       R0,#?V4
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AB   AC..         MOV       R4,?V2
   \   0000AD   AD..         MOV       R5,?V3
   \   0000AF   8E..         MOV       ?V6,R6
   \   0000B1   8F..         MOV       ?V7,R7
   \   0000B3   7402         MOV       A,#0x2
   \   0000B5   78..         MOV       R0,#?V6
   \   0000B7   12....       LCALL     ?US_SHR
   \   0000BA   E5..         MOV       A,?V1
   \   0000BC   F5..         MOV       ?V8,A
   \   0000BE   75..00       MOV       ?V9,#0x0
   \   0000C1   7409         MOV       A,#0x9
   \   0000C3   78..         MOV       R0,#?V8
   \   0000C5   12....       LCALL     ?S_SHL
   \   0000C8   E5..         MOV       A,?V6
   \   0000CA   2400         ADD       A,#0x0
   \   0000CC   FA           MOV       R2,A
   \   0000CD   E5..         MOV       A,?V7
   \   0000CF   35..         ADDC      A,?V9
   \   0000D1   FB           MOV       R3,A
   \   0000D2   12....       LCALL     `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   0000D5   7402         MOV       A,#0x2
   \   0000D7   12....       LCALL     ?DEALLOC_XSTACK8
    997              dstOff += OSAL_NV_WORD_SIZE * len;
   \   0000DA   7402         MOV       A,#0x2
   \   0000DC   78..         MOV       R0,#?V4
   \   0000DE   12....       LCALL     ?S_SHL
   \   0000E1   A8..         MOV       R0,?V4
   \   0000E3   A9..         MOV       R1,?V5
   \   0000E5   EE           MOV       A,R6
   \   0000E6   28           ADD       A,R0
   \   0000E7   FE           MOV       R6,A
   \   0000E8   EF           MOV       A,R7
   \   0000E9   39           ADDC      A,R1
   \   0000EA   FF           MOV       R7,A
    998              buf += OSAL_NV_WORD_SIZE * len;
   \   0000EB   12....       LCALL     ?Subroutine31 & 0xFFFF
    999            }
   1000          
   1001            if ( rem )
   \                     ??CrossCallReturnLabel_55:
   \   0000EE   E5..         MOV       A,?V0
   \   0000F0   604F         JZ        ??writeBuf_3
   1002            {
   1003              uint8 idx = 0;
   \   0000F2   75..00       MOV       ?V4,#0x0
   1004              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   0000F5                ; Setup parameters for call to function HalFlashRead
   \   0000F5   75..04       MOV       ?V6,#0x4
   \   0000F8   75..00       MOV       ?V7,#0x0
   \   0000FB   78..         MOV       R0,#?V6
   \   0000FD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000100   7402         MOV       A,#0x2
   \   000102   12....       LCALL     ?XSTACK_DISP102_8
   \   000105   EE           MOV       A,R6
   \   000106   FA           MOV       R2,A
   \   000107   EF           MOV       A,R7
   \   000108   FB           MOV       R3,A
   \   000109   A9..         MOV       R1,?V1
   \   00010B   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00010E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000111   8015         SJMP      ??writeBuf_4
   1005              while ( rem-- )
   1006              {
   1007                tmp[idx++] = *buf++;
   \                     ??writeBuf_5:
   \   000113   85..82       MOV       DPL,?V2
   \   000116   85..83       MOV       DPH,?V3
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   C0E0         PUSH      A
   \   00011C   A8..         MOV       R0,?V4
   \   00011E   12....       LCALL     ?Subroutine32 & 0xFFFF
   1008              }
   \                     ??CrossCallReturnLabel_57:
   \   000121   D0E0         POP       A
   \   000123   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000126   05..         INC       ?V4
   \                     ??writeBuf_4:
   \   000128   85....       MOV       ?V5,?V0
   \   00012B   74FF         MOV       A,#-0x1
   \   00012D   25..         ADD       A,?V5
   \   00012F   F5..         MOV       ?V0,A
   \   000131   04           INC       A
   \   000132   70DF         JNZ       ??writeBuf_5
   1009              writeWord( dstPg, dstOff, tmp );
   \   000134                ; Setup parameters for call to function writeWord
   \   000134   AC..         MOV       R4,?XSP + 0
   \   000136   AD..         MOV       R5,?XSP + 1
   \   000138   EE           MOV       A,R6
   \   000139   FA           MOV       R2,A
   \   00013A   EF           MOV       A,R7
   \   00013B   FB           MOV       R3,A
   \   00013C   A9..         MOV       R1,?V1
   \   00013E   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1010            }
   1011          }
   \                     ??writeBuf_3:
   \   000141   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E582         MOV       A,DPL
   \   000008   28           ADD       A,R0
   \   000009   F582         MOV       DPL,A
   \   00000B   E4           CLR       A
   \   00000C   3583         ADDC      A,DPH
   \   00000E   F583         MOV       DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   8582..       MOV       ?V2,DPL
   \   00000B   8583..       MOV       ?V3,DPH
   \   00000E   22           RET
   1012          
   1013          /*********************************************************************
   1014           * @fn      xferBuf
   1015           *
   1016           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
   1017           *
   1018           * @return  none
   1019           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E582         MOV       A,DPL
   \   000002   28           ADD       A,R0
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3583         ADDC      A,DPH
   \   000007   FD           MOV       R5,A
   \   000008                REQUIRE ??Subroutine56_0
   \   000008                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   AA..         MOV       R2,?V4
   \   000002   AB..         MOV       R3,?V5
   \   000004   A9..         MOV       R1,?V6
   \   000006                REQUIRE ??Subroutine57_0
   \   000006                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1020          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
   \                     xferBuf:
   1021          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V6,R1
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
   \   000010   8C..         MOV       ?V3,R4
   \   000012   7416         MOV       A,#0x16
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V1,A
   1022            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   00001E   E5..         MOV       A,?V0
   \   000020   5403         ANL       A,#0x3
   \   000022   F5..         MOV       ?V2,A
   \   000024   7418         MOV       A,#0x18
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   FE           MOV       R6,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FF           MOV       R7,A
   1023            uint8 tmp[OSAL_NV_WORD_SIZE];
   1024          
   1025            if ( rem )
   \   00002E   E5..         MOV       A,?V2
   \   000030   605E         JZ        ??CrossCallReturnLabel_58
   1026            {
   1027              dstOff -= rem;
   \   000032   F8           MOV       R0,A
   \   000033   C3           CLR       C
   \   000034   E5..         MOV       A,?V0
   \   000036   98           SUBB      A,R0
   \   000037   F5..         MOV       ?V0,A
   \   000039   E5..         MOV       A,?V1
   \   00003B   9400         SUBB      A,#0x0
   \   00003D   F5..         MOV       ?V1,A
   1028              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00003F                ; Setup parameters for call to function HalFlashRead
   \   00003F   75..04       MOV       ?V8,#0x4
   \   000042   75..00       MOV       ?V9,#0x0
   \   000045   78..         MOV       R0,#?V8
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   7402         MOV       A,#0x2
   \   00004C   12....       LCALL     ?XSTACK_DISP102_8
   \   00004F   AA..         MOV       R2,?V0
   \   000051   AB..         MOV       R3,?V1
   \   000053   A9..         MOV       R1,?V3
   \   000055   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000058   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??xferBuf_0:
   \   00005B   EE           MOV       A,R6
   \   00005C   4F           ORL       A,R7
   \   00005D   602E         JZ        ??xferBuf_1
   1029          
   1030              while ( (rem < OSAL_NV_WORD_SIZE) && len )
   1031              {
   1032                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
   \   00005F                ; Setup parameters for call to function HalFlashRead
   \   00005F   75..01       MOV       ?V8,#0x1
   \   000062   78..         MOV       R0,#?V8
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000067   A8..         MOV       R0,?V2
   \   000069   7402         MOV       A,#0x2
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   1033                srcOff++;
   \   000074   05..         INC       ?V4
   \   000076   E5..         MOV       A,?V4
   \   000078   7002         JNZ       ??xferBuf_2
   \   00007A   05..         INC       ?V5
   1034                rem++;
   \                     ??xferBuf_2:
   \   00007C   05..         INC       ?V2
   1035                len--;
   \   00007E   EE           MOV       A,R6
   \   00007F   24FF         ADD       A,#-0x1
   \   000081   1E           DEC       R6
   \   000082   EF           MOV       A,R7
   \   000083   34FF         ADDC      A,#-0x1
   \   000085   FF           MOV       R7,A
   1036              }
   \   000086   E5..         MOV       A,?V2
   \   000088   C3           CLR       C
   \   000089   9404         SUBB      A,#0x4
   \   00008B   40CE         JC        ??xferBuf_0
   1037          
   1038              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_1:
   \   00008D                ; Setup parameters for call to function writeWord
   \   00008D   12....       LCALL     ?Subroutine33 & 0xFFFF
   1039              dstOff += OSAL_NV_WORD_SIZE;
   1040            }
   1041          
   1042            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_58:
   \   000090   EE           MOV       A,R6
   \   000091   5403         ANL       A,#0x3
   \   000093   F5..         MOV       ?V2,A
   1043            len /= OSAL_NV_WORD_SIZE;
   \   000095   8E..         MOV       ?V8,R6
   \   000097   8F..         MOV       ?V9,R7
   \   000099   7402         MOV       A,#0x2
   \   00009B   78..         MOV       R0,#?V8
   \   00009D   12....       LCALL     ?US_SHR
   \   0000A0   AE..         MOV       R6,?V8
   \   0000A2   AF..         MOV       R7,?V9
   \   0000A4   8024         SJMP      ??CrossCallReturnLabel_59
   1044          
   1045            while ( len-- )
   1046            {
   1047              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
   \                     ??xferBuf_3:
   \   0000A6                ; Setup parameters for call to function HalFlashRead
   \   0000A6   75..04       MOV       ?V8,#0x4
   \   0000A9   75..00       MOV       ?V9,#0x0
   \   0000AC   78..         MOV       R0,#?V8
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B1   7402         MOV       A,#0x2
   \   0000B3   12....       LCALL     ?XSTACK_DISP102_8
   \   0000B6   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   1048              srcOff += OSAL_NV_WORD_SIZE;
   \   0000BC   E5..         MOV       A,?V4
   \   0000BE   2404         ADD       A,#0x4
   \   0000C0   F5..         MOV       ?V4,A
   \   0000C2   E4           CLR       A
   \   0000C3   35..         ADDC      A,?V5
   \   0000C5   F5..         MOV       ?V5,A
   1049              writeWord( dstPg, dstOff, tmp );
   \   0000C7                ; Setup parameters for call to function writeWord
   \   0000C7   12....       LCALL     ?Subroutine33 & 0xFFFF
   1050              dstOff += OSAL_NV_WORD_SIZE;
   1051            }
   \                     ??CrossCallReturnLabel_59:
   \   0000CA   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000CD   70D7         JNZ       ??xferBuf_3
   1052          
   1053            if ( rem )
   \   0000CF   E5..         MOV       A,?V2
   \   0000D1   6054         JZ        ??xferBuf_4
   1054            {
   1055              uint8 idx = 0;
   \   0000D3   7E00         MOV       R6,#0x0
   1056              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   0000D5                ; Setup parameters for call to function HalFlashRead
   \   0000D5   75..04       MOV       ?V8,#0x4
   \   0000D8   8E..         MOV       ?V9,R6
   \   0000DA   78..         MOV       R0,#?V8
   \   0000DC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DF   7402         MOV       A,#0x2
   \   0000E1   12....       LCALL     ?XSTACK_DISP102_8
   \   0000E4   AA..         MOV       R2,?V0
   \   0000E6   AB..         MOV       R3,?V1
   \   0000E8   A9..         MOV       R1,?V3
   \   0000EA   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0000ED   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F0   801E         SJMP      ??xferBuf_5
   1057              while ( rem-- )
   1058              {
   1059                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
   \                     ??xferBuf_6:
   \   0000F2                ; Setup parameters for call to function HalFlashRead
   \   0000F2   75..01       MOV       ?V8,#0x1
   \   0000F5   78..         MOV       R0,#?V8
   \   0000F7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FA   EE           MOV       A,R6
   \   0000FB   F8           MOV       R0,A
   \   0000FC   7402         MOV       A,#0x2
   \   0000FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000101   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000104   12....       LCALL     ?DEALLOC_XSTACK8
   1060                srcOff++;
   \   000107   05..         INC       ?V4
   \   000109   E5..         MOV       A,?V4
   \   00010B   7002         JNZ       ??xferBuf_7
   \   00010D   05..         INC       ?V5
   1061                idx++;
   \                     ??xferBuf_7:
   \   00010F   0E           INC       R6
   1062              }
   \                     ??xferBuf_5:
   \   000110   AF..         MOV       R7,?V2
   \   000112   74FF         MOV       A,#-0x1
   \   000114   2F           ADD       A,R7
   \   000115   F5..         MOV       ?V2,A
   \   000117   04           INC       A
   \   000118   70D8         JNZ       ??xferBuf_6
   1063              writeWord( dstPg, dstOff, tmp );
   \   00011A                ; Setup parameters for call to function writeWord
   \   00011A   AC..         MOV       R4,?XSP + 0
   \   00011C   AD..         MOV       R5,?XSP + 1
   \   00011E   AA..         MOV       R2,?V0
   \   000120   AB..         MOV       R3,?V1
   \   000122   A9..         MOV       R1,?V3
   \   000124   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1064            }
   1065          }
   \                     ??xferBuf_4:
   \   000127   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   AC..         MOV       R4,?XSP + 0
   \   000002   AD..         MOV       R5,?XSP + 1
   \   000004   AA..         MOV       R2,?V0
   \   000006   AB..         MOV       R3,?V1
   \   000008   A9..         MOV       R1,?V3
   \   00000A   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   \   00000D   E5..         MOV       A,?V0
   \   00000F   2404         ADD       A,#0x4
   \   000011   F5..         MOV       ?V0,A
   \   000013   E4           CLR       A
   \   000014   35..         ADDC      A,?V1
   \   000016   F5..         MOV       ?V1,A
   \   000018   22           RET
   1066          
   1067          /*********************************************************************
   1068           * @fn      writeItem
   1069           *
   1070           * @brief   Writes an item header/data combo to the specified NV page.
   1071           *
   1072           * @param   pg - Valid NV Flash page.
   1073           * @param   id - Valid NV item Id.
   1074           * @param   len  - Byte count of the data to write.
   1075           * @param   buf  - The data to write. If NULL, no data/checksum write.
   1076           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
   1077           *
   1078           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
   1079           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1080          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
   \                     writeItem:
   1081          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   1082            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
   \   000014   E9           MOV       A,R1
   \   000015   29           ADD       A,R1
   \   000016   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V2,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V3,A
   1083            uint8 rtrn = FALSE;
   \   000020   75..00       MOV       ?V1,#0x0
   1084            osalNvHdr_t hdr;
   1085          
   1086            hdr.id = id;
   \   000023   85..82       MOV       DPL,?XSP + 0
   \   000026   85..83       MOV       DPH,?XSP + 1
   \   000029   EA           MOV       A,R2
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   EB           MOV       A,R3
   \   00002D   F0           MOVX      @DPTR,A
   1087            hdr.len = len;
   \   00002E   7402         MOV       A,#0x2
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   EC           MOV       A,R4
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   ED           MOV       A,R5
   \   000037   F0           MOVX      @DPTR,A
   1088          
   1089            writeWord( pg, offset, (uint8 *)&hdr );
   \   000038                ; Setup parameters for call to function writeWord
   \   000038   AC..         MOV       R4,?XSP + 0
   \   00003A   AD..         MOV       R5,?XSP + 1
   \   00003C   AA..         MOV       R2,?V2
   \   00003E   AB..         MOV       R3,?V3
   \   000040   A9..         MOV       R1,?V0
   \   000042   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1090            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000045                ; Setup parameters for call to function HalFlashRead
   \   000045   75..08       MOV       ?V6,#0x8
   \   000048   75..00       MOV       ?V7,#0x0
   \   00004B   78..         MOV       R0,#?V6
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   7402         MOV       A,#0x2
   \   000052   12....       LCALL     ?XSTACK_DISP102_8
   \   000055   AA..         MOV       R2,?V2
   \   000057   AB..         MOV       R3,?V3
   \   000059   A9..         MOV       R1,?V0
   \   00005B   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00005E   12....       LCALL     ?DEALLOC_XSTACK8
   1091          
   1092            if ( (hdr.id == id) && (hdr.len == len) )
   \   000061   85..82       MOV       DPL,?XSP + 0
   \   000064   85..83       MOV       DPH,?XSP + 1
   \   000067   E0           MOVX      A,@DPTR
   \   000068   65..         XRL       A,?V4
   \   00006A   7004         JNZ       ??writeItem_0
   \   00006C   A3           INC       DPTR
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   65..         XRL       A,?V5
   \                     ??writeItem_0:
   \   000070   6003         JZ        $+5
   \   000072   02....       LJMP      ??writeItem_1 & 0xFFFF
   \   000075   7402         MOV       A,#0x2
   \   000077   12....       LCALL     ?XSTACK_DISP0_8
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   6E           XRL       A,R6
   \   00007C   7003         JNZ       ??writeItem_2
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   6F           XRL       A,R7
   \                     ??writeItem_2:
   \   000081   6003         JZ        $+5
   \   000083   02....       LJMP      ??writeItem_1 & 0xFFFF
   1093            {
   1094              if ( flag )
   \   000086   741A         MOV       A,#0x1a
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   7003         JNZ       $+5
   \   00008E   02....       LJMP      ??writeItem_3 & 0xFFFF
   \   000091   7418         MOV       A,#0x18
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   12....       LCALL     ?Subroutine20 & 0xFFFF
   1095              {
   1096                hdr.chk = calcChkB( len, buf );
   \                     ??CrossCallReturnLabel_31:
   \   000099   85..82       MOV       DPL,?V4
   \   00009C   F583         MOV       DPH,A
   \   00009E   EE           MOV       A,R6
   \   00009F   F8           MOV       R0,A
   \   0000A0   EF           MOV       A,R7
   \   0000A1   F9           MOV       R1,A
   \   0000A2   EE           MOV       A,R6
   \   0000A3   5403         ANL       A,#0x3
   \   0000A5   F5..         MOV       ?V6,A
   \   0000A7   E582         MOV       A,DPL
   \   0000A9   4583         ORL       A,DPH
   \   0000AB   7015         JNZ       ??writeItem_4
   \   0000AD   EE           MOV       A,R6
   \   0000AE   75F0FF       MOV       B,#-0x1
   \   0000B1   A4           MUL       AB
   \   0000B2   F8           MOV       R0,A
   \   0000B3   AAF0         MOV       R2,B
   \   0000B5   75F0FF       MOV       B,#-0x1
   \   0000B8   EF           MOV       A,R7
   \   0000B9   A4           MUL       AB
   \   0000BA   2A           ADD       A,R2
   \   0000BB   F9           MOV       R1,A
   \   0000BC   E8           MOV       A,R0
   \   0000BD   FA           MOV       R2,A
   \   0000BE   E9           MOV       A,R1
   \   0000BF   FB           MOV       R3,A
   \   0000C0   801F         SJMP      ??writeItem_5
   \                     ??writeItem_4:
   \   0000C2   7A00         MOV       R2,#0x0
   \   0000C4   7B00         MOV       R3,#0x0
   \   0000C6   8009         SJMP      ??writeItem_6
   \                     ??writeItem_7:
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   FC           MOV       R4,A
   \   0000CA   EA           MOV       A,R2
   \   0000CB   2C           ADD       A,R4
   \   0000CC   FA           MOV       R2,A
   \   0000CD   E4           CLR       A
   \   0000CE   3B           ADDC      A,R3
   \   0000CF   FB           MOV       R3,A
   \   0000D0   A3           INC       DPTR
   \                     ??writeItem_6:
   \   0000D1   E8           MOV       A,R0
   \   0000D2   FC           MOV       R4,A
   \   0000D3   E9           MOV       A,R1
   \   0000D4   FD           MOV       R5,A
   \   0000D5   EC           MOV       A,R4
   \   0000D6   24FF         ADD       A,#-0x1
   \   0000D8   18           DEC       R0
   \   0000D9   ED           MOV       A,R5
   \   0000DA   34FF         ADDC      A,#-0x1
   \   0000DC   F9           MOV       R1,A
   \   0000DD   EC           MOV       A,R4
   \   0000DE   4D           ORL       A,R5
   \   0000DF   70E7         JNZ       ??writeItem_7
   \                     ??writeItem_5:
   \   0000E1   E5..         MOV       A,?V6
   \   0000E3   601E         JZ        ??writeItem_8
   \   0000E5   F8           MOV       R0,A
   \   0000E6   7404         MOV       A,#0x4
   \   0000E8   C3           CLR       C
   \   0000E9   98           SUBB      A,R0
   \   0000EA   F8           MOV       R0,A
   \   0000EB   95E0         SUBB      A,0xE0 /* A   */
   \   0000ED   F9           MOV       R1,A
   \   0000EE   E8           MOV       A,R0
   \   0000EF   75F0FF       MOV       B,#-0x1
   \   0000F2   A4           MUL       AB
   \   0000F3   F8           MOV       R0,A
   \   0000F4   ACF0         MOV       R4,B
   \   0000F6   75F0FF       MOV       B,#-0x1
   \   0000F9   E9           MOV       A,R1
   \   0000FA   A4           MUL       AB
   \   0000FB   2C           ADD       A,R4
   \   0000FC   F9           MOV       R1,A
   \   0000FD   EA           MOV       A,R2
   \   0000FE   28           ADD       A,R0
   \   0000FF   FA           MOV       R2,A
   \   000100   EB           MOV       A,R3
   \   000101   39           ADDC      A,R1
   \   000102   FB           MOV       R3,A
   1097          
   1098                offset += OSAL_NV_HDR_SIZE;
   1099                if ( buf != NULL )
   1100                {
   1101                  writeBuf( pg, offset, len, buf );
   1102                }
   1103          
   1104                if ( hdr.chk == calcChkF( pg, offset, len ) )
   1105                {
   1106                  if ( hdr.chk == setChk( pg, offset, hdr.chk ) )
   1107                  {
   1108                    hotItemUpdate(pg, offset, hdr.id);
   1109                    rtrn = TRUE;
   1110                  }
   1111                }
   1112              }
   1113              else
   1114              {
   1115                rtrn = TRUE;
   1116              }
   1117          
   1118              len = OSAL_NV_ITEM_SIZE( hdr.len );
   1119            }
   \                     ??writeItem_8:
   \   000103   7404         MOV       A,#0x4
   \   000105   12....       LCALL     ?XSTACK_DISP0_8
   \   000108   EA           MOV       A,R2
   \   000109   F0           MOVX      @DPTR,A
   \   00010A   A3           INC       DPTR
   \   00010B   EB           MOV       A,R3
   \   00010C   F0           MOVX      @DPTR,A
   \   00010D   E5..         MOV       A,?V2
   \   00010F   2408         ADD       A,#0x8
   \   000111   F5..         MOV       ?V2,A
   \   000113   E4           CLR       A
   \   000114   35..         ADDC      A,?V3
   \   000116   F5..         MOV       ?V3,A
   \   000118   E5..         MOV       A,?V4
   \   00011A   45..         ORL       A,?V5
   \   00011C   6017         JZ        ??writeItem_9
   \   00011E                ; Setup parameters for call to function writeBuf
   \   00011E   78..         MOV       R0,#?V4
   \   000120   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000123   EE           MOV       A,R6
   \   000124   FC           MOV       R4,A
   \   000125   EF           MOV       A,R7
   \   000126   FD           MOV       R5,A
   \   000127   AA..         MOV       R2,?V2
   \   000129   AB..         MOV       R3,?V3
   \   00012B   A9..         MOV       R1,?V0
   \   00012D   12....       LCALL     `??writeBuf::?relay`; Banked call to: writeBuf
   \   000130   7402         MOV       A,#0x2
   \   000132   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??writeItem_9:
   \   000135                ; Setup parameters for call to function calcChkF
   \   000135   EE           MOV       A,R6
   \   000136   FC           MOV       R4,A
   \   000137   EF           MOV       A,R7
   \   000138   FD           MOV       R5,A
   \   000139   AA..         MOV       R2,?V2
   \   00013B   AB..         MOV       R3,?V3
   \   00013D   A9..         MOV       R1,?V0
   \   00013F   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   000142   8A..         MOV       ?V4,R2
   \   000144   8B..         MOV       ?V5,R3
   \   000146   A8..         MOV       R0,?V4
   \   000148   A9..         MOV       R1,?V5
   \   00014A   7404         MOV       A,#0x4
   \   00014C   12....       LCALL     ?XSTACK_DISP0_8
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   68           XRL       A,R0
   \   000151   7003         JNZ       ??writeItem_10
   \   000153   A3           INC       DPTR
   \   000154   E0           MOVX      A,@DPTR
   \   000155   69           XRL       A,R1
   \                     ??writeItem_10:
   \   000156   7030         JNZ       ??writeItem_11
   \   000158                ; Setup parameters for call to function setChk
   \   000158   7404         MOV       A,#0x4
   \   00015A   12....       LCALL     ?XSTACK_DISP0_8
   \   00015D   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000160   12....       LCALL     `??setChk::?relay`; Banked call to: setChk
   \   000163   8A..         MOV       ?V4,R2
   \   000165   8B..         MOV       ?V5,R3
   \   000167   A8..         MOV       R0,?V4
   \   000169   A9..         MOV       R1,?V5
   \   00016B   7404         MOV       A,#0x4
   \   00016D   12....       LCALL     ?XSTACK_DISP0_8
   \   000170   E0           MOVX      A,@DPTR
   \   000171   68           XRL       A,R0
   \   000172   7003         JNZ       ??writeItem_12
   \   000174   A3           INC       DPTR
   \   000175   E0           MOVX      A,@DPTR
   \   000176   69           XRL       A,R1
   \                     ??writeItem_12:
   \   000177   700F         JNZ       ??writeItem_11
   \   000179                ; Setup parameters for call to function hotItemUpdate
   \   000179   85..82       MOV       DPL,?XSP + 0
   \   00017C   85..83       MOV       DPH,?XSP + 1
   \   00017F   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000182   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   \                     ??writeItem_3:
   \   000185   75..01       MOV       ?V1,#0x1
   \                     ??writeItem_11:
   \   000188   7402         MOV       A,#0x2
   \   00018A   12....       LCALL     ?XSTACK_DISP0_8
   \   00018D   C3           CLR       C
   \   00018E   E0           MOVX      A,@DPTR
   \   00018F   94F4         SUBB      A,#-0xc
   \   000191   A3           INC       DPTR
   \   000192   E0           MOVX      A,@DPTR
   \   000193   94FF         SUBB      A,#-0x1
   \   000195   4006         JC        ??writeItem_13
   \   000197   7EFC         MOV       R6,#-0x4
   \   000199   7FFF         MOV       R7,#-0x1
   \   00019B   8043         SJMP      ??CrossCallReturnLabel_93
   \                     ??writeItem_13:
   \   00019D   7402         MOV       A,#0x2
   \   00019F   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A2   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001A5   8039         SJMP      ??CrossCallReturnLabel_93
   1120            else
   1121            {
   1122              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_1:
   \   0001A7   7402         MOV       A,#0x2
   \   0001A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AC   C3           CLR       C
   \   0001AD   E0           MOVX      A,@DPTR
   \   0001AE   94F4         SUBB      A,#-0xc
   \   0001B0   A3           INC       DPTR
   \   0001B1   E0           MOVX      A,@DPTR
   \   0001B2   94FF         SUBB      A,#-0x1
   \   0001B4   4006         JC        ??writeItem_14
   \   0001B6   7EFC         MOV       R6,#-0x4
   \   0001B8   7FFF         MOV       R7,#-0x1
   \   0001BA   8008         SJMP      ??CrossCallReturnLabel_8
   \                     ??writeItem_14:
   \   0001BC   7402         MOV       A,#0x2
   \   0001BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C1   12....       LCALL     ?Subroutine12 & 0xFFFF
   1123          
   1124              if (len > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]))
   \                     ??CrossCallReturnLabel_8:
   \   0001C4   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0001C7   F8           MOV       R0,A
   \   0001C8   7408         MOV       A,#0x8
   \   0001CA   99           SUBB      A,R1
   \   0001CB   F9           MOV       R1,A
   \   0001CC   C3           CLR       C
   \   0001CD   E8           MOV       A,R0
   \   0001CE   9E           SUBB      A,R6
   \   0001CF   E9           MOV       A,R1
   \   0001D0   9F           SUBB      A,R7
   \   0001D1   5008         JNC       ??writeItem_15
   1125              {
   1126                len = (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]);
   \   0001D3   12....       LCALL     ?Subroutine17 & 0xFFFF
   1127              }
   \                     ??CrossCallReturnLabel_116:
   \   0001D6   FE           MOV       R6,A
   \   0001D7   7408         MOV       A,#0x8
   \   0001D9   99           SUBB      A,R1
   \   0001DA   FF           MOV       R7,A
   1128          
   1129              pgLost[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_15:
   \   0001DB   A8..         MOV       R0,?V0
   \   0001DD   12....       LCALL     ?Subroutine21 & 0xFFFF
   1130            }
   1131            pgOff[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??CrossCallReturnLabel_93:
   \   0001E0   A8..         MOV       R0,?V0
   \   0001E2   E8           MOV       A,R0
   \   0001E3   28           ADD       A,R0
   \   0001E4   F8           MOV       R0,A
   \   0001E5   E4           CLR       A
   \   0001E6   33           RLC       A
   \   0001E7   F9           MOV       R1,A
   \   0001E8   74..         MOV       A,#(pgOff + 14) & 0xff
   \   0001EA   28           ADD       A,R0
   \   0001EB   F582         MOV       DPL,A
   \   0001ED   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   0001EF   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   1132          
   1133            return rtrn;
   \                     ??CrossCallReturnLabel_91:
   \   0001F2   A9..         MOV       R1,?V1
   \   0001F4   7408         MOV       A,#0x8
   \   0001F6   02....       LJMP      ?Subroutine4 & 0xFFFF
   1134          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   AA..         MOV       R2,?V2
   \   000005   AB..         MOV       R3,?V3
   \   000007   A9..         MOV       R1,?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A8..         MOV       R0,?V0
   \   000002   E8           MOV       A,R0
   \   000003   28           ADD       A,R0
   \   000004                REQUIRE ??Subroutine58_0
   \   000004                ; // Fall through to label ??Subroutine58_0
   1135          
   1136          /*********************************************************************
   1137           * @fn      hotItem
   1138           *
   1139           * @brief   Look for the parameter 'id' in the hot items array.
   1140           *
   1141           * @param   id - A valid NV item Id.
   1142           *
   1143           * @return  A valid index into the hot items if the item is hot; OSAL_NV_MAX_HOT if not.
   1144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1145          static uint8 hotItem(uint16 id)
   \                     hotItem:
   1146          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1147            uint8 hotIdx;
   1148          
   1149            for (hotIdx = 0; hotIdx < OSAL_NV_MAX_HOT; hotIdx++)
   \   000004   7900         MOV       R1,#0x0
   1150            {
   1151              if (hotIds[hotIdx] == id)
   \                     ??hotItem_0:
   \   000006   E9           MOV       A,R1
   \   000007   25E0         ADD       A,0xE0 /* A   */
   \   000009   FC           MOV       R4,A
   \   00000A   E4           CLR       A
   \   00000B   33           RLC       A
   \   00000C   FD           MOV       R5,A
   \   00000D   74..         MOV       A,#hotIds & 0xff
   \   00000F   2C           ADD       A,R4
   \   000010   F582         MOV       DPL,A
   \   000012   74..         MOV       A,#(hotIds >> 8) & 0xff
   \   000014   3D           ADDC      A,R5
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6A           XRL       A,R2
   \   000019   7003         JNZ       ??hotItem_1
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6B           XRL       A,R3
   \                     ??hotItem_1:
   \   00001E   6007         JZ        ??hotItem_2
   1152              {
   1153                break;
   1154              }
   1155            }
   \   000020   09           INC       R1
   \   000021   E9           MOV       A,R1
   \   000022   C3           CLR       C
   \   000023   9403         SUBB      A,#0x3
   \   000025   40DF         JC        ??hotItem_0
   1156          
   1157            return hotIdx;
   \                     ??hotItem_2:
   \   000027                REQUIRE ?Subroutine5
   \   000027                ; // Fall through to label ?Subroutine5
   1158          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
   1159          
   1160          /*********************************************************************
   1161           * @fn      hotItemUpdate
   1162           *
   1163           * @brief   If the parameter 'id' is a hot item, update the corresponding hot item data.
   1164           *
   1165           * @param   pg - The new NV page corresponding to the hot item.
   1166           * @param   off - The new NV page offset corresponding to the hot item.
   1167           * @param   id - A valid NV item Id.
   1168           *
   1169           * @return  none
   1170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1171          static void hotItemUpdate(uint8 pg, uint16 off, uint16 id)
   \                     hotItemUpdate:
   1172          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FA           MOV       R2,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FB           MOV       R3,A
   1173            uint8 hotIdx = hotItem(id);
   \   00000F                ; Setup parameters for call to function hotItem
   \   00000F   12....       LCALL     ?Subroutine38 & 0xFFFF
   1174          
   1175            if (hotIdx < OSAL_NV_MAX_HOT)
   \                     ??CrossCallReturnLabel_67:
   \   000012   500E         JNC       ??hotItemUpdate_0
   1176            {
   1177              {
   1178                hotPg[hotIdx] = pg;
   \   000014   12....       LCALL     ?Subroutine37 & 0xFFFF
   1179                hotOff[hotIdx] = off;
   1180              }
   1181            }
   \                     ??CrossCallReturnLabel_65:
   \   000017   EE           MOV       A,R6
   \   000018   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00001B   E5..         MOV       A,?V0
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A3           INC       DPTR
   \   00001F   E5..         MOV       A,?V1
   \   000021   F0           MOVX      @DPTR,A
   1182          }
   \                     ??hotItemUpdate_0:
   \   000022                REQUIRE ?Subroutine6
   \   000022                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     `??hotItem::?relay`; Banked call to: hotItem
   \   000003   E9           MOV       A,R1
   \   000004   F8           MOV       R0,A
   \   000005   C3           CLR       C
   \   000006   9403         SUBB      A,#0x3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   74..         MOV       A,#hotPg & 0xff
   \   000002   29           ADD       A,R1
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   34..         ADDC      A,#(hotPg >> 8) & 0xff
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E9           MOV       A,R1
   \   000001   29           ADD       A,R1
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   74..         MOV       A,#hotOff & 0xff
   \   000008   28           ADD       A,R0
   \   000009   F582         MOV       DPL,A
   \   00000B   74..         MOV       A,#(hotOff >> 8) & 0xff
   \   00000D   39           ADDC      A,R1
   \   00000E   F583         MOV       DPH,A
   \   000010   22           RET
   1183          
   1184          /*********************************************************************
   1185           * @fn      osal_nv_init
   1186           *
   1187           * @brief   Initialize NV service.
   1188           *
   1189           * @param   p - Not used.
   1190           *
   1191           * @return  none
   1192           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1193          void osal_nv_init( void *p )
   \                     osal_nv_init:
   1194          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1195            (void)p;  // Suppress Lint warning.
   1196            (void)initNV();  // Always returns TRUE after pages have been erased.
   \   000004                ; Setup parameters for call to function initNV
   \   000004   12....       LCALL     `??initNV::?relay`; Banked call to: initNV
   1197          }
   \   000007   80..         SJMP      ?Subroutine5
   1198          
   1199          /*********************************************************************
   1200           * @fn      osal_nv_item_init
   1201           *
   1202           * @brief   If the NV item does not already exist, it is created and
   1203           *          initialized with the data passed to the function, if any.
   1204           *          This function must be called before calling osal_nv_read() or
   1205           *          osal_nv_write().
   1206           *
   1207           * @param   id  - Valid NV item Id.
   1208           * @param   len - Item length.
   1209           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1210           *
   1211           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1212           *          SUCCESS        - Id already existed, no action taken.
   1213           *          NV_OPER_FAILED - Failure to find or create Id.
   1214           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1215          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   \                     osal_nv_item_init:
   1216          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   1217            uint16 offset;
   1218          
   1219            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00000D                ; Setup parameters for call to function HalAdcCheckVdd
   \   00000D   794E         MOV       R1,#0x4e
   \   00000F   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000012   E9           MOV       A,R1
   \   000013   6036         JZ        ??osal_nv_item_init_0
   1220            {
   1221              return NV_OPER_FAILED;
   1222            }
   1223            else if ((offset = findItem(id)) != OSAL_NV_ITEM_NULL)
   \   000015                ; Setup parameters for call to function findItem
   \   000015   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000018   6010         JZ        ??osal_nv_item_init_1
   1224            {
   1225              // Re-populate the NV hot item data if the corresponding items are already established.
   1226              hotItemUpdate(findPg, offset, id);
   \   00001A                ; Setup parameters for call to function hotItemUpdate
   \   00001A   EE           MOV       A,R6
   \   00001B   FC           MOV       R4,A
   \   00001C   EF           MOV       A,R7
   \   00001D   FD           MOV       R5,A
   \   00001E   90....       MOV       DPTR,#findPg
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   1227          
   1228              return SUCCESS;
   \   000026   7900         MOV       R1,#0x0
   \   000028   8023         SJMP      ??osal_nv_item_init_2
   1229            }
   1230            else if ( initItem( TRUE, id, len, buf ) != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_item_init_1:
   \   00002A                ; Setup parameters for call to function initItem
   \   00002A   740C         MOV       A,#0xc
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000032   AC..         MOV       R4,?V0
   \   000034   AD..         MOV       R5,?V1
   \   000036   EE           MOV       A,R6
   \   000037   FA           MOV       R2,A
   \   000038   EF           MOV       A,R7
   \   000039   FB           MOV       R3,A
   \   00003A   7901         MOV       R1,#0x1
   \   00003C   12....       LCALL     `??initItem::?relay`; Banked call to: initItem
   \   00003F   7402         MOV       A,#0x2
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   \   000044   E9           MOV       A,R1
   \   000045   6004         JZ        ??osal_nv_item_init_0
   1231            {
   1232              return NV_ITEM_UNINIT;
   \   000047   7909         MOV       R1,#0x9
   \   000049   8002         SJMP      ??osal_nv_item_init_2
   1233            }
   1234            else
   1235            {
   1236              return NV_OPER_FAILED;
   \                     ??osal_nv_item_init_0:
   \   00004B   790A         MOV       R1,#0xa
   1237            }
   \                     ??osal_nv_item_init_2:
   \   00004D   02....       LJMP      ??Subroutine48_0 & 0xFFFF
   1238          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   EE           MOV       A,R6
   \   000001   FA           MOV       R2,A
   \   000002   EF           MOV       A,R7
   \   000003                REQUIRE ??Subroutine59_0
   \   000003                ; // Fall through to label ??Subroutine59_0
   1239          
   1240          /*********************************************************************
   1241           * @fn      osal_nv_item_len
   1242           *
   1243           * @brief   Get the data length of the item stored in NV memory.
   1244           *
   1245           * @param   id  - Valid NV item Id.
   1246           *
   1247           * @return  Item length, if found; zero otherwise.
   1248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1249          uint16 osal_nv_item_len( uint16 id )
   \                     osal_nv_item_len:
   1250          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1251            osalNvHdr_t hdr;
   1252            uint16 offset;
   1253            uint8 hotIdx;
   1254          
   1255            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000E                ; Setup parameters for call to function hotItem
   \   00000E   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000011   5040         JNC       ??osal_nv_item_len_0
   1256            {
   1257              findPg = hotPg[hotIdx];
   \   000013   12....       LCALL     ?Subroutine37 & 0xFFFF
   1258              offset = hotOff[hotIdx];
   1259            }
   \                     ??CrossCallReturnLabel_66:
   \   000016   E0           MOVX      A,@DPTR
   \   000017   90....       MOV       DPTR,#findPg
   \   00001A   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00001D   12....       LCALL     ?Subroutine16 & 0xFFFF
   1260            else if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   1261            {
   1262              return 0;
   1263            }
   1264          
   1265            HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??CrossCallReturnLabel_21:
   \   000020                ; Setup parameters for call to function HalFlashRead
   \   000020   75..08       MOV       ?V0,#0x8
   \   000023   75..00       MOV       ?V1,#0x0
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP102_8
   \   000030   EA           MOV       A,R2
   \   000031   24F8         ADD       A,#-0x8
   \   000033   FA           MOV       R2,A
   \   000034   EB           MOV       A,R3
   \   000035   34FF         ADDC      A,#-0x1
   \   000037   FB           MOV       R3,A
   \   000038   90....       MOV       DPTR,#findPg
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F9           MOV       R1,A
   \   00003D   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   1266            return hdr.len;
   \   000043   7402         MOV       A,#0x2
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00004B   7408         MOV       A,#0x8
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000050   02....       LJMP      ?Subroutine6 & 0xFFFF
   \                     ??osal_nv_item_len_0:
   \   000053                ; Setup parameters for call to function findItem
   \   000053   EE           MOV       A,R6
   \   000054   FA           MOV       R2,A
   \   000055   EF           MOV       A,R7
   \   000056   FB           MOV       R3,A
   \   000057   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   00005A   8B..         MOV       ?V1,R3
   \   00005C   A9..         MOV       R1,?V1
   \   00005E   EA           MOV       A,R2
   \   00005F   49           ORL       A,R1
   \   000060   70BE         JNZ       ??CrossCallReturnLabel_21
   \   000062   7A00         MOV       R2,#0x0
   \   000064   7B00         MOV       R3,#0x0
   \   000066   80E3         SJMP      ??CrossCallReturnLabel_22
   1267          }
   1268          
   1269          /*********************************************************************
   1270           * @fn      osal_nv_write
   1271           *
   1272           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1273           *          an element of an item by indexing into the item with an offset.
   1274           *
   1275           * @param   id  - Valid NV item Id.
   1276           * @param   ndx - Index offset into item
   1277           * @param   len - Length of data to write.
   1278           * @param  *buf - Data to write.
   1279           *
   1280           * @return  SUCCESS if successful, NV_ITEM_UNINIT if item did not
   1281           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1283          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_write:
   1284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7409         MOV       A,#0x9
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   8C..         MOV       ?V2,R4
   \   000016   8D..         MOV       ?V3,R5
   1285            uint8 rtrn = SUCCESS;
   \   000018   75..00       MOV       ?V9,#0x0
   1286          
   1287            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00001B                ; Setup parameters for call to function HalAdcCheckVdd
   \   00001B   794E         MOV       R1,#0x4e
   \   00001D   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000020   E9           MOV       A,R1
   \   000021   606A         JZ        ??osal_nv_write_0
   \   000023   7423         MOV       A,#0x23
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F5..         MOV       ?V10,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V11,A
   1288            {
   1289              return NV_OPER_FAILED;
   1290            }
   1291            else if ( len != 0 )
   \   00002F   E5..         MOV       A,?V10
   \   000031   45..         ORL       A,?V11
   \   000033   7003         JNZ       $+5
   \   000035   02....       LJMP      ??osal_nv_write_1 & 0xFFFF
   1292            {
   1293              osalNvHdr_t hdr;
   1294              uint16 origOff, srcOff;
   1295              uint16 cnt, chk;
   1296              uint8 *ptr, srcPg;
   1297          
   1298              origOff = srcOff = findItem( id );
   \   000038                ; Setup parameters for call to function findItem
   \   000038   7409         MOV       A,#0x9
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000040   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000043   8A..         MOV       ?V14,R2
   \   000045   8B..         MOV       ?V15,R3
   1299              srcPg = findPg;
   \   000047   90....       MOV       DPTR,#findPg
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F5..         MOV       ?V8,A
   1300              if ( srcOff == OSAL_NV_ITEM_NULL )
   \   00004D   EA           MOV       A,R2
   \   00004E   4B           ORL       A,R3
   \   00004F   7005         JNZ       ??osal_nv_write_2
   1301              {
   1302                return NV_ITEM_UNINIT;
   \   000051   7909         MOV       R1,#0x9
   \   000053   02....       LJMP      ??osal_nv_write_3 & 0xFFFF
   1303              }
   1304          
   1305              HalFlashRead(srcPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_write_2:
   \   000056                ; Setup parameters for call to function HalFlashRead
   \   000056   75..08       MOV       ?V0,#0x8
   \   000059   75..00       MOV       ?V1,#0x0
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000061   7403         MOV       A,#0x3
   \   000063   12....       LCALL     ?XSTACK_DISP102_8
   \   000066   EA           MOV       A,R2
   \   000067   24F8         ADD       A,#-0x8
   \   000069   FA           MOV       R2,A
   \   00006A   EB           MOV       A,R3
   \   00006B   34FF         ADDC      A,#-0x1
   \   00006D   FB           MOV       R3,A
   \   00006E   A9..         MOV       R1,?V8
   \   000070   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000073   12....       LCALL     ?DEALLOC_XSTACK8
   1306              if ( hdr.len < (ndx + len) )
   \   000076   7403         MOV       A,#0x3
   \   000078   12....       LCALL     ?XSTACK_DISP0_8
   \   00007B   E5..         MOV       A,?V2
   \   00007D   25..         ADD       A,?V10
   \   00007F   F8           MOV       R0,A
   \   000080   E5..         MOV       A,?V3
   \   000082   35..         ADDC      A,?V11
   \   000084   F9           MOV       R1,A
   \   000085   C3           CLR       C
   \   000086   E0           MOVX      A,@DPTR
   \   000087   98           SUBB      A,R0
   \   000088   A3           INC       DPTR
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   99           SUBB      A,R1
   \   00008B   5005         JNC       ??osal_nv_write_4
   1307              {
   1308                return NV_OPER_FAILED;
   \                     ??osal_nv_write_0:
   \   00008D   790A         MOV       R1,#0xa
   \   00008F   02....       LJMP      ??osal_nv_write_3 & 0xFFFF
   1309              }
   1310          
   1311              srcOff += ndx;
   \                     ??osal_nv_write_4:
   \   000092   E5..         MOV       A,?V14
   \   000094   25..         ADD       A,?V2
   \   000096   F5..         MOV       ?V4,A
   \   000098   E5..         MOV       A,?V15
   \   00009A   35..         ADDC      A,?V3
   \   00009C   F5..         MOV       ?V5,A
   1312              ptr = buf;
   \   00009E   7425         MOV       A,#0x25
   \   0000A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   F5..         MOV       ?V6,A
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   F5..         MOV       ?V7,A
   1313              cnt = len;
   \   0000AA   AE..         MOV       R6,?V10
   \   0000AC   AF..         MOV       R7,?V11
   1314              chk = 0;
   \   0000AE   75..00       MOV       ?V0,#0x0
   \   0000B1   8069         SJMP      ??osal_nv_write_5
   1315              while ( cnt-- )
   1316              {
   1317                uint8 tmp;
   1318                HalFlashRead(srcPg, srcOff, &tmp, 1);
   \                     ??osal_nv_write_6:
   \   0000B3                ; Setup parameters for call to function HalFlashRead
   \   0000B3   75..01       MOV       ?V12,#0x1
   \   0000B6   75..00       MOV       ?V13,#0x0
   \   0000B9   78..         MOV       R0,#?V12
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BE   7402         MOV       A,#0x2
   \   0000C0   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C3   AA..         MOV       R2,?V4
   \   0000C5   AB..         MOV       R3,?V5
   \   0000C7   A9..         MOV       R1,?V8
   \   0000C9   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0000CC   12....       LCALL     ?DEALLOC_XSTACK8
   1319                if ( tmp != *ptr )
   \   0000CF   85..82       MOV       DPL,?XSP + 0
   \   0000D2   85..83       MOV       DPH,?XSP + 1
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   F8           MOV       R0,A
   \   0000D7   85..82       MOV       DPL,?V6
   \   0000DA   85..83       MOV       DPH,?V7
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   68           XRL       A,R0
   \   0000DF   6026         JZ        ??osal_nv_write_7
   1320                {
   1321                  chk = 1;  // Mark that at least one byte is different.
   \   0000E1   75..01       MOV       ?V0,#0x1
   1322                  // Calculate expected checksum after transferring old data and writing new data.
   1323                  hdr.chk -= tmp;
   \   0000E4   7405         MOV       A,#0x5
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E9   C3           CLR       C
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   98           SUBB      A,R0
   \   0000EC   F0           MOVX      @DPTR,A
   \   0000ED   A3           INC       DPTR
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   9400         SUBB      A,#0x0
   \   0000F1   F0           MOVX      @DPTR,A
   1324                  hdr.chk += *ptr;
   \   0000F2   85..82       MOV       DPL,?V6
   \   0000F5   85..83       MOV       DPH,?V7
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   F8           MOV       R0,A
   \   0000FA   7405         MOV       A,#0x5
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   28           ADD       A,R0
   \   000101   F0           MOVX      @DPTR,A
   \   000102   A3           INC       DPTR
   \   000103   E0           MOVX      A,@DPTR
   \   000104   3400         ADDC      A,#0x0
   \   000106   F0           MOVX      @DPTR,A
   1325                }
   1326                srcOff++;
   \                     ??osal_nv_write_7:
   \   000107   05..         INC       ?V4
   \   000109   E5..         MOV       A,?V4
   \   00010B   7002         JNZ       ??osal_nv_write_8
   \   00010D   05..         INC       ?V5
   1327                ptr++;
   \                     ??osal_nv_write_8:
   \   00010F   85..82       MOV       DPL,?V6
   \   000112   85..83       MOV       DPH,?V7
   \   000115   A3           INC       DPTR
   \   000116   8582..       MOV       ?V6,DPL
   \   000119   8583..       MOV       ?V7,DPH
   1328              }
   \                     ??osal_nv_write_5:
   \   00011C   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00011F   7092         JNZ       ??osal_nv_write_6
   1329          
   1330              if ( chk != 0 )  // If the buffer to write is different in one or more bytes.
   \   000121   E5..         MOV       A,?V0
   \   000123   A2E0         MOV       C,0xE0 /* A   */.0
   \   000125   4003         JC        $+5
   \   000127   02....       LJMP      ??osal_nv_write_1 & 0xFFFF
   1331              {
   1332                uint8 comPg = OSAL_NV_PAGE_NULL;
   \   00012A   85..82       MOV       DPL,?XSP + 0
   \   00012D   85..83       MOV       DPH,?XSP + 1
   \   000130   E4           CLR       A
   \   000131   F0           MOVX      @DPTR,A
   1333                uint8 dstPg = initItem( FALSE, id, hdr.len, &comPg );
   \   000132                ; Setup parameters for call to function initItem
   \   000132   A8..         MOV       R0,?XSP + 0
   \   000134   A9..         MOV       R1,?XSP + 1
   \   000136   88..         MOV       ?V0,R0
   \   000138   89..         MOV       ?V1,R1
   \   00013A   78..         MOV       R0,#?V0
   \   00013C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013F   7405         MOV       A,#0x5
   \   000141   12....       LCALL     ?XSTACK_DISP0_8
   \   000144   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000147   740B         MOV       A,#0xb
   \   000149   12....       LCALL     ?XSTACK_DISP0_8
   \   00014C   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00014F   7900         MOV       R1,#0x0
   \   000151   12....       LCALL     `??initItem::?relay`; Banked call to: initItem
   \   000154   7402         MOV       A,#0x2
   \   000156   12....       LCALL     ?DEALLOC_XSTACK8
   \   000159   E9           MOV       A,R1
   \   00015A   F5..         MOV       ?V4,A
   1334          
   1335                if ( dstPg != OSAL_NV_PAGE_NULL )
   \   00015C   7003         JNZ       $+5
   \   00015E   02....       LJMP      ??osal_nv_write_9 & 0xFFFF
   1336                {
   1337                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   \   000161   7403         MOV       A,#0x3
   \   000163   12....       LCALL     ?XSTACK_DISP0_8
   \   000166   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000169   4008         JC        ??osal_nv_write_10
   \   00016B   75..FC       MOV       ?V0,#-0x4
   \   00016E   75..FF       MOV       ?V1,#-0x1
   \   000171   800D         SJMP      ??osal_nv_write_11
   \                     ??osal_nv_write_10:
   \   000173   7403         MOV       A,#0x3
   \   000175   12....       LCALL     ?XSTACK_DISP0_8
   \   000178   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00017B   F5..         MOV       ?V0,A
   \   00017D   E9           MOV       A,R1
   \   00017E   F5..         MOV       ?V1,A
   1338                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \                     ??osal_nv_write_11:
   \   000180   12....       LCALL     ?Subroutine24 & 0xFFFF
   1339                  srcOff = origOff;
   1340          
   1341                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
   1342                   * OSAL_Nv interruptions caused by resets.
   1343                   */
   1344                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \                     ??CrossCallReturnLabel_35:
   \   000183   7407         MOV       A,#0x7
   \   000185   12....       LCALL     ?XSTACK_DISP0_8
   \   000188   E0           MOVX      A,@DPTR
   \   000189   F4           CPL       A
   \   00018A   7003         JNZ       ??osal_nv_write_12
   \   00018C   A3           INC       DPTR
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   F4           CPL       A
   \                     ??osal_nv_write_12:
   \   00018F   700B         JNZ       ??osal_nv_write_13
   1345                  {
   1346                    setItem( srcPg, srcOff, eNvXfer );
   \   000191                ; Setup parameters for call to function setItem
   \   000191   7C00         MOV       R4,#0x0
   \   000193   AA..         MOV       R2,?V14
   \   000195   AB..         MOV       R3,?V15
   \   000197   A9..         MOV       R1,?V8
   \   000199   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   1347                  }
   1348          
   1349                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   \                     ??osal_nv_write_13:
   \   00019C                ; Setup parameters for call to function xferBuf
   \   00019C   78..         MOV       R0,#?V2
   \   00019E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A1   8E..         MOV       ?V6,R6
   \   0001A3   8F..         MOV       ?V7,R7
   \   0001A5   78..         MOV       R0,#?V6
   \   0001A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AA   AC..         MOV       R4,?V4
   \   0001AC   AA..         MOV       R2,?V14
   \   0001AE   AB..         MOV       R3,?V15
   \   0001B0   A9..         MOV       R1,?V8
   \   0001B2   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   0001B5   7404         MOV       A,#0x4
   \   0001B7   12....       LCALL     ?DEALLOC_XSTACK8
   1350                  srcOff += ndx;
   1351                  dstOff += ndx;
   \   0001BA   EE           MOV       A,R6
   \   0001BB   25..         ADD       A,?V2
   \   0001BD   FE           MOV       R6,A
   \   0001BE   EF           MOV       A,R7
   \   0001BF   35..         ADDC      A,?V3
   \   0001C1   FF           MOV       R7,A
   1352          
   1353                  writeBuf( dstPg, dstOff, len, buf );
   \   0001C2                ; Setup parameters for call to function writeBuf
   \   0001C2   7425         MOV       A,#0x25
   \   0001C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C7   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001CA   AC..         MOV       R4,?V10
   \   0001CC   AD..         MOV       R5,?V11
   \   0001CE   EE           MOV       A,R6
   \   0001CF   FA           MOV       R2,A
   \   0001D0   EF           MOV       A,R7
   \   0001D1   FB           MOV       R3,A
   \   0001D2   A9..         MOV       R1,?V4
   \   0001D4   12....       LCALL     `??writeBuf::?relay`; Banked call to: writeBuf
   \   0001D7   7402         MOV       A,#0x2
   \   0001D9   12....       LCALL     ?DEALLOC_XSTACK8
   1354                  srcOff += len;
   1355                  dstOff += len;
   1356          
   1357                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   \   0001DC                ; Setup parameters for call to function xferBuf
   \   0001DC   7403         MOV       A,#0x3
   \   0001DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E1   E0           MOVX      A,@DPTR
   \   0001E2   C3           CLR       C
   \   0001E3   95..         SUBB      A,?V2
   \   0001E5   F8           MOV       R0,A
   \   0001E6   A3           INC       DPTR
   \   0001E7   E0           MOVX      A,@DPTR
   \   0001E8   95..         SUBB      A,?V3
   \   0001EA   F9           MOV       R1,A
   \   0001EB   E8           MOV       A,R0
   \   0001EC   C3           CLR       C
   \   0001ED   95..         SUBB      A,?V10
   \   0001EF   F5..         MOV       ?V6,A
   \   0001F1   E9           MOV       A,R1
   \   0001F2   95..         SUBB      A,?V11
   \   0001F4   F5..         MOV       ?V7,A
   \   0001F6   78..         MOV       R0,#?V6
   \   0001F8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001FB   EE           MOV       A,R6
   \   0001FC   25..         ADD       A,?V10
   \   0001FE   F5..         MOV       ?V6,A
   \   000200   EF           MOV       A,R7
   \   000201   35..         ADDC      A,?V11
   \   000203   F5..         MOV       ?V7,A
   \   000205   78..         MOV       R0,#?V6
   \   000207   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00020A   AC..         MOV       R4,?V4
   \   00020C   E5..         MOV       A,?V14
   \   00020E   25..         ADD       A,?V2
   \   000210   F8           MOV       R0,A
   \   000211   E5..         MOV       A,?V15
   \   000213   35..         ADDC      A,?V3
   \   000215   F9           MOV       R1,A
   \   000216   E8           MOV       A,R0
   \   000217   25..         ADD       A,?V10
   \   000219   FA           MOV       R2,A
   \   00021A   E9           MOV       A,R1
   \   00021B   35..         ADDC      A,?V11
   \   00021D   FB           MOV       R3,A
   \   00021E   A9..         MOV       R1,?V8
   \   000220   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   000223   7404         MOV       A,#0x4
   \   000225   12....       LCALL     ?DEALLOC_XSTACK8
   1358          
   1359                  // Calculate and write the new checksum.
   1360                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   000228   12....       LCALL     ?Subroutine24 & 0xFFFF
   1361          
   1362                  if ( hdr.chk == calcChkF( dstPg, dstOff, hdr.len ) )
   \                     ??CrossCallReturnLabel_36:
   \   00022B                ; Setup parameters for call to function calcChkF
   \   00022B   7403         MOV       A,#0x3
   \   00022D   12....       LCALL     ?XSTACK_DISP0_8
   \   000230   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000233   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   000236   8A..         MOV       ?V0,R2
   \   000238   8B..         MOV       ?V1,R3
   \   00023A   A8..         MOV       R0,?V0
   \   00023C   A9..         MOV       R1,?V1
   \   00023E   7405         MOV       A,#0x5
   \   000240   12....       LCALL     ?XSTACK_DISP0_8
   \   000243   E0           MOVX      A,@DPTR
   \   000244   68           XRL       A,R0
   \   000245   7003         JNZ       ??osal_nv_write_14
   \   000247   A3           INC       DPTR
   \   000248   E0           MOVX      A,@DPTR
   \   000249   69           XRL       A,R1
   \                     ??osal_nv_write_14:
   \   00024A   702E         JNZ       ??osal_nv_write_9
   1363                  {
   1364                    if ( hdr.chk != setChk( dstPg, dstOff, hdr.chk ) )
   \   00024C                ; Setup parameters for call to function setChk
   \   00024C   7405         MOV       A,#0x5
   \   00024E   12....       LCALL     ?XSTACK_DISP0_8
   \   000251   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000254   12....       LCALL     `??setChk::?relay`; Banked call to: setChk
   \   000257   8A..         MOV       ?V0,R2
   \   000259   8B..         MOV       ?V1,R3
   \   00025B   A8..         MOV       R0,?V0
   \   00025D   A9..         MOV       R1,?V1
   \   00025F   7405         MOV       A,#0x5
   \   000261   12....       LCALL     ?XSTACK_DISP0_8
   \   000264   E0           MOVX      A,@DPTR
   \   000265   68           XRL       A,R0
   \   000266   7003         JNZ       ??osal_nv_write_15
   \   000268   A3           INC       DPTR
   \   000269   E0           MOVX      A,@DPTR
   \   00026A   69           XRL       A,R1
   \                     ??osal_nv_write_15:
   \   00026B   700D         JNZ       ??osal_nv_write_9
   1365                    {
   1366                      rtrn = NV_OPER_FAILED;
   1367                    }
   1368                    else
   1369                    {
   1370                      hotItemUpdate(dstPg, dstOff, hdr.id);
   \   00026D                ; Setup parameters for call to function hotItemUpdate
   \   00026D   7401         MOV       A,#0x1
   \   00026F   12....       LCALL     ?XSTACK_DISP0_8
   \   000272   12....       LCALL     ?Subroutine15 & 0xFFFF
   1371                    }
   1372                  }
   1373                  else
   1374                  {
   1375                    rtrn = NV_OPER_FAILED;
   1376                  }
   1377                }
   \                     ??CrossCallReturnLabel_17:
   \   000275   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   \   000278   8003         SJMP      ??osal_nv_write_16
   1378                else
   1379                {
   1380                  rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_9:
   \   00027A   75..0A       MOV       ?V9,#0xa
   1381                }
   1382          
   1383                if ( comPg != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_write_16:
   \   00027D   85..82       MOV       DPL,?XSP + 0
   \   000280   85..83       MOV       DPH,?XSP + 1
   \   000283   E0           MOVX      A,@DPTR
   \   000284   6026         JZ        ??osal_nv_write_17
   1384                {
   1385                  /* Even though the page compaction succeeded, if the new item is coming from the compacted
   1386                   * page and writing the new value failed, then the compaction must be aborted.
   1387                   */
   1388                  if ( (srcPg == comPg) && (rtrn == NV_OPER_FAILED) )
   \   000286   65..         XRL       A,?V8
   \   000288   700B         JNZ       ??osal_nv_write_18
   \   00028A   740A         MOV       A,#0xa
   \   00028C   65..         XRL       A,?V9
   \   00028E   7005         JNZ       ??osal_nv_write_18
   1389                  {
   1390                    erasePage( pgRes );
   \   000290                ; Setup parameters for call to function erasePage
   \   000290   12....       LCALL     ?Subroutine23 & 0xFFFF
   1391                  }
   \                     ??CrossCallReturnLabel_86:
   \   000293   8033         SJMP      ??osal_nv_write_1
   1392                  else
   1393                  {
   1394                    COMPACT_PAGE_CLEANUP( comPg );
   \                     ??osal_nv_write_18:
   \   000295                ; Setup parameters for call to function setPageUse
   \   000295   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000298                ; Setup parameters for call to function erasePage
   \   000298   85..82       MOV       DPL,?XSP + 0
   \   00029B   85..83       MOV       DPH,?XSP + 1
   \   00029E   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0002A1   85..82       MOV       DPL,?XSP + 0
   \   0002A4   85..83       MOV       DPH,?XSP + 1
   \   0002A7   E0           MOVX      A,@DPTR
   \   0002A8   90....       MOV       DPTR,#pgRes
   \   0002AB   F0           MOVX      @DPTR,A
   1395                  }
   1396                }
   1397          
   1398                /* Zero of the old item must wait until after compact page cleanup has finished - if the item
   1399                 * is zeroed before and cleanup is interrupted by a power-cycle, the new item can be lost.
   1400                 */
   1401                if ( (srcPg != comPg) && (rtrn != NV_OPER_FAILED) )
   \                     ??osal_nv_write_17:
   \   0002AC   85..82       MOV       DPL,?XSP + 0
   \   0002AF   85..83       MOV       DPH,?XSP + 1
   \   0002B2   E0           MOVX      A,@DPTR
   \   0002B3   65..         XRL       A,?V8
   \   0002B5   6011         JZ        ??osal_nv_write_1
   \   0002B7   740A         MOV       A,#0xa
   \   0002B9   65..         XRL       A,?V9
   \   0002BB   600B         JZ        ??osal_nv_write_1
   1402                {
   1403                  setItem( srcPg, origOff, eNvZero );
   \   0002BD                ; Setup parameters for call to function setItem
   \   0002BD   7C01         MOV       R4,#0x1
   \   0002BF   AA..         MOV       R2,?V14
   \   0002C1   AB..         MOV       R3,?V15
   \   0002C3   A9..         MOV       R1,?V8
   \   0002C5   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   1404                }
   1405              }
   1406            }
   1407          
   1408            return rtrn;
   \                     ??osal_nv_write_1:
   \   0002C8   A9..         MOV       R1,?V9
   \                     ??osal_nv_write_3:
   \   0002CA   740B         MOV       A,#0xb
   \   0002CC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002CF   7F10         MOV       R7,#0x10
   \   0002D1   02....       LJMP      ?BANKED_LEAVE_XDATA
   1409          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A8..         MOV       R0,?V4
   \   000002   E8           MOV       A,R0
   \   000003   28           ADD       A,R0
   \   000004   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000007   E0           MOVX      A,@DPTR
   \   000008   C3           CLR       C
   \   000009   95..         SUBB      A,?V0
   \   00000B   FE           MOV       R6,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   95..         SUBB      A,?V1
   \   000010   FF           MOV       R7,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   EE           MOV       A,R6
   \   000004   FA           MOV       R2,A
   \   000005   EF           MOV       A,R7
   \   000006   FB           MOV       R3,A
   \   000007   A9..         MOV       R1,?V4
   \   000009   22           RET
   1410          
   1411          /*********************************************************************
   1412           * @fn      osal_nv_read
   1413           *
   1414           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1415           *          an element of an item by indexing into the item with an offset.
   1416           *          Read data is copied into *buf.
   1417           *
   1418           * @param   id  - Valid NV item Id.
   1419           * @param   ndx - Index offset into item
   1420           * @param   len - Length of data to read.
   1421           * @param  *buf - Data is read into this buffer.
   1422           *
   1423           * @return  SUCCESS if NV data was copied to the parameter 'buf'.
   1424           *          Otherwise, NV_OPER_FAILED for failure.
   1425           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1426          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_read:
   1427          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   1428            uint16 offset;
   1429            uint8 hotIdx;
   1430          
   1431            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000D                ; Setup parameters for call to function hotItem
   \   00000D   12....       LCALL     `??hotItem::?relay`; Banked call to: hotItem
   \   000010   E9           MOV       A,R1
   \   000011   F8           MOV       R0,A
   \   000012   7410         MOV       A,#0x10
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00001A   7412         MOV       A,#0x12
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V0,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V1,A
   \   000026   E9           MOV       A,R1
   \   000027   C3           CLR       C
   \   000028   9403         SUBB      A,#0x3
   \   00002A   5023         JNC       ??osal_nv_read_0
   1432            {
   1433              HalFlashRead(hotPg[hotIdx], hotOff[hotIdx]+ndx, buf, len);
   \   00002C   E9           MOV       A,R1
   \   00002D   FE           MOV       R6,A
   \   00002E                ; Setup parameters for call to function HalFlashRead
   \   00002E   78..         MOV       R0,#?V4
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   AC..         MOV       R4,?V0
   \   000035   AD..         MOV       R5,?V1
   \   000037   12....       LCALL     ?Subroutine45 & 0xFFFF
   1434              return SUCCESS;
   1435            }
   \                     ??CrossCallReturnLabel_80:
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   25..         ADD       A,?V2
   \   00003D   FA           MOV       R2,A
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   35..         ADDC      A,?V3
   \   000042   FB           MOV       R3,A
   \   000043   74..         MOV       A,#hotPg & 0xff
   \   000045   2E           ADD       A,R6
   \   000046   F582         MOV       DPL,A
   \   000048   E4           CLR       A
   \   000049   34..         ADDC      A,#(hotPg >> 8) & 0xff
   \   00004B   F583         MOV       DPH,A
   \   00004D   801D         SJMP      ??osal_nv_read_1
   1436          
   1437            if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_read_0:
   \   00004F                ; Setup parameters for call to function findItem
   \   00004F   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000052   7004         JNZ       ??osal_nv_read_2
   1438            {
   1439              return NV_OPER_FAILED;
   \   000054   790A         MOV       R1,#0xa
   \   000056   801E         SJMP      ??osal_nv_read_3
   1440            }
   1441            else
   1442            {
   1443              HalFlashRead(findPg, offset+ndx, buf, len);
   \                     ??osal_nv_read_2:
   \   000058                ; Setup parameters for call to function HalFlashRead
   \   000058   78..         MOV       R0,#?V4
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   AC..         MOV       R4,?V0
   \   00005F   AD..         MOV       R5,?V1
   \   000061   EA           MOV       A,R2
   \   000062   25..         ADD       A,?V2
   \   000064   FA           MOV       R2,A
   \   000065   EB           MOV       A,R3
   \   000066   35..         ADDC      A,?V3
   \   000068   FB           MOV       R3,A
   \   000069   90....       MOV       DPTR,#findPg
   \                     ??osal_nv_read_1:
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F9           MOV       R1,A
   \   00006E   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   1444              return SUCCESS;
   \   000074   7900         MOV       R1,#0x0
   1445            }
   \                     ??osal_nv_read_3:
   \   000076   02....       LJMP      ??Subroutine55_0 & 0xFFFF
   1446          }
   1447          
   1448          /*********************************************************************
   1449           * @fn      osal_nv_delete
   1450           *
   1451           * @brief   Delete item from NV. This function will fail if the length
   1452           *          parameter does not match the length of the item in NV.
   1453           *
   1454           * @param   id  - Valid NV item Id.
   1455           * @param   len - Length of item to delete.
   1456           *
   1457           * @return  SUCCESS if item was deleted,
   1458           *          NV_ITEM_UNINIT if item did not exist in NV,
   1459           *          NV_BAD_ITEM_LEN if length parameter not correct,
   1460           *          NV_OPER_FAILED if attempted deletion failed.
   1461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1462          uint8 osal_nv_delete( uint16 id, uint16 len )
   \                     osal_nv_delete:
   1463          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   1464            uint16 length;
   1465            uint16 offset;
   1466          
   1467            offset = findItem( id );
   \   00000D                ; Setup parameters for call to function findItem
   \   00000D   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   1468            if ( offset == OSAL_NV_ITEM_NULL )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   7004         JNZ       ??osal_nv_delete_0
   1469            {
   1470              // NV item does not exist
   1471              return NV_ITEM_UNINIT;
   \   000018   7909         MOV       R1,#0x9
   \   00001A   802E         SJMP      ??osal_nv_delete_1
   1472            }
   1473          
   1474            length = osal_nv_item_len( id );
   1475            if ( length != len )
   \                     ??osal_nv_delete_0:
   \   00001C                ; Setup parameters for call to function osal_nv_item_len
   \   00001C   EE           MOV       A,R6
   \   00001D   FA           MOV       R2,A
   \   00001E   EF           MOV       A,R7
   \   00001F   FB           MOV       R3,A
   \   000020   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000023   E5..         MOV       A,?V2
   \   000025   6A           XRL       A,R2
   \   000026   7003         JNZ       ??osal_nv_delete_2
   \   000028   E5..         MOV       A,?V3
   \   00002A   6B           XRL       A,R3
   \                     ??osal_nv_delete_2:
   \   00002B   6004         JZ        ??osal_nv_delete_3
   1476            {
   1477              // NV item has different length
   1478              return NV_BAD_ITEM_LEN;
   \   00002D   790C         MOV       R1,#0xc
   \   00002F   8019         SJMP      ??osal_nv_delete_1
   1479            }
   1480          
   1481            // Set item header ID to zero to 'delete' the item
   1482            setItem( findPg, offset, eNvZero );
   \                     ??osal_nv_delete_3:
   \   000031                ; Setup parameters for call to function setItem
   \   000031   7C01         MOV       R4,#0x1
   \   000033   AA..         MOV       R2,?V0
   \   000035   AB..         MOV       R3,?V1
   \   000037   90....       MOV       DPTR,#findPg
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F9           MOV       R1,A
   \   00003C   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   1483          
   1484            // Verify that item has been removed
   1485            offset = findItem( id );
   1486            if ( offset != OSAL_NV_ITEM_NULL )
   \   00003F                ; Setup parameters for call to function findItem
   \   00003F   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000042   6004         JZ        ??osal_nv_delete_4
   1487            {
   1488              // Still there
   1489              return NV_OPER_FAILED;
   \   000044   790A         MOV       R1,#0xa
   \   000046   8002         SJMP      ??osal_nv_delete_1
   1490            }
   1491            else
   1492            {
   1493              // Yes, it's gone
   1494              return SUCCESS;
   \                     ??osal_nv_delete_4:
   \   000048   7900         MOV       R1,#0x0
   1495            }
   \                     ??osal_nv_delete_1:
   \   00004A   02....       LJMP      ?Subroutine3 & 0xFFFF
   1496          }
   1497          
   1498          /*********************************************************************
   1499           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     57   calcChkF
        0     22   -> HalFlashRead
      0     59   compactPage
        0     29   -> HalFlashRead
        0     27   -> calcChkF
        0     27   -> erasePage
        0     27   -> hotItemUpdate
        0     27   -> setChk
        0     27   -> setItem
        0     27   -> setPageUse
        0     30   -> writeItem
        0     31   -> xferBuf
      0     44   erasePage
        0      9   -> HalFlashErase
      0     47   findItem
        0     12   -> initPage
      2     18   hotItem
      1     45   hotItemUpdate
        0     10   -> hotItem
      1     68   initItem
        0     30   -> HalFlashRead
        0     28   -> compactPage
        0     28   -> erasePage
        0     28   -> setPageUse
        0     31   -> writeItem
        0     28   -> writeWordH
      2     22   initNV
        0     22   -> HalFlashRead
        0     20   -> compactPage
        0     20   -> erasePage
        0     20   -> initPage
        0     20   -> setPageUse
      0     48   initPage
        0     28   -> HalFlashRead
        0     26   -> calcChkF
        0     26   -> findItem
        0     26   -> setItem
      0     14   osal_nv_delete
        0     14   -> findItem
        0     14   -> osal_nv_item_len
        0     14   -> setItem
      2      0   osal_nv_init
        2      0   -> initNV
      0     16   osal_nv_item_init
        0     12   -> HalAdcCheckVdd
        0     12   -> findItem
        0     12   -> hotItemUpdate
        0     14   -> initItem
      0     34   osal_nv_item_len
        0     20   -> HalFlashRead
        0     18   -> findItem
        0     18   -> hotItem
      0     22   osal_nv_read
        0     18   -> HalFlashRead
        0     16   -> findItem
        0     16   -> hotItem
      0     43   osal_nv_write
        0     35   -> HalAdcCheckVdd
        0     37   -> HalFlashRead
        0     35   -> calcChkF
        0     35   -> erasePage
        0     35   -> findItem
        0     35   -> hotItemUpdate
        0     37   -> initItem
        0     35   -> setChk
        0     35   -> setItem
        0     35   -> setPageUse
        0     37   -> writeBuf
        0     39   -> xferBuf
      0     51   setChk
        0     16   -> HalFlashRead
        0     14   -> writeWordH
      0     59   setItem
        0     24   -> HalFlashRead
        0     22   -> writeWord
      0     52   setPageUse
        0     17   -> writeWord
      1     61   writeBuf
        0     24   -> HalFlashRead
        0     24   -> HalFlashWrite
        0     22   -> writeWord
      0     57   writeItem
        0     26   -> HalFlashRead
        0     24   -> calcChkF
        0     24   -> hotItemUpdate
        0     24   -> setChk
        0     26   -> writeBuf
        0     24   -> writeWord
      0     38   writeWord
        0     14   -> HalFlashWrite
      1     41   writeWordH
        0     13   -> writeWord
      0     63   xferBuf
        0     24   -> HalFlashRead
        0     22   -> writeWord


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  ??Subroutine47_0
       5  ??Subroutine48_0
       5  ??Subroutine49_0
       6  ??Subroutine50_0
       8  ??Subroutine51_0
       6  ??Subroutine52_0
       8  ??Subroutine53_0
      11  ??Subroutine54_0
       5  ??Subroutine55_0
       6  ??Subroutine56_0
       6  ??Subroutine57_0
      10  ??Subroutine58_0
       7  ??Subroutine59_0
       2  ?Subroutine0
       3  ?Subroutine1
       7  ?Subroutine10
      12  ?Subroutine11
      10  ?Subroutine12
      13  ?Subroutine13
       4  ?Subroutine14
      10  ?Subroutine15
       6  ?Subroutine16
       4  ?Subroutine17
       9  ?Subroutine18
      10  ?Subroutine19
       2  ?Subroutine2
       8  ?Subroutine20
      13  ?Subroutine21
      10  ?Subroutine22
       3  ?Subroutine23
      18  ?Subroutine24
       4  ?Subroutine25
      11  ?Subroutine26
       4  ?Subroutine27
       9  ?Subroutine28
      12  ?Subroutine29
       5  ?Subroutine3
       4  ?Subroutine30
      11  ?Subroutine31
      17  ?Subroutine32
      25  ?Subroutine33
       6  ?Subroutine34
       3  ?Subroutine35
      15  ?Subroutine36
      11  ?Subroutine37
       9  ?Subroutine38
      13  ?Subroutine39
       3  ?Subroutine4
       6  ?Subroutine40
       6  ?Subroutine41
      15  ?Subroutine42
       7  ?Subroutine43
      11  ?Subroutine44
      17  ?Subroutine45
      12  ?Subroutine46
       7  ?Subroutine5
       5  ?Subroutine6
       8  ?Subroutine7
       5  ?Subroutine8
      15  ?Subroutine9
   12288  _nvBuf
     135  calcChkF
     546  compactPage
      30  erasePage
      64  findItem
       1  findPg
       6  hotIds
      39  hotItem
      34  hotItemUpdate
       6  hotOff
       3  hotPg
     356  initItem
     279  initNV
     425  initPage
      77  osal_nv_delete
       9  osal_nv_init
      80  osal_nv_item_init
     104  osal_nv_item_len
     121  osal_nv_read
     724  osal_nv_write
      12  pgLost
      12  pgOff
       1  pgRes
      82  setChk
     118  setItem
      50  setPageUse
     324  writeBuf
     505  writeItem
      56  writeWord
      66  writeWordH
     298  xferBuf
     138  -- Other

 
  5 028 bytes in segment BANKED_CODE
    138 bytes in segment BANK_RELAYS
      6 bytes in segment XDATA_ROM_C
     35 bytes in segment XDATA_Z
 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
 
    138 bytes of CODE     memory
      6 bytes of CONST    memory
  5 028 bytes of HUGECODE memory
 12 323 bytes of XDATA    memory

Errors: none
Warnings: none
